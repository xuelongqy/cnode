{
  "type": "module",
  "source": "doc/api/perf_hooks.md",
  "modules": [
    {
      "textRaw": "Performance Timing API",
      "name": "performance_timing_api",
      "introduced_in": "v8.5.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The Performance Timing API provides an implementation of the\n<a href=\"https://w3c.github.io/performance-timeline/\">W3C Performance Timeline</a> specification. The purpose of the API\nis to support collection of high resolution performance metrics.\nThis is the same Performance API as implemented in modern Web browsers.</p>\n<pre><code class=\"language-js\">const { PerformanceObserver, performance } = require('perf_hooks');\n\nconst obs = new PerformanceObserver((items) => {\n  console.log(items.getEntries()[0].duration);\n  performance.clearMarks();\n});\nobs.observe({ entryTypes: ['measure'] });\n\nperformance.mark('A');\ndoSomeLongRunningProcess(() => {\n  performance.mark('B');\n  performance.measure('A to B', 'A', 'B');\n});\n</code></pre>",
      "modules": [
        {
          "textRaw": "Class: `Performance`",
          "name": "class:_`performance`",
          "meta": {
            "added": [
              "v8.5.0"
            ],
            "changes": []
          },
          "modules": [
            {
              "textRaw": "`performance.clearMarks([name])`",
              "name": "`performance.clearmarks([name])`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>If <code>name</code> is not provided, removes all <code>PerformanceMark</code> objects from the\nPerformance Timeline. If <code>name</code> is provided, removes only the named mark.</p>",
              "type": "module",
              "displayName": "`performance.clearMarks([name])`"
            },
            {
              "textRaw": "`performance.mark([name])`",
              "name": "`performance.mark([name])`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>Creates a new <code>PerformanceMark</code> entry in the Performance Timeline. A\n<code>PerformanceMark</code> is a subclass of <code>PerformanceEntry</code> whose\n<code>performanceEntry.entryType</code> is always <code>'mark'</code>, and whose\n<code>performanceEntry.duration</code> is always <code>0</code>. Performance marks are used\nto mark specific significant moments in the Performance Timeline.</p>",
              "type": "module",
              "displayName": "`performance.mark([name])`"
            },
            {
              "textRaw": "`performance.measure(name, startMark, endMark)`",
              "name": "`performance.measure(name,_startmark,_endmark)`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li><code>startMark</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li><code>endMark</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>Creates a new <code>PerformanceMeasure</code> entry in the Performance Timeline. A\n<code>PerformanceMeasure</code> is a subclass of <code>PerformanceEntry</code> whose\n<code>performanceEntry.entryType</code> is always <code>'measure'</code>, and whose\n<code>performanceEntry.duration</code> measures the number of milliseconds elapsed since\n<code>startMark</code> and <code>endMark</code>.</p>\n<p>The <code>startMark</code> argument may identify any <em>existing</em> <code>PerformanceMark</code> in the\nPerformance Timeline, or <em>may</em> identify any of the timestamp properties\nprovided by the <code>PerformanceNodeTiming</code> class. If the named <code>startMark</code> does\nnot exist, then <code>startMark</code> is set to <a href=\"https://w3c.github.io/hr-time/#dom-performance-timeorigin\"><code>timeOrigin</code></a> by default.</p>\n<p>The <code>endMark</code> argument must identify any <em>existing</em> <code>PerformanceMark</code> in the\nPerformance Timeline or any of the timestamp properties provided by the\n<code>PerformanceNodeTiming</code> class. If the named <code>endMark</code> does not exist, an\nerror will be thrown.</p>",
              "type": "module",
              "displayName": "`performance.measure(name, startMark, endMark)`"
            },
            {
              "textRaw": "`performance.nodeTiming`",
              "name": "`performance.nodetiming`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"perf_hooks.html#perf_hooks_class_performancenodetiming_extends_performanceentry\" class=\"type\">&lt;PerformanceNodeTiming&gt;</a></li>\n</ul>\n<p>An instance of the <code>PerformanceNodeTiming</code> class that provides performance\nmetrics for specific Node.js operational milestones.</p>",
              "type": "module",
              "displayName": "`performance.nodeTiming`"
            },
            {
              "textRaw": "`performance.now()`",
              "name": "`performance.now()`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>Returns the current high resolution millisecond timestamp, where 0 represents\nthe start of the current <code>node</code> process.</p>",
              "type": "module",
              "displayName": "`performance.now()`"
            },
            {
              "textRaw": "`performance.timeOrigin`",
              "name": "`performance.timeorigin`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>The <a href=\"https://w3c.github.io/hr-time/#dom-performance-timeorigin\"><code>timeOrigin</code></a> specifies the high resolution millisecond timestamp at\nwhich the current <code>node</code> process began, measured in Unix time.</p>",
              "type": "module",
              "displayName": "`performance.timeOrigin`"
            },
            {
              "textRaw": "`performance.timerify(fn)`",
              "name": "`performance.timerify(fn)`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>fn</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Wraps a function within a new function that measures the running time of the\nwrapped function. A <code>PerformanceObserver</code> must be subscribed to the <code>'function'</code>\nevent type in order for the timing details to be accessed.</p>\n<pre><code class=\"language-js\">const {\n  performance,\n  PerformanceObserver\n} = require('perf_hooks');\n\nfunction someFunction() {\n  console.log('hello world');\n}\n\nconst wrapped = performance.timerify(someFunction);\n\nconst obs = new PerformanceObserver((list) => {\n  console.log(list.getEntries()[0].duration);\n  obs.disconnect();\n});\nobs.observe({ entryTypes: ['function'] });\n\n// A performance timeline entry will be created\nwrapped();\n</code></pre>",
              "type": "module",
              "displayName": "`performance.timerify(fn)`"
            }
          ],
          "type": "module",
          "displayName": "Class: `Performance`"
        },
        {
          "textRaw": "Class: `PerformanceEntry`",
          "name": "class:_`performanceentry`",
          "meta": {
            "added": [
              "v8.5.0"
            ],
            "changes": []
          },
          "modules": [
            {
              "textRaw": "`performanceEntry.duration`",
              "name": "`performanceentry.duration`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>The total number of milliseconds elapsed for this entry. This value will not\nbe meaningful for all Performance Entry types.</p>",
              "type": "module",
              "displayName": "`performanceEntry.duration`"
            },
            {
              "textRaw": "`performanceEntry.name`",
              "name": "`performanceentry.name`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>The name of the performance entry.</p>",
              "type": "module",
              "displayName": "`performanceEntry.name`"
            },
            {
              "textRaw": "`performanceEntry.startTime`",
              "name": "`performanceentry.starttime`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>The high resolution millisecond timestamp marking the starting time of the\nPerformance Entry.</p>",
              "type": "module",
              "displayName": "`performanceEntry.startTime`"
            },
            {
              "textRaw": "`performanceEntry.entryType`",
              "name": "`performanceentry.entrytype`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>The type of the performance entry. Currently it may be one of: <code>'node'</code>,\n<code>'mark'</code>, <code>'measure'</code>, <code>'gc'</code>, <code>'function'</code>, <code>'http2'</code> or <code>'http'</code>.</p>",
              "type": "module",
              "displayName": "`performanceEntry.entryType`"
            },
            {
              "textRaw": "`performanceEntry.kind`",
              "name": "`performanceentry.kind`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>When <code>performanceEntry.entryType</code> is equal to <code>'gc'</code>, the <code>performance.kind</code>\nproperty identifies the type of garbage collection operation that occurred.\nThe value may be one of:</p>\n<ul>\n<li><code>perf_hooks.constants.NODE_PERFORMANCE_GC_MAJOR</code></li>\n<li><code>perf_hooks.constants.NODE_PERFORMANCE_GC_MINOR</code></li>\n<li><code>perf_hooks.constants.NODE_PERFORMANCE_GC_INCREMENTAL</code></li>\n<li><code>perf_hooks.constants.NODE_PERFORMANCE_GC_WEAKCB</code></li>\n</ul>",
              "type": "module",
              "displayName": "`performanceEntry.kind`"
            }
          ],
          "type": "module",
          "displayName": "Class: `PerformanceEntry`"
        },
        {
          "textRaw": "Class: `PerformanceNodeTiming extends PerformanceEntry`",
          "name": "class:_`performancenodetiming_extends_performanceentry`",
          "meta": {
            "added": [
              "v8.5.0"
            ],
            "changes": []
          },
          "desc": "<p>Provides timing details for Node.js itself.</p>",
          "modules": [
            {
              "textRaw": "`performanceNodeTiming.bootstrapComplete`",
              "name": "`performancenodetiming.bootstrapcomplete`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>The high resolution millisecond timestamp at which the Node.js process\ncompleted bootstrapping. If bootstrapping has not yet finished, the property\nhas the value of -1.</p>",
              "type": "module",
              "displayName": "`performanceNodeTiming.bootstrapComplete`"
            },
            {
              "textRaw": "`performanceNodeTiming.environment`",
              "name": "`performancenodetiming.environment`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>The high resolution millisecond timestamp at which the Node.js environment was\ninitialized.</p>",
              "type": "module",
              "displayName": "`performanceNodeTiming.environment`"
            },
            {
              "textRaw": "`performanceNodeTiming.loopExit`",
              "name": "`performancenodetiming.loopexit`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>The high resolution millisecond timestamp at which the Node.js event loop\nexited. If the event loop has not yet exited, the property has the value of -1.\nIt can only have a value of not -1 in a handler of the <a href=\"process.html#process_event_exit\"><code>'exit'</code></a> event.</p>",
              "type": "module",
              "displayName": "`performanceNodeTiming.loopExit`"
            },
            {
              "textRaw": "`performanceNodeTiming.loopStart`",
              "name": "`performancenodetiming.loopstart`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>The high resolution millisecond timestamp at which the Node.js event loop\nstarted. If the event loop has not yet started (e.g., in the first tick of the\nmain script), the property has the value of -1.</p>",
              "type": "module",
              "displayName": "`performanceNodeTiming.loopStart`"
            },
            {
              "textRaw": "`performanceNodeTiming.nodeStart`",
              "name": "`performancenodetiming.nodestart`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>The high resolution millisecond timestamp at which the Node.js process was\ninitialized.</p>",
              "type": "module",
              "displayName": "`performanceNodeTiming.nodeStart`"
            },
            {
              "textRaw": "`performanceNodeTiming.v8Start`",
              "name": "`performancenodetiming.v8start`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>The high resolution millisecond timestamp at which the V8 platform was\ninitialized.</p>",
              "type": "module",
              "displayName": "`performanceNodeTiming.v8Start`"
            }
          ],
          "type": "module",
          "displayName": "Class: `PerformanceNodeTiming extends PerformanceEntry`"
        },
        {
          "textRaw": "Class: `PerformanceObserver`",
          "name": "class:_`performanceobserver`",
          "modules": [
            {
              "textRaw": "`new PerformanceObserver(callback)`",
              "name": "`new_performanceobserver(callback)`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>\n<p><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></p>\n<ul>\n<li><code>list</code> <a href=\"perf_hooks.html#perf_hooks_class_performanceobserverentrylist\" class=\"type\">&lt;PerformanceObserverEntryList&gt;</a></li>\n<li><code>observer</code> <a href=\"perf_hooks.html#perf_hooks_class_performanceobserver\" class=\"type\">&lt;PerformanceObserver&gt;</a></li>\n</ul>\n</li>\n</ul>\n<p><code>PerformanceObserver</code> objects provide notifications when new\n<code>PerformanceEntry</code> instances have been added to the Performance Timeline.</p>\n<pre><code class=\"language-js\">const {\n  performance,\n  PerformanceObserver\n} = require('perf_hooks');\n\nconst obs = new PerformanceObserver((list, observer) => {\n  console.log(list.getEntries());\n  observer.disconnect();\n});\nobs.observe({ entryTypes: ['mark'], buffered: true });\n\nperformance.mark('test');\n</code></pre>\n<p>Because <code>PerformanceObserver</code> instances introduce their own additional\nperformance overhead, instances should not be left subscribed to notifications\nindefinitely. Users should disconnect observers as soon as they are no\nlonger needed.</p>\n<p>The <code>callback</code> is invoked when a <code>PerformanceObserver</code> is\nnotified about new <code>PerformanceEntry</code> instances. The callback receives a\n<code>PerformanceObserverEntryList</code> instance and a reference to the\n<code>PerformanceObserver</code>.</p>",
              "type": "module",
              "displayName": "`new PerformanceObserver(callback)`"
            },
            {
              "textRaw": "`performanceObserver.disconnect()`",
              "name": "`performanceobserver.disconnect()`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>Disconnects the <code>PerformanceObserver</code> instance from all notifications.</p>",
              "type": "module",
              "displayName": "`performanceObserver.disconnect()`"
            },
            {
              "textRaw": "`performanceObserver.observe(options)`",
              "name": "`performanceobserver.observe(options)`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>entryTypes</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> An array of strings identifying the types of\n<code>PerformanceEntry</code> instances the observer is interested in. If not\nprovided an error will be thrown.</li>\n<li><code>buffered</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If true, the notification callback will be\ncalled using <code>setImmediate()</code> and multiple <code>PerformanceEntry</code> instance\nnotifications will be buffered internally. If <code>false</code>, notifications will\nbe immediate and synchronous. <strong>Default:</strong> <code>false</code>.</li>\n</ul>\n</li>\n</ul>\n<p>Subscribes the <code>PerformanceObserver</code> instance to notifications of new\n<code>PerformanceEntry</code> instances identified by <code>options.entryTypes</code>.</p>\n<p>When <code>options.buffered</code> is <code>false</code>, the <code>callback</code> will be invoked once for\nevery <code>PerformanceEntry</code> instance:</p>\n<pre><code class=\"language-js\">const {\n  performance,\n  PerformanceObserver\n} = require('perf_hooks');\n\nconst obs = new PerformanceObserver((list, observer) => {\n  // Called three times synchronously. `list` contains one item.\n});\nobs.observe({ entryTypes: ['mark'] });\n\nfor (let n = 0; n &#x3C; 3; n++)\n  performance.mark(`test${n}`);\n</code></pre>\n<pre><code class=\"language-js\">const {\n  performance,\n  PerformanceObserver\n} = require('perf_hooks');\n\nconst obs = new PerformanceObserver((list, observer) => {\n  // Called once. `list` contains three items.\n});\nobs.observe({ entryTypes: ['mark'], buffered: true });\n\nfor (let n = 0; n &#x3C; 3; n++)\n  performance.mark(`test${n}`);\n</code></pre>",
              "type": "module",
              "displayName": "`performanceObserver.observe(options)`"
            }
          ],
          "type": "module",
          "displayName": "Class: `PerformanceObserver`"
        },
        {
          "textRaw": "Class: `PerformanceObserverEntryList`",
          "name": "class:_`performanceobserverentrylist`",
          "meta": {
            "added": [
              "v8.5.0"
            ],
            "changes": []
          },
          "desc": "<p>The <code>PerformanceObserverEntryList</code> class is used to provide access to the\n<code>PerformanceEntry</code> instances passed to a <code>PerformanceObserver</code>.</p>",
          "modules": [
            {
              "textRaw": "`performanceObserverEntryList.getEntries()`",
              "name": "`performanceobserverentrylist.getentries()`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Returns: <a href=\"perf_hooks.html#perf_hooks_class_performanceentry\" class=\"type\">&lt;PerformanceEntry[]&gt;</a></li>\n</ul>\n<p>Returns a list of <code>PerformanceEntry</code> objects in chronological order\nwith respect to <code>performanceEntry.startTime</code>.</p>",
              "type": "module",
              "displayName": "`performanceObserverEntryList.getEntries()`"
            },
            {
              "textRaw": "`performanceObserverEntryList.getEntriesByName(name[, type])`",
              "name": "`performanceobserverentrylist.getentriesbyname(name[,_type])`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li><code>type</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li>Returns: <a href=\"perf_hooks.html#perf_hooks_class_performanceentry\" class=\"type\">&lt;PerformanceEntry[]&gt;</a></li>\n</ul>\n<p>Returns a list of <code>PerformanceEntry</code> objects in chronological order\nwith respect to <code>performanceEntry.startTime</code> whose <code>performanceEntry.name</code> is\nequal to <code>name</code>, and optionally, whose <code>performanceEntry.entryType</code> is equal to\n<code>type</code>.</p>",
              "type": "module",
              "displayName": "`performanceObserverEntryList.getEntriesByName(name[, type])`"
            },
            {
              "textRaw": "`performanceObserverEntryList.getEntriesByType(type)`",
              "name": "`performanceobserverentrylist.getentriesbytype(type)`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>type</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li>Returns: <a href=\"perf_hooks.html#perf_hooks_class_performanceentry\" class=\"type\">&lt;PerformanceEntry[]&gt;</a></li>\n</ul>\n<p>Returns a list of <code>PerformanceEntry</code> objects in chronological order\nwith respect to <code>performanceEntry.startTime</code> whose <code>performanceEntry.entryType</code>\nis equal to <code>type</code>.</p>",
              "type": "module",
              "displayName": "`performanceObserverEntryList.getEntriesByType(type)`"
            }
          ],
          "type": "module",
          "displayName": "Class: `PerformanceObserverEntryList`"
        },
        {
          "textRaw": "`perf_hooks.monitorEventLoopDelay([options])`",
          "name": "`perf_hooks.monitoreventloopdelay([options])`",
          "meta": {
            "added": [
              "v11.10.0"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>resolution</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The sampling rate in milliseconds. Must be greater\nthan zero. <strong>Default:</strong> <code>10</code>.</li>\n</ul>\n</li>\n<li>Returns: <a href=\"perf_hooks.html#perf_hooks_class_histogram\" class=\"type\">&lt;Histogram&gt;</a></li>\n</ul>\n<p>Creates a <code>Histogram</code> object that samples and reports the event loop delay\nover time. The delays will be reported in nanoseconds.</p>\n<p>Using a timer to detect approximate event loop delay works because the\nexecution of timers is tied specifically to the lifecycle of the libuv\nevent loop. That is, a delay in the loop will cause a delay in the execution\nof the timer, and those delays are specifically what this API is intended to\ndetect.</p>\n<pre><code class=\"language-js\">const { monitorEventLoopDelay } = require('perf_hooks');\nconst h = monitorEventLoopDelay({ resolution: 20 });\nh.enable();\n// Do something.\nh.disable();\nconsole.log(h.min);\nconsole.log(h.max);\nconsole.log(h.mean);\nconsole.log(h.stddev);\nconsole.log(h.percentiles);\nconsole.log(h.percentile(50));\nconsole.log(h.percentile(99));\n</code></pre>",
          "modules": [
            {
              "textRaw": "Class: `Histogram`",
              "name": "class:_`histogram`",
              "meta": {
                "added": [
                  "v11.10.0"
                ],
                "changes": []
              },
              "desc": "<p>Tracks the event loop delay at a given sampling rate.</p>",
              "modules": [
                {
                  "textRaw": "`histogram.disable()`",
                  "name": "`histogram.disable()`",
                  "meta": {
                    "added": [
                      "v11.10.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Disables the event loop delay sample timer. Returns <code>true</code> if the timer was\nstopped, <code>false</code> if it was already stopped.</p>",
                  "type": "module",
                  "displayName": "`histogram.disable()`"
                },
                {
                  "textRaw": "`histogram.enable()`",
                  "name": "`histogram.enable()`",
                  "meta": {
                    "added": [
                      "v11.10.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Enables the event loop delay sample timer. Returns <code>true</code> if the timer was\nstarted, <code>false</code> if it was already started.</p>",
                  "type": "module",
                  "displayName": "`histogram.enable()`"
                },
                {
                  "textRaw": "`histogram.exceeds`",
                  "name": "`histogram.exceeds`",
                  "meta": {
                    "added": [
                      "v11.10.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>The number of times the event loop delay exceeded the maximum 1 hour event\nloop delay threshold.</p>",
                  "type": "module",
                  "displayName": "`histogram.exceeds`"
                },
                {
                  "textRaw": "`histogram.max`",
                  "name": "`histogram.max`",
                  "meta": {
                    "added": [
                      "v11.10.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>The maximum recorded event loop delay.</p>",
                  "type": "module",
                  "displayName": "`histogram.max`"
                },
                {
                  "textRaw": "`histogram.mean`",
                  "name": "`histogram.mean`",
                  "meta": {
                    "added": [
                      "v11.10.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>The mean of the recorded event loop delays.</p>",
                  "type": "module",
                  "displayName": "`histogram.mean`"
                },
                {
                  "textRaw": "`histogram.min`",
                  "name": "`histogram.min`",
                  "meta": {
                    "added": [
                      "v11.10.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>The minimum recorded event loop delay.</p>",
                  "type": "module",
                  "displayName": "`histogram.min`"
                },
                {
                  "textRaw": "`histogram.percentile(percentile)`",
                  "name": "`histogram.percentile(percentile)`",
                  "meta": {
                    "added": [
                      "v11.10.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>percentile</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> A percentile value between 1 and 100.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>Returns the value at the given percentile.</p>",
                  "type": "module",
                  "displayName": "`histogram.percentile(percentile)`"
                },
                {
                  "textRaw": "`histogram.percentiles`",
                  "name": "`histogram.percentiles`",
                  "meta": {
                    "added": [
                      "v11.10.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" class=\"type\">&lt;Map&gt;</a></li>\n</ul>\n<p>Returns a <code>Map</code> object detailing the accumulated percentile distribution.</p>",
                  "type": "module",
                  "displayName": "`histogram.percentiles`"
                },
                {
                  "textRaw": "`histogram.reset()`",
                  "name": "`histogram.reset()`",
                  "meta": {
                    "added": [
                      "v11.10.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Resets the collected histogram data.</p>",
                  "type": "module",
                  "displayName": "`histogram.reset()`"
                },
                {
                  "textRaw": "`histogram.stddev`",
                  "name": "`histogram.stddev`",
                  "meta": {
                    "added": [
                      "v11.10.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>The standard deviation of the recorded event loop delays.</p>\n<h2>Examples</h2>",
                  "type": "module",
                  "displayName": "`histogram.stddev`"
                }
              ],
              "type": "module",
              "displayName": "Class: `Histogram`"
            },
            {
              "textRaw": "Measuring the duration of async operations",
              "name": "measuring_the_duration_of_async_operations",
              "desc": "<p>The following example uses the <a href=\"async_hooks.html\">Async Hooks</a> and Performance APIs to measure\nthe actual duration of a Timeout operation (including the amount of time it took\nto execute the callback).</p>\n<pre><code class=\"language-js\">'use strict';\nconst async_hooks = require('async_hooks');\nconst {\n  performance,\n  PerformanceObserver\n} = require('perf_hooks');\n\nconst set = new Set();\nconst hook = async_hooks.createHook({\n  init(id, type) {\n    if (type === 'Timeout') {\n      performance.mark(`Timeout-${id}-Init`);\n      set.add(id);\n    }\n  },\n  destroy(id) {\n    if (set.has(id)) {\n      set.delete(id);\n      performance.mark(`Timeout-${id}-Destroy`);\n      performance.measure(`Timeout-${id}`,\n                          `Timeout-${id}-Init`,\n                          `Timeout-${id}-Destroy`);\n    }\n  }\n});\nhook.enable();\n\nconst obs = new PerformanceObserver((list, observer) => {\n  console.log(list.getEntries()[0]);\n  performance.clearMarks();\n  observer.disconnect();\n});\nobs.observe({ entryTypes: ['measure'], buffered: true });\n\nsetTimeout(() => {}, 1000);\n</code></pre>",
              "type": "module",
              "displayName": "Measuring the duration of async operations"
            },
            {
              "textRaw": "Measuring how long it takes to load dependencies",
              "name": "measuring_how_long_it_takes_to_load_dependencies",
              "desc": "<p>The following example measures the duration of <code>require()</code> operations to load\ndependencies:</p>\n<!-- eslint-disable no-global-assign -->\n<pre><code class=\"language-js\">'use strict';\nconst {\n  performance,\n  PerformanceObserver\n} = require('perf_hooks');\nconst mod = require('module');\n\n// Monkey patch the require function\nmod.Module.prototype.require =\n  performance.timerify(mod.Module.prototype.require);\nrequire = performance.timerify(require);\n\n// Activate the observer\nconst obs = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  entries.forEach((entry) => {\n    console.log(`require('${entry[0]}')`, entry.duration);\n  });\n  obs.disconnect();\n});\nobs.observe({ entryTypes: ['function'], buffered: true });\n\nrequire('some-module');\n</code></pre>",
              "type": "module",
              "displayName": "Measuring how long it takes to load dependencies"
            }
          ],
          "type": "module",
          "displayName": "`perf_hooks.monitorEventLoopDelay([options])`"
        }
      ],
      "type": "module",
      "displayName": "Performance Timing API"
    }
  ]
}