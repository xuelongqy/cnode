{
  "type": "module",
  "source": "doc/api/readline.md",
  "modules": [
    {
      "textRaw": "Readline",
      "name": "readline",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>readline</code> module provides an interface for reading data from a <a href=\"stream.html#stream_readable_streams\">Readable</a>\nstream (such as <a href=\"process.html#process_process_stdin\"><code>process.stdin</code></a>) one line at a time. It can be accessed\nusing:</p>\n<pre><code class=\"language-js\">const readline = require('readline');\n</code></pre>\n<p>The following simple example illustrates the basic use of the <code>readline</code> module.</p>\n<pre><code class=\"language-js\">const readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nrl.question('What do you think of Node.js? ', (answer) => {\n  // TODO: Log the answer in a database\n  console.log(`Thank you for your valuable feedback: ${answer}`);\n\n  rl.close();\n});\n</code></pre>\n<p>Once this code is invoked, the Node.js application will not terminate until the\n<code>readline.Interface</code> is closed because the interface waits for data to be\nreceived on the <code>input</code> stream.</p>",
      "modules": [
        {
          "textRaw": "Class: `Interface`",
          "name": "class:_`interface`",
          "meta": {
            "added": [
              "v0.1.104"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li>Extends: <a href=\"events.html#events_class_eventemitter\" class=\"type\">&lt;EventEmitter&gt;</a></li>\n</ul>\n<p>Instances of the <code>readline.Interface</code> class are constructed using the\n<code>readline.createInterface()</code> method. Every instance is associated with a\nsingle <code>input</code> <a href=\"stream.html#stream_readable_streams\">Readable</a> stream and a single <code>output</code> <a href=\"stream.html#stream_writable_streams\">Writable</a> stream.\nThe <code>output</code> stream is used to print prompts for user input that arrives on,\nand is read from, the <code>input</code> stream.</p>",
          "modules": [
            {
              "textRaw": "Event: `'close'`",
              "name": "event:_`'close'`",
              "meta": {
                "added": [
                  "v0.1.98"
                ],
                "changes": []
              },
              "desc": "<p>The <code>'close'</code> event is emitted when one of the following occur:</p>\n<ul>\n<li>The <code>rl.close()</code> method is called and the <code>readline.Interface</code> instance has\nrelinquished control over the <code>input</code> and <code>output</code> streams;</li>\n<li>The <code>input</code> stream receives its <code>'end'</code> event;</li>\n<li>The <code>input</code> stream receives <code>&#x3C;ctrl>-D</code> to signal end-of-transmission (EOT);</li>\n<li>The <code>input</code> stream receives <code>&#x3C;ctrl>-C</code> to signal <code>SIGINT</code> and there is no\n<code>'SIGINT'</code> event listener registered on the <code>readline.Interface</code> instance.</li>\n</ul>\n<p>The listener function is called without passing any arguments.</p>\n<p>The <code>readline.Interface</code> instance is finished once the <code>'close'</code> event is\nemitted.</p>",
              "type": "module",
              "displayName": "Event: `'close'`"
            },
            {
              "textRaw": "Event: `'line'`",
              "name": "event:_`'line'`",
              "meta": {
                "added": [
                  "v0.1.98"
                ],
                "changes": []
              },
              "desc": "<p>The <code>'line'</code> event is emitted whenever the <code>input</code> stream receives an\nend-of-line input (<code>\\n</code>, <code>\\r</code>, or <code>\\r\\n</code>). This usually occurs when the user\npresses the <code>&#x3C;Enter></code>, or <code>&#x3C;Return></code> keys.</p>\n<p>The listener function is called with a string containing the single line of\nreceived input.</p>\n<pre><code class=\"language-js\">rl.on('line', (input) => {\n  console.log(`Received: ${input}`);\n});\n</code></pre>",
              "type": "module",
              "displayName": "Event: `'line'`"
            },
            {
              "textRaw": "Event: `'pause'`",
              "name": "event:_`'pause'`",
              "meta": {
                "added": [
                  "v0.7.5"
                ],
                "changes": []
              },
              "desc": "<p>The <code>'pause'</code> event is emitted when one of the following occur:</p>\n<ul>\n<li>The <code>input</code> stream is paused.</li>\n<li>The <code>input</code> stream is not paused and receives the <code>'SIGCONT'</code> event. (See\nevents <a href=\"readline.html#readline_event_sigtstp\"><code>'SIGTSTP'</code></a> and <a href=\"readline.html#readline_event_sigcont\"><code>'SIGCONT'</code></a>.)</li>\n</ul>\n<p>The listener function is called without passing any arguments.</p>\n<pre><code class=\"language-js\">rl.on('pause', () => {\n  console.log('Readline paused.');\n});\n</code></pre>",
              "type": "module",
              "displayName": "Event: `'pause'`"
            },
            {
              "textRaw": "Event: `'resume'`",
              "name": "event:_`'resume'`",
              "meta": {
                "added": [
                  "v0.7.5"
                ],
                "changes": []
              },
              "desc": "<p>The <code>'resume'</code> event is emitted whenever the <code>input</code> stream is resumed.</p>\n<p>The listener function is called without passing any arguments.</p>\n<pre><code class=\"language-js\">rl.on('resume', () => {\n  console.log('Readline resumed.');\n});\n</code></pre>",
              "type": "module",
              "displayName": "Event: `'resume'`"
            },
            {
              "textRaw": "Event: `'SIGCONT'`",
              "name": "event:_`'sigcont'`",
              "meta": {
                "added": [
                  "v0.7.5"
                ],
                "changes": []
              },
              "desc": "<p>The <code>'SIGCONT'</code> event is emitted when a Node.js process previously moved into\nthe background using <code>&#x3C;ctrl>-Z</code> (i.e. <code>SIGTSTP</code>) is then brought back to the\nforeground using <a href=\"http://man7.org/linux/man-pages/man1/fg.1p.html\"><code>fg(1p)</code></a>.</p>\n<p>If the <code>input</code> stream was paused <em>before</em> the <code>SIGTSTP</code> request, this event will\nnot be emitted.</p>\n<p>The listener function is invoked without passing any arguments.</p>\n<pre><code class=\"language-js\">rl.on('SIGCONT', () => {\n  // `prompt` will automatically resume the stream\n  rl.prompt();\n});\n</code></pre>\n<p>The <code>'SIGCONT'</code> event is <em>not</em> supported on Windows.</p>",
              "type": "module",
              "displayName": "Event: `'SIGCONT'`"
            },
            {
              "textRaw": "Event: `'SIGINT'`",
              "name": "event:_`'sigint'`",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>'SIGINT'</code> event is emitted whenever the <code>input</code> stream receives a\n<code>&#x3C;ctrl>-C</code> input, known typically as <code>SIGINT</code>. If there are no <code>'SIGINT'</code> event\nlisteners registered when the <code>input</code> stream receives a <code>SIGINT</code>, the <code>'pause'</code>\nevent will be emitted.</p>\n<p>The listener function is invoked without passing any arguments.</p>\n<pre><code class=\"language-js\">rl.on('SIGINT', () => {\n  rl.question('Are you sure you want to exit? ', (answer) => {\n    if (answer.match(/^y(es)?$/i)) rl.pause();\n  });\n});\n</code></pre>",
              "type": "module",
              "displayName": "Event: `'SIGINT'`"
            },
            {
              "textRaw": "Event: `'SIGTSTP'`",
              "name": "event:_`'sigtstp'`",
              "meta": {
                "added": [
                  "v0.7.5"
                ],
                "changes": []
              },
              "desc": "<p>The <code>'SIGTSTP'</code> event is emitted when the <code>input</code> stream receives a <code>&#x3C;ctrl>-Z</code>\ninput, typically known as <code>SIGTSTP</code>. If there are no <code>'SIGTSTP'</code> event listeners\nregistered when the <code>input</code> stream receives a <code>SIGTSTP</code>, the Node.js process\nwill be sent to the background.</p>\n<p>When the program is resumed using <a href=\"http://man7.org/linux/man-pages/man1/fg.1p.html\"><code>fg(1p)</code></a>, the <code>'pause'</code> and <code>'SIGCONT'</code> events\nwill be emitted. These can be used to resume the <code>input</code> stream.</p>\n<p>The <code>'pause'</code> and <code>'SIGCONT'</code> events will not be emitted if the <code>input</code> was\npaused before the process was sent to the background.</p>\n<p>The listener function is invoked without passing any arguments.</p>\n<pre><code class=\"language-js\">rl.on('SIGTSTP', () => {\n  // This will override SIGTSTP and prevent the program from going to the\n  // background.\n  console.log('Caught SIGTSTP.');\n});\n</code></pre>\n<p>The <code>'SIGTSTP'</code> event is <em>not</em> supported on Windows.</p>",
              "type": "module",
              "displayName": "Event: `'SIGTSTP'`"
            },
            {
              "textRaw": "`rl.close()`",
              "name": "`rl.close()`",
              "meta": {
                "added": [
                  "v0.1.98"
                ],
                "changes": []
              },
              "desc": "<p>The <code>rl.close()</code> method closes the <code>readline.Interface</code> instance and\nrelinquishes control over the <code>input</code> and <code>output</code> streams. When called,\nthe <code>'close'</code> event will be emitted.</p>\n<p>Calling <code>rl.close()</code> does not immediately stop other events (including <code>'line'</code>)\nfrom being emitted by the <code>readline.Interface</code> instance.</p>",
              "type": "module",
              "displayName": "`rl.close()`"
            },
            {
              "textRaw": "`rl.pause()`",
              "name": "`rl.pause()`",
              "meta": {
                "added": [
                  "v0.3.4"
                ],
                "changes": []
              },
              "desc": "<p>The <code>rl.pause()</code> method pauses the <code>input</code> stream, allowing it to be resumed\nlater if necessary.</p>\n<p>Calling <code>rl.pause()</code> does not immediately pause other events (including\n<code>'line'</code>) from being emitted by the <code>readline.Interface</code> instance.</p>",
              "type": "module",
              "displayName": "`rl.pause()`"
            },
            {
              "textRaw": "`rl.prompt([preserveCursor])`",
              "name": "`rl.prompt([preservecursor])`",
              "meta": {
                "added": [
                  "v0.1.98"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>preserveCursor</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, prevents the cursor placement from\nbeing reset to <code>0</code>.</li>\n</ul>\n<p>The <code>rl.prompt()</code> method writes the <code>readline.Interface</code> instances configured\n<code>prompt</code> to a new line in <code>output</code> in order to provide a user with a new\nlocation at which to provide input.</p>\n<p>When called, <code>rl.prompt()</code> will resume the <code>input</code> stream if it has been\npaused.</p>\n<p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or\n<code>undefined</code> the prompt is not written.</p>",
              "type": "module",
              "displayName": "`rl.prompt([preserveCursor])`"
            },
            {
              "textRaw": "`rl.question(query, callback)`",
              "name": "`rl.question(query,_callback)`",
              "meta": {
                "added": [
                  "v0.3.3"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>query</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A statement or query to write to <code>output</code>, prepended to the\nprompt.</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function that is invoked with the user's\ninput in response to the <code>query</code>.</li>\n</ul>\n<p>The <code>rl.question()</code> method displays the <code>query</code> by writing it to the <code>output</code>,\nwaits for user input to be provided on <code>input</code>, then invokes the <code>callback</code>\nfunction passing the provided input as the first argument.</p>\n<p>When called, <code>rl.question()</code> will resume the <code>input</code> stream if it has been\npaused.</p>\n<p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or\n<code>undefined</code> the <code>query</code> is not written.</p>\n<p>Example usage:</p>\n<pre><code class=\"language-js\">rl.question('What is your favorite food? ', (answer) => {\n  console.log(`Oh, so your favorite food is ${answer}`);\n});\n</code></pre>\n<p>The <code>callback</code> function passed to <code>rl.question()</code> does not follow the typical\npattern of accepting an <code>Error</code> object or <code>null</code> as the first argument.\nThe <code>callback</code> is called with the provided answer as the only argument.</p>",
              "type": "module",
              "displayName": "`rl.question(query, callback)`"
            },
            {
              "textRaw": "`rl.resume()`",
              "name": "`rl.resume()`",
              "meta": {
                "added": [
                  "v0.3.4"
                ],
                "changes": []
              },
              "desc": "<p>The <code>rl.resume()</code> method resumes the <code>input</code> stream if it has been paused.</p>",
              "type": "module",
              "displayName": "`rl.resume()`"
            },
            {
              "textRaw": "`rl.setPrompt(prompt)`",
              "name": "`rl.setprompt(prompt)`",
              "meta": {
                "added": [
                  "v0.1.98"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>prompt</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>The <code>rl.setPrompt()</code> method sets the prompt that will be written to <code>output</code>\nwhenever <code>rl.prompt()</code> is called.</p>",
              "type": "module",
              "displayName": "`rl.setPrompt(prompt)`"
            },
            {
              "textRaw": "`rl.write(data[, key])`",
              "name": "`rl.write(data[,_key])`",
              "meta": {
                "added": [
                  "v0.1.98"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>data</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li>\n<p><code>key</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>ctrl</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> to indicate the <code>&#x3C;ctrl></code> key.</li>\n<li><code>meta</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> to indicate the <code>&#x3C;Meta></code> key.</li>\n<li><code>shift</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> to indicate the <code>&#x3C;Shift></code> key.</li>\n<li><code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The name of the a key.</li>\n</ul>\n</li>\n</ul>\n<p>The <code>rl.write()</code> method will write either <code>data</code> or a key sequence identified\nby <code>key</code> to the <code>output</code>. The <code>key</code> argument is supported only if <code>output</code> is\na <a href=\"tty.html\">TTY</a> text terminal.</p>\n<p>If <code>key</code> is specified, <code>data</code> is ignored.</p>\n<p>When called, <code>rl.write()</code> will resume the <code>input</code> stream if it has been\npaused.</p>\n<p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or\n<code>undefined</code> the <code>data</code> and <code>key</code> are not written.</p>\n<pre><code class=\"language-js\">rl.write('Delete this!');\n// Simulate Ctrl+u to delete the line written previously\nrl.write(null, { ctrl: true, name: 'u' });\n</code></pre>\n<p>The <code>rl.write()</code> method will write the data to the <code>readline</code> <code>Interface</code>'s\n<code>input</code> <em>as if it were provided by the user</em>.</p>",
              "type": "module",
              "displayName": "`rl.write(data[, key])`"
            },
            {
              "textRaw": "`rl[Symbol.asyncIterator]()`",
              "name": "`rl[symbol.asynciterator]()`",
              "meta": {
                "added": [
                  "v11.4.0"
                ],
                "changes": [
                  {
                    "version": "v11.14.0",
                    "pr-url": "https://github.com/nodejs/node/pull/26989",
                    "description": "Symbol.asyncIterator support is no longer experimental."
                  }
                ]
              },
              "desc": "<ul>\n<li>Returns: <a href=\"https://tc39.github.io/ecma262/#sec-asynciterator-interface\" class=\"type\">&lt;AsyncIterator&gt;</a></li>\n</ul>\n<p>Create an <code>AsyncIterator</code> object that iterates through each line in the input\nstream as a string. This method allows asynchronous iteration of\n<code>readline.Interface</code> objects through <code>for await...of</code> loops.</p>\n<p>Errors in the input stream are not forwarded.</p>\n<p>If the loop is terminated with <code>break</code>, <code>throw</code>, or <code>return</code>,\n<a href=\"#readline_rl_close\"><code>rl.close()</code></a> will be called. In other words, iterating over a\n<code>readline.Interface</code> will always consume the input stream fully.</p>\n<p>Performance is not on par with the traditional <code>'line'</code> event API. Use <code>'line'</code>\ninstead for performance-sensitive applications.</p>\n<pre><code class=\"language-js\">async function processLineByLine() {\n  const rl = readline.createInterface({\n    // ...\n  });\n\n  for await (const line of rl) {\n    // Each line in the readline input will be successively available here as\n    // `line`.\n  }\n}\n</code></pre>",
              "type": "module",
              "displayName": "`rl[Symbol.asyncIterator]()`"
            },
            {
              "textRaw": "`rl.getCursorPos()`",
              "name": "`rl.getcursorpos()`",
              "meta": {
                "added": [
                  "v12.16.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>\n<p>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>rows</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> the row of the prompt the cursor currently lands on</li>\n<li><code>cols</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> the screen column the cursor currently lands on</li>\n</ul>\n</li>\n</ul>\n<p>Returns the real position of the cursor in relation to the input\nprompt + string.  Long input (wrapping) strings, as well as multiple\nline prompts are included in the calculations.</p>",
              "type": "module",
              "displayName": "`rl.getCursorPos()`"
            }
          ],
          "properties": [
            {
              "textRaw": "`line` {string|undefined}",
              "type": "string|undefined",
              "name": "line",
              "meta": {
                "added": [
                  "0.1.98"
                ],
                "changes": []
              },
              "desc": "<p>The current input data being processed by node.</p>\n<p>This can be used when collecting input from a TTY stream to retrieve the\ncurrent value that has been processed thus far, prior to the <code>line</code> event\nbeing emitted.  Once the <code>line</code> event has been emitted, this property will\nbe an empty string.</p>\n<p>Be aware that modifying the value during the instance runtime may have\nunintended consequences if <code>rl.cursor</code> is not also controlled.</p>\n<p><strong>If not using a TTY stream for input, use the <a href=\"#readline_event_line\"><code>'line'</code></a> event.</strong></p>\n<p>One possible use case would be as follows:</p>\n<pre><code class=\"language-js\">const values = ['lorem ipsum', 'dolor sit amet'];\nconst rl = readline.createInterface(process.stdin);\nconst showResults = debounce(() => {\n  console.log(\n    '\\n',\n    values.filter((val) => val.startsWith(rl.line)).join(' ')\n  );\n}, 300);\nprocess.stdin.on('keypress', (c, k) => {\n  showResults();\n});\n</code></pre>"
            },
            {
              "textRaw": "`cursor` {number|undefined}",
              "type": "number|undefined",
              "name": "cursor",
              "meta": {
                "added": [
                  "0.1.98"
                ],
                "changes": []
              },
              "desc": "<p>The cursor position relative to <code>rl.line</code>.</p>\n<p>This will track where the current cursor lands in the input string, when\nreading input from a TTY stream.  The position of cursor determines the\nportion of the input string that will be modified as input is processed,\nas well as the column where the terminal caret will be rendered.</p>"
            }
          ],
          "type": "module",
          "displayName": "Class: `Interface`"
        },
        {
          "textRaw": "`readline.clearLine(stream, dir[, callback])`",
          "name": "`readline.clearline(stream,_dir[,_callback])`",
          "meta": {
            "added": [
              "v0.7.7"
            ],
            "changes": [
              {
                "version": "v12.7.0",
                "pr-url": "https://github.com/nodejs/node/pull/28674",
                "description": "The stream's write() callback and return value are exposed."
              }
            ]
          },
          "desc": "<ul>\n<li><code>stream</code> <a href=\"stream.html#stream_class_stream_writable\" class=\"type\">&lt;stream.Writable&gt;</a></li>\n<li>\n<p><code>dir</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></p>\n<ul>\n<li><code>-1</code>: to the left from cursor</li>\n<li><code>1</code>: to the right from cursor</li>\n<li><code>0</code>: the entire line</li>\n</ul>\n</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Invoked once the operation completes.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>false</code> if <code>stream</code> wishes for the calling code to wait for\nthe <code>'drain'</code> event to be emitted before continuing to write additional data;\notherwise <code>true</code>.</li>\n</ul>\n<p>The <code>readline.clearLine()</code> method clears current line of given <a href=\"tty.html\">TTY</a> stream\nin a specified direction identified by <code>dir</code>.</p>",
          "type": "module",
          "displayName": "`readline.clearLine(stream, dir[, callback])`"
        },
        {
          "textRaw": "`readline.clearScreenDown(stream[, callback])`",
          "name": "`readline.clearscreendown(stream[,_callback])`",
          "meta": {
            "added": [
              "v0.7.7"
            ],
            "changes": [
              {
                "version": "v12.7.0",
                "pr-url": "https://github.com/nodejs/node/pull/28641",
                "description": "The stream's write() callback and return value are exposed."
              }
            ]
          },
          "desc": "<ul>\n<li><code>stream</code> <a href=\"stream.html#stream_class_stream_writable\" class=\"type\">&lt;stream.Writable&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Invoked once the operation completes.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>false</code> if <code>stream</code> wishes for the calling code to wait for\nthe <code>'drain'</code> event to be emitted before continuing to write additional data;\notherwise <code>true</code>.</li>\n</ul>\n<p>The <code>readline.clearScreenDown()</code> method clears the given <a href=\"tty.html\">TTY</a> stream from\nthe current position of the cursor down.</p>",
          "type": "module",
          "displayName": "`readline.clearScreenDown(stream[, callback])`"
        },
        {
          "textRaw": "`readline.createInterface(options)`",
          "name": "`readline.createinterface(options)`",
          "meta": {
            "added": [
              "v0.1.98"
            ],
            "changes": [
              {
                "version": "v8.3.0, 6.11.4",
                "pr-url": "https://github.com/nodejs/node/pull/13497",
                "description": "Remove max limit of `crlfDelay` option."
              },
              {
                "version": "v6.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/8109",
                "description": "The `crlfDelay` option is supported now."
              },
              {
                "version": "v6.3.0",
                "pr-url": "https://github.com/nodejs/node/pull/7125",
                "description": "The `prompt` option is supported now."
              },
              {
                "version": "v6.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/6352",
                "description": "The `historySize` option can be `0` now."
              }
            ]
          },
          "desc": "<ul>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>input</code> <a href=\"stream.html#stream_class_stream_readable\" class=\"type\">&lt;stream.Readable&gt;</a> The <a href=\"stream.html#stream_readable_streams\">Readable</a> stream to listen to. This option\nis <em>required</em>.</li>\n<li><code>output</code> <a href=\"stream.html#stream_class_stream_writable\" class=\"type\">&lt;stream.Writable&gt;</a> The <a href=\"stream.html#stream_writable_streams\">Writable</a> stream to write readline data\nto.</li>\n<li><code>completer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> An optional function used for Tab autocompletion.</li>\n<li><code>terminal</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> if the <code>input</code> and <code>output</code> streams should be\ntreated like a TTY, and have ANSI/VT100 escape codes written to it.\n<strong>Default:</strong> checking <code>isTTY</code> on the <code>output</code> stream upon instantiation.</li>\n<li><code>historySize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Maximum number of history lines retained. To disable\nthe history set this value to <code>0</code>. This option makes sense only if\n<code>terminal</code> is set to <code>true</code> by the user or by an internal <code>output</code> check,\notherwise the history caching mechanism is not initialized at all.\n<strong>Default:</strong> <code>30</code>.</li>\n<li><code>prompt</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The prompt string to use. <strong>Default:</strong> <code>'> '</code>.</li>\n<li><code>crlfDelay</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> If the delay between <code>\\r</code> and <code>\\n</code> exceeds\n<code>crlfDelay</code> milliseconds, both <code>\\r</code> and <code>\\n</code> will be treated as separate\nend-of-line input. <code>crlfDelay</code> will be coerced to a number no less than\n<code>100</code>. It can be set to <code>Infinity</code>, in which case <code>\\r</code> followed by <code>\\n</code>\nwill always be considered a single newline (which may be reasonable for\n<a href=\"#readline_example_read_file_stream_line_by_line\">reading files</a> with <code>\\r\\n</code> line delimiter). <strong>Default:</strong> <code>100</code>.</li>\n<li><code>removeHistoryDuplicates</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, when a new input line added\nto the history list duplicates an older one, this removes the older line\nfrom the list. <strong>Default:</strong> <code>false</code>.</li>\n<li><code>escapeCodeTimeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The duration <code>readline</code> will wait for a\ncharacter (when reading an ambiguous key sequence in milliseconds one that\ncan both form a complete key sequence using the input read so far and can\ntake additional input to complete a longer key sequence).\n<strong>Default:</strong> <code>500</code>.</li>\n</ul>\n</li>\n</ul>\n<p>The <code>readline.createInterface()</code> method creates a new <code>readline.Interface</code>\ninstance.</p>\n<pre><code class=\"language-js\">const readline = require('readline');\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n</code></pre>\n<p>Once the <code>readline.Interface</code> instance is created, the most common case is to\nlisten for the <code>'line'</code> event:</p>\n<pre><code class=\"language-js\">rl.on('line', (line) => {\n  console.log(`Received: ${line}`);\n});\n</code></pre>\n<p>If <code>terminal</code> is <code>true</code> for this instance then the <code>output</code> stream will get\nthe best compatibility if it defines an <code>output.columns</code> property and emits\na <code>'resize'</code> event on the <code>output</code> if or when the columns ever change\n(<a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a> does this automatically when it is a TTY).</p>",
          "modules": [
            {
              "textRaw": "Use of the `completer` Function",
              "name": "use_of_the_`completer`_function",
              "desc": "<p>The <code>completer</code> function takes the current line entered by the user\nas an argument, and returns an <code>Array</code> with 2 entries:</p>\n<ul>\n<li>An <code>Array</code> with matching entries for the completion.</li>\n<li>The substring that was used for the matching.</li>\n</ul>\n<p>For instance: <code>[[substr1, substr2, ...], originalsubstring]</code>.</p>\n<pre><code class=\"language-js\">function completer(line) {\n  const completions = '.help .error .exit .quit .q'.split(' ');\n  const hits = completions.filter((c) => c.startsWith(line));\n  // Show all completions if none found\n  return [hits.length ? hits : completions, line];\n}\n</code></pre>\n<p>The <code>completer</code> function can be called asynchronously if it accepts two\narguments:</p>\n<pre><code class=\"language-js\">function completer(linePartial, callback) {\n  callback(null, [['123'], linePartial]);\n}\n</code></pre>",
              "type": "module",
              "displayName": "Use of the `completer` Function"
            }
          ],
          "type": "module",
          "displayName": "`readline.createInterface(options)`"
        },
        {
          "textRaw": "`readline.cursorTo(stream, x[, y][, callback])`",
          "name": "`readline.cursorto(stream,_x[,_y][,_callback])`",
          "meta": {
            "added": [
              "v0.7.7"
            ],
            "changes": [
              {
                "version": "v12.7.0",
                "pr-url": "https://github.com/nodejs/node/pull/28674",
                "description": "The stream's write() callback and return value are exposed."
              }
            ]
          },
          "desc": "<ul>\n<li><code>stream</code> <a href=\"stream.html#stream_class_stream_writable\" class=\"type\">&lt;stream.Writable&gt;</a></li>\n<li><code>x</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>y</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Invoked once the operation completes.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>false</code> if <code>stream</code> wishes for the calling code to wait for\nthe <code>'drain'</code> event to be emitted before continuing to write additional data;\notherwise <code>true</code>.</li>\n</ul>\n<p>The <code>readline.cursorTo()</code> method moves cursor to the specified position in a\ngiven <a href=\"tty.html\">TTY</a> <code>stream</code>.</p>",
          "type": "module",
          "displayName": "`readline.cursorTo(stream, x[, y][, callback])`"
        },
        {
          "textRaw": "`readline.emitKeypressEvents(stream[, interface])`",
          "name": "`readline.emitkeypressevents(stream[,_interface])`",
          "meta": {
            "added": [
              "v0.7.7"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li><code>stream</code> <a href=\"stream.html#stream_class_stream_readable\" class=\"type\">&lt;stream.Readable&gt;</a></li>\n<li><code>interface</code> <a href=\"readline.html#readline_class_interface\" class=\"type\">&lt;readline.Interface&gt;</a></li>\n</ul>\n<p>The <code>readline.emitKeypressEvents()</code> method causes the given <a href=\"stream.html#stream_readable_streams\">Readable</a>\nstream to begin emitting <code>'keypress'</code> events corresponding to received input.</p>\n<p>Optionally, <code>interface</code> specifies a <code>readline.Interface</code> instance for which\nautocompletion is disabled when copy-pasted input is detected.</p>\n<p>If the <code>stream</code> is a <a href=\"tty.html\">TTY</a>, then it must be in raw mode.</p>\n<p>This is automatically called by any readline instance on its <code>input</code> if the\n<code>input</code> is a terminal. Closing the <code>readline</code> instance does not stop\nthe <code>input</code> from emitting <code>'keypress'</code> events.</p>\n<pre><code class=\"language-js\">readline.emitKeypressEvents(process.stdin);\nif (process.stdin.isTTY)\n  process.stdin.setRawMode(true);\n</code></pre>",
          "type": "module",
          "displayName": "`readline.emitKeypressEvents(stream[, interface])`"
        },
        {
          "textRaw": "`readline.moveCursor(stream, dx, dy[, callback])`",
          "name": "`readline.movecursor(stream,_dx,_dy[,_callback])`",
          "meta": {
            "added": [
              "v0.7.7"
            ],
            "changes": [
              {
                "version": "v12.7.0",
                "pr-url": "https://github.com/nodejs/node/pull/28674",
                "description": "The stream's write() callback and return value are exposed."
              }
            ]
          },
          "desc": "<ul>\n<li><code>stream</code> <a href=\"stream.html#stream_class_stream_writable\" class=\"type\">&lt;stream.Writable&gt;</a></li>\n<li><code>dx</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>dy</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Invoked once the operation completes.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>false</code> if <code>stream</code> wishes for the calling code to wait for\nthe <code>'drain'</code> event to be emitted before continuing to write additional data;\notherwise <code>true</code>.</li>\n</ul>\n<p>The <code>readline.moveCursor()</code> method moves the cursor <em>relative</em> to its current\nposition in a given <a href=\"tty.html\">TTY</a> <code>stream</code>.</p>\n<h2>Example: Tiny CLI</h2>\n<p>The following example illustrates the use of <code>readline.Interface</code> class to\nimplement a small command-line interface:</p>\n<pre><code class=\"language-js\">const readline = require('readline');\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n  prompt: 'OHAI> '\n});\n\nrl.prompt();\n\nrl.on('line', (line) => {\n  switch (line.trim()) {\n    case 'hello':\n      console.log('world!');\n      break;\n    default:\n      console.log(`Say what? I might have heard '${line.trim()}'`);\n      break;\n  }\n  rl.prompt();\n}).on('close', () => {\n  console.log('Have a great day!');\n  process.exit(0);\n});\n</code></pre>\n<h2>Example: Read File Stream Line-by-Line</h2>\n<p>A common use case for <code>readline</code> is to consume an input file one line at a\ntime. The easiest way to do so is leveraging the <a href=\"fs.html#fs_class_fs_readstream\"><code>fs.ReadStream</code></a> API as\nwell as a <code>for await...of</code> loop:</p>\n<pre><code class=\"language-js\">const fs = require('fs');\nconst readline = require('readline');\n\nasync function processLineByLine() {\n  const fileStream = fs.createReadStream('input.txt');\n\n  const rl = readline.createInterface({\n    input: fileStream,\n    crlfDelay: Infinity\n  });\n  // Note: we use the crlfDelay option to recognize all instances of CR LF\n  // ('\\r\\n') in input.txt as a single line break.\n\n  for await (const line of rl) {\n    // Each line in input.txt will be successively available here as `line`.\n    console.log(`Line from file: ${line}`);\n  }\n}\n\nprocessLineByLine();\n</code></pre>\n<p>Alternatively, one could use the <a href=\"#readline_event_line\"><code>'line'</code></a> event:</p>\n<pre><code class=\"language-js\">const fs = require('fs');\nconst readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: fs.createReadStream('sample.txt'),\n  crlfDelay: Infinity\n});\n\nrl.on('line', (line) => {\n  console.log(`Line from file: ${line}`);\n});\n</code></pre>\n<p>Currently, <code>for await...of</code> loop can be a bit slower. If <code>async</code> / <code>await</code>\nflow and speed are both essential, a mixed approach can be applied:</p>\n<pre><code class=\"language-js\">const { once } = require('events');\nconst { createReadStream } = require('fs');\nconst { createInterface } = require('readline');\n\n(async function processLineByLine() {\n  try {\n    const rl = createInterface({\n      input: createReadStream('big-file.txt'),\n      crlfDelay: Infinity\n    });\n\n    rl.on('line', (line) => {\n      // Process the line.\n    });\n\n    await once(rl, 'close');\n\n    console.log('File processed.');\n  } catch (err) {\n    console.error(err);\n  }\n})();\n</code></pre>",
          "type": "module",
          "displayName": "`readline.moveCursor(stream, dx, dy[, callback])`"
        }
      ],
      "type": "module",
      "displayName": "Readline"
    }
  ]
}