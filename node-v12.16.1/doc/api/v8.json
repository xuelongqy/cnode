{
  "type": "module",
  "source": "doc/api/v8.md",
  "modules": [
    {
      "textRaw": "V8",
      "name": "v8",
      "introduced_in": "v4.0.0",
      "desc": "<p>The <code>v8</code> module exposes APIs that are specific to the version of <a href=\"https://developers.google.com/v8/\">V8</a>\nbuilt into the Node.js binary. It can be accessed using:</p>\n<pre><code class=\"language-js\">const v8 = require('v8');\n</code></pre>\n<p>The APIs and implementation are subject to change at any time.</p>",
      "modules": [
        {
          "textRaw": "`v8.cachedDataVersionTag()`",
          "name": "`v8.cacheddataversiontag()`",
          "meta": {
            "added": [
              "v8.0.0"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a></li>\n</ul>\n<p>Returns an integer representing a \"version tag\" derived from the V8 version,\ncommand line flags and detected CPU features. This is useful for determining\nwhether a <a href=\"vm.html#vm_constructor_new_vm_script_code_options\"><code>vm.Script</code></a> <code>cachedData</code> buffer is compatible with this instance\nof V8.</p>",
          "type": "module",
          "displayName": "`v8.cachedDataVersionTag()`"
        },
        {
          "textRaw": "`v8.getHeapSpaceStatistics()`",
          "name": "`v8.getheapspacestatistics()`",
          "meta": {
            "added": [
              "v6.0.0"
            ],
            "changes": [
              {
                "version": "v7.5.0",
                "pr-url": "https://github.com/nodejs/node/pull/10186",
                "description": "Support values exceeding the 32-bit unsigned integer range."
              }
            ]
          },
          "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object[]&gt;</a></li>\n</ul>\n<p>Returns statistics about the V8 heap spaces, i.e. the segments which make up\nthe V8 heap. Neither the ordering of heap spaces, nor the availability of a\nheap space can be guaranteed as the statistics are provided via the V8\n<a href=\"https://v8docs.nodesource.com/node-10.6/d5/dda/classv8_1_1_isolate.html#ac673576f24fdc7a33378f8f57e1d13a4\"><code>GetHeapSpaceStatistics</code></a> function and may change from one V8 version to the\nnext.</p>\n<p>The value returned is an array of objects containing the following properties:</p>\n<ul>\n<li><code>space_name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li><code>space_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>space_used_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>space_available_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>physical_space_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<pre><code class=\"language-json\">[\n  {\n    \"space_name\": \"new_space\",\n    \"space_size\": 2063872,\n    \"space_used_size\": 951112,\n    \"space_available_size\": 80824,\n    \"physical_space_size\": 2063872\n  },\n  {\n    \"space_name\": \"old_space\",\n    \"space_size\": 3090560,\n    \"space_used_size\": 2493792,\n    \"space_available_size\": 0,\n    \"physical_space_size\": 3090560\n  },\n  {\n    \"space_name\": \"code_space\",\n    \"space_size\": 1260160,\n    \"space_used_size\": 644256,\n    \"space_available_size\": 960,\n    \"physical_space_size\": 1260160\n  },\n  {\n    \"space_name\": \"map_space\",\n    \"space_size\": 1094160,\n    \"space_used_size\": 201608,\n    \"space_available_size\": 0,\n    \"physical_space_size\": 1094160\n  },\n  {\n    \"space_name\": \"large_object_space\",\n    \"space_size\": 0,\n    \"space_used_size\": 0,\n    \"space_available_size\": 1490980608,\n    \"physical_space_size\": 0\n  }\n]\n</code></pre>",
          "type": "module",
          "displayName": "`v8.getHeapSpaceStatistics()`"
        },
        {
          "textRaw": "`v8.getHeapSnapshot()`",
          "name": "`v8.getheapsnapshot()`",
          "meta": {
            "added": [
              "v11.13.0"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li>Returns: <a href=\"stream.html#stream_class_stream_readable\" class=\"type\">&lt;stream.Readable&gt;</a> A Readable Stream containing the V8 heap snapshot</li>\n</ul>\n<p>Generates a snapshot of the current V8 heap and returns a Readable\nStream that may be used to read the JSON serialized representation.\nThis JSON stream format is intended to be used with tools such as\nChrome DevTools. The JSON schema is undocumented and specific to the\nV8 engine, and may change from one version of V8 to the next.</p>\n<pre><code class=\"language-js\">const stream = v8.getHeapSnapshot();\nstream.pipe(process.stdout);\n</code></pre>",
          "type": "module",
          "displayName": "`v8.getHeapSnapshot()`"
        },
        {
          "textRaw": "`v8.getHeapStatistics()`",
          "name": "`v8.getheapstatistics()`",
          "meta": {
            "added": [
              "v1.0.0"
            ],
            "changes": [
              {
                "version": "v7.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/8610",
                "description": "Added `malloced_memory`, `peak_malloced_memory`, and `does_zap_garbage`."
              },
              {
                "version": "v7.5.0",
                "pr-url": "https://github.com/nodejs/node/pull/10186",
                "description": "Support values exceeding the 32-bit unsigned integer range."
              }
            ]
          },
          "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>Returns an object with the following properties:</p>\n<ul>\n<li><code>total_heap_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>total_heap_size_executable</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>total_physical_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>total_available_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>used_heap_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>heap_size_limit</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>malloced_memory</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>peak_malloced_memory</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>does_zap_garbage</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>number_of_native_contexts</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>number_of_detached_contexts</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p><code>does_zap_garbage</code> is a 0/1 boolean, which signifies whether the\n<code>--zap_code_space</code> option is enabled or not. This makes V8 overwrite heap\ngarbage with a bit pattern. The RSS footprint (resident memory set) gets bigger\nbecause it continuously touches all heap pages and that makes them less likely\nto get swapped out by the operating system.</p>\n<p><code>number_of_native_contexts</code> The value of native_context is the number of the\ntop-level contexts currently active. Increase of this number over time indicates\na memory leak.</p>\n<p><code>number_of_detached_contexts</code> The value of detached_context is the number\nof contexts that were detached and not yet garbage collected. This number\nbeing non-zero indicates a potential memory leak.</p>\n<!-- eslint-skip -->\n<pre><code class=\"language-js\">{\n  total_heap_size: 7326976,\n  total_heap_size_executable: 4194304,\n  total_physical_size: 7326976,\n  total_available_size: 1152656,\n  used_heap_size: 3476208,\n  heap_size_limit: 1535115264,\n  malloced_memory: 16384,\n  peak_malloced_memory: 1127496,\n  does_zap_garbage: 0,\n  number_of_native_contexts: 1,\n  number_of_detached_contexts: 0\n}\n</code></pre>",
          "type": "module",
          "displayName": "`v8.getHeapStatistics()`"
        },
        {
          "textRaw": "`v8.getHeapCodeStatistics()`",
          "name": "`v8.getheapcodestatistics()`",
          "meta": {
            "added": [
              "v12.8.0"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>Returns an object with the following properties:</p>\n<ul>\n<li><code>code_and_metadata_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>bytecode_and_metadata_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>external_script_source_size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<!-- eslint-skip -->\n<pre><code class=\"language-js\">{\n  code_and_metadata_size: 212208,\n  bytecode_and_metadata_size: 161368,\n  external_script_source_size: 1410794\n}\n</code></pre>",
          "type": "module",
          "displayName": "`v8.getHeapCodeStatistics()`"
        },
        {
          "textRaw": "`v8.setFlagsFromString(flags)`",
          "name": "`v8.setflagsfromstring(flags)`",
          "meta": {
            "added": [
              "v1.0.0"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li><code>flags</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>The <code>v8.setFlagsFromString()</code> method can be used to programmatically set\nV8 command line flags. This method should be used with care. Changing settings\nafter the VM has started may result in unpredictable behavior, including\ncrashes and data loss; or it may simply do nothing.</p>\n<p>The V8 options available for a version of Node.js may be determined by running\n<code>node --v8-options</code>.</p>\n<p>Usage:</p>\n<pre><code class=\"language-js\">// Print GC events to stdout for one minute.\nconst v8 = require('v8');\nv8.setFlagsFromString('--trace_gc');\nsetTimeout(() => { v8.setFlagsFromString('--notrace_gc'); }, 60e3);\n</code></pre>",
          "type": "module",
          "displayName": "`v8.setFlagsFromString(flags)`"
        },
        {
          "textRaw": "`v8.writeHeapSnapshot([filename])`",
          "name": "`v8.writeheapsnapshot([filename])`",
          "meta": {
            "added": [
              "v11.13.0"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li><code>filename</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The file path where the V8 heap snapshot is to be\nsaved. If not specified, a file name with the pattern\n<code>'Heap-${yyyymmdd}-${hhmmss}-${pid}-${thread_id}.heapsnapshot'</code> will be\ngenerated, where <code>{pid}</code> will be the PID of the Node.js process,\n<code>{thread_id}</code> will be <code>0</code> when <code>writeHeapSnapshot()</code> is called from\nthe main Node.js thread or the id of a worker thread.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The filename where the snapshot was saved.</li>\n</ul>\n<p>Generates a snapshot of the current V8 heap and writes it to a JSON\nfile. This file is intended to be used with tools such as Chrome\nDevTools. The JSON schema is undocumented and specific to the V8\nengine, and may change from one version of V8 to the next.</p>\n<p>A heap snapshot is specific to a single V8 isolate. When using\n<a href=\"worker_threads.html\">Worker Threads</a>, a heap snapshot generated from the main thread will\nnot contain any information about the workers, and vice versa.</p>\n<pre><code class=\"language-js\">const { writeHeapSnapshot } = require('v8');\nconst {\n  Worker,\n  isMainThread,\n  parentPort\n} = require('worker_threads');\n\nif (isMainThread) {\n  const worker = new Worker(__filename);\n\n  worker.once('message', (filename) => {\n    console.log(`worker heapdump: ${filename}`);\n    // Now get a heapdump for the main thread.\n    console.log(`main thread heapdump: ${writeHeapSnapshot()}`);\n  });\n\n  // Tell the worker to create a heapdump.\n  worker.postMessage('heapdump');\n} else {\n  parentPort.once('message', (message) => {\n    if (message === 'heapdump') {\n      // Generate a heapdump for the worker\n      // and return the filename to the parent.\n      parentPort.postMessage(writeHeapSnapshot());\n    }\n  });\n}\n</code></pre>",
          "type": "module",
          "displayName": "`v8.writeHeapSnapshot([filename])`"
        },
        {
          "textRaw": "Serialization API",
          "name": "serialization_api",
          "desc": "<p>The serialization API provides means of serializing JavaScript values in a way\nthat is compatible with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\">HTML structured clone algorithm</a>.\nThe format is backward-compatible (i.e. safe to store to disk).</p>",
          "modules": [
            {
              "textRaw": "`v8.serialize(value)`",
              "name": "`v8.serialize(value)`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types\" class=\"type\">&lt;any&gt;</a></li>\n<li>Returns: <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Uses a <a href=\"#v8_class_v8_defaultserializer\"><code>DefaultSerializer</code></a> to serialize <code>value</code> into a buffer.</p>",
              "type": "module",
              "displayName": "`v8.serialize(value)`"
            },
            {
              "textRaw": "`v8.deserialize(buffer)`",
              "name": "`v8.deserialize(buffer)`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>buffer</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" class=\"type\">&lt;TypedArray&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" class=\"type\">&lt;DataView&gt;</a> A buffer returned by <a href=\"#v8_v8_serialize_value\"><code>serialize()</code></a>.</li>\n</ul>\n<p>Uses a <a href=\"#v8_class_v8_defaultdeserializer\"><code>DefaultDeserializer</code></a> with default options to read a JS value\nfrom a buffer.</p>",
              "type": "module",
              "displayName": "`v8.deserialize(buffer)`"
            },
            {
              "textRaw": "Class: `v8.Serializer`",
              "name": "class:_`v8.serializer`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "modules": [
                {
                  "textRaw": "`new Serializer()`",
                  "name": "`new_serializer()`",
                  "desc": "<p>Creates a new <code>Serializer</code> object.</p>",
                  "type": "module",
                  "displayName": "`new Serializer()`"
                },
                {
                  "textRaw": "`serializer.writeHeader()`",
                  "name": "`serializer.writeheader()`",
                  "desc": "<p>Writes out a header, which includes the serialization format version.</p>",
                  "type": "module",
                  "displayName": "`serializer.writeHeader()`"
                },
                {
                  "textRaw": "`serializer.writeValue(value)`",
                  "name": "`serializer.writevalue(value)`",
                  "desc": "<ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types\" class=\"type\">&lt;any&gt;</a></li>\n</ul>\n<p>Serializes a JavaScript value and adds the serialized representation to the\ninternal buffer.</p>\n<p>This throws an error if <code>value</code> cannot be serialized.</p>",
                  "type": "module",
                  "displayName": "`serializer.writeValue(value)`"
                },
                {
                  "textRaw": "`serializer.releaseBuffer()`",
                  "name": "`serializer.releasebuffer()`",
                  "desc": "<ul>\n<li>Returns: <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Returns the stored internal buffer. This serializer should not be used once\nthe buffer is released. Calling this method results in undefined behavior\nif a previous write has failed.</p>",
                  "type": "module",
                  "displayName": "`serializer.releaseBuffer()`"
                },
                {
                  "textRaw": "`serializer.transferArrayBuffer(id, arrayBuffer)`",
                  "name": "`serializer.transferarraybuffer(id,_arraybuffer)`",
                  "desc": "<ul>\n<li><code>id</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> A 32-bit unsigned integer.</li>\n<li><code>arrayBuffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a> An <code>ArrayBuffer</code> instance.</li>\n</ul>\n<p>Marks an <code>ArrayBuffer</code> as having its contents transferred out of band.\nPass the corresponding <code>ArrayBuffer</code> in the deserializing context to\n<a href=\"#v8_deserializer_transferarraybuffer_id_arraybuffer\"><code>deserializer.transferArrayBuffer()</code></a>.</p>",
                  "type": "module",
                  "displayName": "`serializer.transferArrayBuffer(id, arrayBuffer)`"
                },
                {
                  "textRaw": "`serializer.writeUint32(value)`",
                  "name": "`serializer.writeuint32(value)`",
                  "desc": "<ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a></li>\n</ul>\n<p>Write a raw 32-bit unsigned integer.\nFor use inside of a custom <a href=\"#v8_serializer_writehostobject_object\"><code>serializer._writeHostObject()</code></a>.</p>",
                  "type": "module",
                  "displayName": "`serializer.writeUint32(value)`"
                },
                {
                  "textRaw": "`serializer.writeUint64(hi, lo)`",
                  "name": "`serializer.writeuint64(hi,_lo)`",
                  "desc": "<ul>\n<li><code>hi</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a></li>\n<li><code>lo</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a></li>\n</ul>\n<p>Write a raw 64-bit unsigned integer, split into high and low 32-bit parts.\nFor use inside of a custom <a href=\"#v8_serializer_writehostobject_object\"><code>serializer._writeHostObject()</code></a>.</p>",
                  "type": "module",
                  "displayName": "`serializer.writeUint64(hi, lo)`"
                },
                {
                  "textRaw": "`serializer.writeDouble(value)`",
                  "name": "`serializer.writedouble(value)`",
                  "desc": "<ul>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>Write a JS <code>number</code> value.\nFor use inside of a custom <a href=\"#v8_serializer_writehostobject_object\"><code>serializer._writeHostObject()</code></a>.</p>",
                  "type": "module",
                  "displayName": "`serializer.writeDouble(value)`"
                },
                {
                  "textRaw": "`serializer.writeRawBytes(buffer)`",
                  "name": "`serializer.writerawbytes(buffer)`",
                  "desc": "<ul>\n<li><code>buffer</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" class=\"type\">&lt;TypedArray&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" class=\"type\">&lt;DataView&gt;</a></li>\n</ul>\n<p>Write raw bytes into the serializer’s internal buffer. The deserializer\nwill require a way to compute the length of the buffer.\nFor use inside of a custom <a href=\"#v8_serializer_writehostobject_object\"><code>serializer._writeHostObject()</code></a>.</p>",
                  "type": "module",
                  "displayName": "`serializer.writeRawBytes(buffer)`"
                },
                {
                  "textRaw": "`serializer._writeHostObject(object)`",
                  "name": "`serializer._writehostobject(object)`",
                  "desc": "<ul>\n<li><code>object</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>This method is called to write some kind of host object, i.e. an object created\nby native C++ bindings. If it is not possible to serialize <code>object</code>, a suitable\nexception should be thrown.</p>\n<p>This method is not present on the <code>Serializer</code> class itself but can be provided\nby subclasses.</p>",
                  "type": "module",
                  "displayName": "`serializer._writeHostObject(object)`"
                },
                {
                  "textRaw": "`serializer._getDataCloneError(message)`",
                  "name": "`serializer._getdatacloneerror(message)`",
                  "desc": "<ul>\n<li><code>message</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>This method is called to generate error objects that will be thrown when an\nobject can not be cloned.</p>\n<p>This method defaults to the <a href=\"errors.html#errors_class_error\"><code>Error</code></a> constructor and can be overridden on\nsubclasses.</p>",
                  "type": "module",
                  "displayName": "`serializer._getDataCloneError(message)`"
                },
                {
                  "textRaw": "`serializer._getSharedArrayBufferId(sharedArrayBuffer)`",
                  "name": "`serializer._getsharedarraybufferid(sharedarraybuffer)`",
                  "desc": "<ul>\n<li><code>sharedArrayBuffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\" class=\"type\">&lt;SharedArrayBuffer&gt;</a></li>\n</ul>\n<p>This method is called when the serializer is going to serialize a\n<code>SharedArrayBuffer</code> object. It must return an unsigned 32-bit integer ID for\nthe object, using the same ID if this <code>SharedArrayBuffer</code> has already been\nserialized. When deserializing, this ID will be passed to\n<a href=\"#v8_deserializer_transferarraybuffer_id_arraybuffer\"><code>deserializer.transferArrayBuffer()</code></a>.</p>\n<p>If the object cannot be serialized, an exception should be thrown.</p>\n<p>This method is not present on the <code>Serializer</code> class itself but can be provided\nby subclasses.</p>",
                  "type": "module",
                  "displayName": "`serializer._getSharedArrayBufferId(sharedArrayBuffer)`"
                },
                {
                  "textRaw": "`serializer._setTreatArrayBufferViewsAsHostObjects(flag)`",
                  "name": "`serializer._settreatarraybufferviewsashostobjects(flag)`",
                  "desc": "<ul>\n<li><code>flag</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <strong>Default:</strong> <code>false</code></li>\n</ul>\n<p>Indicate whether to treat <code>TypedArray</code> and <code>DataView</code> objects as\nhost objects, i.e. pass them to <a href=\"#v8_serializer_writehostobject_object\"><code>serializer._writeHostObject()</code></a>.</p>",
                  "type": "module",
                  "displayName": "`serializer._setTreatArrayBufferViewsAsHostObjects(flag)`"
                }
              ],
              "type": "module",
              "displayName": "Class: `v8.Serializer`"
            },
            {
              "textRaw": "Class: `v8.Deserializer`",
              "name": "class:_`v8.deserializer`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "modules": [
                {
                  "textRaw": "`new Deserializer(buffer)`",
                  "name": "`new_deserializer(buffer)`",
                  "desc": "<ul>\n<li><code>buffer</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" class=\"type\">&lt;TypedArray&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" class=\"type\">&lt;DataView&gt;</a> A buffer returned by\n<a href=\"#v8_serializer_releasebuffer\"><code>serializer.releaseBuffer()</code></a>.</li>\n</ul>\n<p>Creates a new <code>Deserializer</code> object.</p>",
                  "type": "module",
                  "displayName": "`new Deserializer(buffer)`"
                },
                {
                  "textRaw": "`deserializer.readHeader()`",
                  "name": "`deserializer.readheader()`",
                  "desc": "<p>Reads and validates a header (including the format version).\nMay, for example, reject an invalid or unsupported wire format. In that case,\nan <code>Error</code> is thrown.</p>",
                  "type": "module",
                  "displayName": "`deserializer.readHeader()`"
                },
                {
                  "textRaw": "`deserializer.readValue()`",
                  "name": "`deserializer.readvalue()`",
                  "desc": "<p>Deserializes a JavaScript value from the buffer and returns it.</p>",
                  "type": "module",
                  "displayName": "`deserializer.readValue()`"
                },
                {
                  "textRaw": "`deserializer.transferArrayBuffer(id, arrayBuffer)`",
                  "name": "`deserializer.transferarraybuffer(id,_arraybuffer)`",
                  "desc": "<ul>\n<li><code>id</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> A 32-bit unsigned integer.</li>\n<li><code>arrayBuffer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" class=\"type\">&lt;ArrayBuffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\" class=\"type\">&lt;SharedArrayBuffer&gt;</a> An <code>ArrayBuffer</code> instance.</li>\n</ul>\n<p>Marks an <code>ArrayBuffer</code> as having its contents transferred out of band.\nPass the corresponding <code>ArrayBuffer</code> in the serializing context to\n<a href=\"#v8_serializer_transferarraybuffer_id_arraybuffer\"><code>serializer.transferArrayBuffer()</code></a> (or return the <code>id</code> from\n<a href=\"#v8_serializer_getsharedarraybufferid_sharedarraybuffer\"><code>serializer._getSharedArrayBufferId()</code></a> in the case of <code>SharedArrayBuffer</code>s).</p>",
                  "type": "module",
                  "displayName": "`deserializer.transferArrayBuffer(id, arrayBuffer)`"
                },
                {
                  "textRaw": "`deserializer.getWireFormatVersion()`",
                  "name": "`deserializer.getwireformatversion()`",
                  "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a></li>\n</ul>\n<p>Reads the underlying wire format version. Likely mostly to be useful to\nlegacy code reading old wire format versions. May not be called before\n<code>.readHeader()</code>.</p>",
                  "type": "module",
                  "displayName": "`deserializer.getWireFormatVersion()`"
                },
                {
                  "textRaw": "`deserializer.readUint32()`",
                  "name": "`deserializer.readuint32()`",
                  "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a></li>\n</ul>\n<p>Read a raw 32-bit unsigned integer and return it.\nFor use inside of a custom <a href=\"#v8_deserializer_readhostobject\"><code>deserializer._readHostObject()</code></a>.</p>",
                  "type": "module",
                  "displayName": "`deserializer.readUint32()`"
                },
                {
                  "textRaw": "`deserializer.readUint64()`",
                  "name": "`deserializer.readuint64()`",
                  "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer[]&gt;</a></li>\n</ul>\n<p>Read a raw 64-bit unsigned integer and return it as an array <code>[hi, lo]</code>\nwith two 32-bit unsigned integer entries.\nFor use inside of a custom <a href=\"#v8_deserializer_readhostobject\"><code>deserializer._readHostObject()</code></a>.</p>",
                  "type": "module",
                  "displayName": "`deserializer.readUint64()`"
                },
                {
                  "textRaw": "`deserializer.readDouble()`",
                  "name": "`deserializer.readdouble()`",
                  "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>Read a JS <code>number</code> value.\nFor use inside of a custom <a href=\"#v8_deserializer_readhostobject\"><code>deserializer._readHostObject()</code></a>.</p>",
                  "type": "module",
                  "displayName": "`deserializer.readDouble()`"
                },
                {
                  "textRaw": "`deserializer.readRawBytes(length)`",
                  "name": "`deserializer.readrawbytes(length)`",
                  "desc": "<ul>\n<li><code>length</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a></li>\n<li>Returns: <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Read raw bytes from the deserializer’s internal buffer. The <code>length</code> parameter\nmust correspond to the length of the buffer that was passed to\n<a href=\"#v8_serializer_writerawbytes_buffer\"><code>serializer.writeRawBytes()</code></a>.\nFor use inside of a custom <a href=\"#v8_deserializer_readhostobject\"><code>deserializer._readHostObject()</code></a>.</p>",
                  "type": "module",
                  "displayName": "`deserializer.readRawBytes(length)`"
                },
                {
                  "textRaw": "`deserializer._readHostObject()`",
                  "name": "`deserializer._readhostobject()`",
                  "desc": "<p>This method is called to read some kind of host object, i.e. an object that is\ncreated by native C++ bindings. If it is not possible to deserialize the data,\na suitable exception should be thrown.</p>\n<p>This method is not present on the <code>Deserializer</code> class itself but can be\nprovided by subclasses.</p>",
                  "type": "module",
                  "displayName": "`deserializer._readHostObject()`"
                }
              ],
              "type": "module",
              "displayName": "Class: `v8.Deserializer`"
            },
            {
              "textRaw": "Class: `v8.DefaultSerializer`",
              "name": "class:_`v8.defaultserializer`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<p>A subclass of <a href=\"#v8_class_v8_serializer\"><code>Serializer</code></a> that serializes <code>TypedArray</code>\n(in particular <a href=\"buffer.html\"><code>Buffer</code></a>) and <code>DataView</code> objects as host objects, and only\nstores the part of their underlying <code>ArrayBuffer</code>s that they are referring to.</p>",
              "type": "module",
              "displayName": "Class: `v8.DefaultSerializer`"
            },
            {
              "textRaw": "Class: `v8.DefaultDeserializer`",
              "name": "class:_`v8.defaultdeserializer`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<p>A subclass of <a href=\"#v8_class_v8_deserializer\"><code>Deserializer</code></a> corresponding to the format written by\n<a href=\"#v8_class_v8_defaultserializer\"><code>DefaultSerializer</code></a>.</p>",
              "type": "module",
              "displayName": "Class: `v8.DefaultDeserializer`"
            }
          ],
          "type": "module",
          "displayName": "Serialization API"
        }
      ],
      "type": "module",
      "displayName": "V8"
    }
  ]
}