{
  "type": "module",
  "source": "doc/api/http2.md",
  "modules": [
    {
      "textRaw": "HTTP/2",
      "name": "http/2",
      "meta": {
        "added": [
          "v8.4.0"
        ],
        "changes": [
          {
            "version": "v10.10.0",
            "pr-url": "https://github.com/nodejs/node/pull/22466",
            "description": "HTTP/2 is now Stable. Previously, it had been Experimental."
          }
        ]
      },
      "introduced_in": "v8.4.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>http2</code> module provides an implementation of the <a href=\"https://tools.ietf.org/html/rfc7540\">HTTP/2</a> protocol. It\ncan be accessed using:</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\n</code></pre>",
      "modules": [
        {
          "textRaw": "Core API",
          "name": "core_api",
          "desc": "<p>The Core API provides a low-level interface designed specifically around\nsupport for HTTP/2 protocol features. It is specifically <em>not</em> designed for\ncompatibility with the existing <a href=\"http.html\">HTTP/1</a> module API. However,\nthe <a href=\"#http2_compatibility_api\">Compatibility API</a> is.</p>\n<p>The <code>http2</code> Core API is much more symmetric between client and server than the\n<code>http</code> API. For instance, most events, like <code>'error'</code>, <code>'connect'</code> and\n<code>'stream'</code>, can be emitted either by client-side code or server-side code.</p>",
          "modules": [
            {
              "textRaw": "Server-side example",
              "name": "server-side_example",
              "desc": "<p>The following illustrates a simple HTTP/2 server using the Core API.\nSince there are no browsers known that support\n<a href=\"https://http2.github.io/faq/#does-http2-require-encryption\">unencrypted HTTP/2</a>, the use of\n<a href=\"#http2_http2_createsecureserver_options_onrequesthandler\"><code>http2.createSecureServer()</code></a> is necessary when communicating\nwith browser clients.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst fs = require('fs');\n\nconst server = http2.createSecureServer({\n  key: fs.readFileSync('localhost-privkey.pem'),\n  cert: fs.readFileSync('localhost-cert.pem')\n});\nserver.on('error', (err) => console.error(err));\n\nserver.on('stream', (stream, headers) => {\n  // stream is a Duplex\n  stream.respond({\n    'content-type': 'text/html',\n    ':status': 200\n  });\n  stream.end('&#x3C;h1>Hello World&#x3C;/h1>');\n});\n\nserver.listen(8443);\n</code></pre>\n<p>To generate the certificate and key for this example, run:</p>\n<pre><code class=\"language-bash\">openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' \\\n  -keyout localhost-privkey.pem -out localhost-cert.pem\n</code></pre>",
              "type": "module",
              "displayName": "Server-side example"
            },
            {
              "textRaw": "Client-side example",
              "name": "client-side_example",
              "desc": "<p>The following illustrates an HTTP/2 client:</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst fs = require('fs');\nconst client = http2.connect('https://localhost:8443', {\n  ca: fs.readFileSync('localhost-cert.pem')\n});\nclient.on('error', (err) => console.error(err));\n\nconst req = client.request({ ':path': '/' });\n\nreq.on('response', (headers, flags) => {\n  for (const name in headers) {\n    console.log(`${name}: ${headers[name]}`);\n  }\n});\n\nreq.setEncoding('utf8');\nlet data = '';\nreq.on('data', (chunk) => { data += chunk; });\nreq.on('end', () => {\n  console.log(`\\n${data}`);\n  client.close();\n});\nreq.end();\n</code></pre>",
              "type": "module",
              "displayName": "Client-side example"
            },
            {
              "textRaw": "Class: `Http2Session`",
              "name": "class:_`http2session`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Extends: <a href=\"events.html#events_class_eventemitter\" class=\"type\">&lt;EventEmitter&gt;</a></li>\n</ul>\n<p>Instances of the <code>http2.Http2Session</code> class represent an active communications\nsession between an HTTP/2 client and server. Instances of this class are <em>not</em>\nintended to be constructed directly by user code.</p>\n<p>Each <code>Http2Session</code> instance will exhibit slightly different behaviors\ndepending on whether it is operating as a server or a client. The\n<code>http2session.type</code> property can be used to determine the mode in which an\n<code>Http2Session</code> is operating. On the server side, user code should rarely\nhave occasion to work with the <code>Http2Session</code> object directly, with most\nactions typically taken through interactions with either the <code>Http2Server</code> or\n<code>Http2Stream</code> objects.</p>\n<p>User code will not create <code>Http2Session</code> instances directly. Server-side\n<code>Http2Session</code> instances are created by the <code>Http2Server</code> instance when a\nnew HTTP/2 connection is received. Client-side <code>Http2Session</code> instances are\ncreated using the <code>http2.connect()</code> method.</p>",
              "modules": [
                {
                  "textRaw": "`Http2Session` and Sockets",
                  "name": "`http2session`_and_sockets",
                  "desc": "<p>Every <code>Http2Session</code> instance is associated with exactly one <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> or\n<a href=\"tls.html#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> when it is created. When either the <code>Socket</code> or the\n<code>Http2Session</code> are destroyed, both will be destroyed.</p>\n<p>Because of the specific serialization and processing requirements imposed\nby the HTTP/2 protocol, it is not recommended for user code to read data from\nor write data to a <code>Socket</code> instance bound to a <code>Http2Session</code>. Doing so can\nput the HTTP/2 session into an indeterminate state causing the session and\nthe socket to become unusable.</p>\n<p>Once a <code>Socket</code> has been bound to an <code>Http2Session</code>, user code should rely\nsolely on the API of the <code>Http2Session</code>.</p>",
                  "type": "module",
                  "displayName": "`Http2Session` and Sockets"
                },
                {
                  "textRaw": "Event: `'close'`",
                  "name": "event:_`'close'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'close'</code> event is emitted once the <code>Http2Session</code> has been destroyed. Its\nlistener does not expect any arguments.</p>",
                  "type": "module",
                  "displayName": "Event: `'close'`"
                },
                {
                  "textRaw": "Event: `'connect'`",
                  "name": "event:_`'connect'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>session</code> <a href=\"http2.html#http2_class_http2session\" class=\"type\">&lt;Http2Session&gt;</a></li>\n<li><code>socket</code> <a href=\"net.html#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a></li>\n</ul>\n<p>The <code>'connect'</code> event is emitted once the <code>Http2Session</code> has been successfully\nconnected to the remote peer and communication may begin.</p>\n<p>User code will typically not listen for this event directly.</p>",
                  "type": "module",
                  "displayName": "Event: `'connect'`"
                },
                {
                  "textRaw": "Event: `'error'`",
                  "name": "event:_`'error'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li>\n</ul>\n<p>The <code>'error'</code> event is emitted when an error occurs during the processing of\nan <code>Http2Session</code>.</p>",
                  "type": "module",
                  "displayName": "Event: `'error'`"
                },
                {
                  "textRaw": "Event: `'frameError'`",
                  "name": "event:_`'frameerror'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>type</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The frame type.</li>\n<li><code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The error code.</li>\n<li><code>id</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The stream id (or <code>0</code> if the frame isn't associated with a\nstream).</li>\n</ul>\n<p>The <code>'frameError'</code> event is emitted when an error occurs while attempting to\nsend a frame on the session. If the frame that could not be sent is associated\nwith a specific <code>Http2Stream</code>, an attempt to emit a <code>'frameError'</code> event on the\n<code>Http2Stream</code> is made.</p>\n<p>If the <code>'frameError'</code> event is associated with a stream, the stream will be\nclosed and destroyed immediately following the <code>'frameError'</code> event. If the\nevent is not associated with a stream, the <code>Http2Session</code> will be shut down\nimmediately following the <code>'frameError'</code> event.</p>",
                  "type": "module",
                  "displayName": "Event: `'frameError'`"
                },
                {
                  "textRaw": "Event: `'goaway'`",
                  "name": "event:_`'goaway'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>errorCode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The HTTP/2 error code specified in the <code>GOAWAY</code> frame.</li>\n<li><code>lastStreamID</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The ID of the last stream the remote peer successfully\nprocessed (or <code>0</code> if no ID is specified).</li>\n<li><code>opaqueData</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> If additional opaque data was included in the <code>GOAWAY</code>\nframe, a <code>Buffer</code> instance will be passed containing that data.</li>\n</ul>\n<p>The <code>'goaway'</code> event is emitted when a <code>GOAWAY</code> frame is received.</p>\n<p>The <code>Http2Session</code> instance will be shut down automatically when the <code>'goaway'</code>\nevent is emitted.</p>",
                  "type": "module",
                  "displayName": "Event: `'goaway'`"
                },
                {
                  "textRaw": "Event: `'localSettings'`",
                  "name": "event:_`'localsettings'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>settings</code> <a href=\"http2.html#http2_settings_object\" class=\"type\">&lt;HTTP/2 Settings Object&gt;</a> A copy of the <code>SETTINGS</code> frame received.</li>\n</ul>\n<p>The <code>'localSettings'</code> event is emitted when an acknowledgment <code>SETTINGS</code> frame\nhas been received.</p>\n<p>When using <code>http2session.settings()</code> to submit new settings, the modified\nsettings do not take effect until the <code>'localSettings'</code> event is emitted.</p>\n<pre><code class=\"language-js\">session.settings({ enablePush: false });\n\nsession.on('localSettings', (settings) => {\n  /* Use the new settings */\n});\n</code></pre>",
                  "type": "module",
                  "displayName": "Event: `'localSettings'`"
                },
                {
                  "textRaw": "Event: `'ping'`",
                  "name": "event:_`'ping'`",
                  "meta": {
                    "added": [
                      "v10.12.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>payload</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The <code>PING</code> frame 8-byte payload</li>\n</ul>\n<p>The <code>'ping'</code> event is emitted whenever a <code>PING</code> frame is received from the\nconnected peer.</p>",
                  "type": "module",
                  "displayName": "Event: `'ping'`"
                },
                {
                  "textRaw": "Event: `'remoteSettings'`",
                  "name": "event:_`'remotesettings'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>settings</code> <a href=\"http2.html#http2_settings_object\" class=\"type\">&lt;HTTP/2 Settings Object&gt;</a> A copy of the <code>SETTINGS</code> frame received.</li>\n</ul>\n<p>The <code>'remoteSettings'</code> event is emitted when a new <code>SETTINGS</code> frame is received\nfrom the connected peer.</p>\n<pre><code class=\"language-js\">session.on('remoteSettings', (settings) => {\n  /* Use the new settings */\n});\n</code></pre>",
                  "type": "module",
                  "displayName": "Event: `'remoteSettings'`"
                },
                {
                  "textRaw": "Event: `'stream'`",
                  "name": "event:_`'stream'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>stream</code> <a href=\"http2.html#http2_class_http2stream\" class=\"type\">&lt;Http2Stream&gt;</a> A reference to the stream</li>\n<li><code>headers</code> <a href=\"http2.html#http2_headers_object\" class=\"type\">&lt;HTTP/2 Headers Object&gt;</a> An object describing the headers</li>\n<li><code>flags</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The associated numeric flags</li>\n<li><code>rawHeaders</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> An array containing the raw header names followed by\ntheir respective values.</li>\n</ul>\n<p>The <code>'stream'</code> event is emitted when a new <code>Http2Stream</code> is created.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nsession.on('stream', (stream, headers, flags) => {\n  const method = headers[':method'];\n  const path = headers[':path'];\n  // ...\n  stream.respond({\n    ':status': 200,\n    'content-type': 'text/plain'\n  });\n  stream.write('hello ');\n  stream.end('world');\n});\n</code></pre>\n<p>On the server side, user code will typically not listen for this event directly,\nand would instead register a handler for the <code>'stream'</code> event emitted by the\n<code>net.Server</code> or <code>tls.Server</code> instances returned by <code>http2.createServer()</code> and\n<code>http2.createSecureServer()</code>, respectively, as in the example below:</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\n\n// Create an unencrypted HTTP/2 server\nconst server = http2.createServer();\n\nserver.on('stream', (stream, headers) => {\n  stream.respond({\n    'content-type': 'text/html',\n    ':status': 200\n  });\n  stream.on('error', (error) => console.error(error));\n  stream.end('&#x3C;h1>Hello World&#x3C;/h1>');\n});\n\nserver.listen(80);\n</code></pre>\n<p>Even though HTTP/2 streams and network sockets are not in a 1:1 correspondence,\na network error will destroy each individual stream and must be handled on the\nstream level, as shown above.</p>",
                  "type": "module",
                  "displayName": "Event: `'stream'`"
                },
                {
                  "textRaw": "Event: `'timeout'`",
                  "name": "event:_`'timeout'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>After the <code>http2session.setTimeout()</code> method is used to set the timeout period\nfor this <code>Http2Session</code>, the <code>'timeout'</code> event is emitted if there is no\nactivity on the <code>Http2Session</code> after the configured number of milliseconds.\nIts listener does not expect any arguments.</p>\n<pre><code class=\"language-js\">session.setTimeout(2000);\nsession.on('timeout', () => { /* .. */ });\n</code></pre>",
                  "type": "module",
                  "displayName": "Event: `'timeout'`"
                },
                {
                  "textRaw": "`http2session.alpnProtocol`",
                  "name": "`http2session.alpnprotocol`",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type\" class=\"type\">&lt;undefined&gt;</a></li>\n</ul>\n<p>Value will be <code>undefined</code> if the <code>Http2Session</code> is not yet connected to a\nsocket, <code>h2c</code> if the <code>Http2Session</code> is not connected to a <code>TLSSocket</code>, or\nwill return the value of the connected <code>TLSSocket</code>'s own <code>alpnProtocol</code>\nproperty.</p>",
                  "type": "module",
                  "displayName": "`http2session.alpnProtocol`"
                },
                {
                  "textRaw": "`http2session.close([callback])`",
                  "name": "`http2session.close([callback])`",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Gracefully closes the <code>Http2Session</code>, allowing any existing streams to\ncomplete on their own and preventing new <code>Http2Stream</code> instances from being\ncreated. Once closed, <code>http2session.destroy()</code> <em>might</em> be called if there\nare no open <code>Http2Stream</code> instances.</p>\n<p>If specified, the <code>callback</code> function is registered as a handler for the\n<code>'close'</code> event.</p>",
                  "type": "module",
                  "displayName": "`http2session.close([callback])`"
                },
                {
                  "textRaw": "`http2session.closed`",
                  "name": "`http2session.closed`",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Will be <code>true</code> if this <code>Http2Session</code> instance has been closed, otherwise\n<code>false</code>.</p>",
                  "type": "module",
                  "displayName": "`http2session.closed`"
                },
                {
                  "textRaw": "`http2session.connecting`",
                  "name": "`http2session.connecting`",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Will be <code>true</code> if this <code>Http2Session</code> instance is still connecting, will be set\nto <code>false</code> before emitting <code>connect</code> event and/or calling the <code>http2.connect</code>\ncallback.</p>",
                  "type": "module",
                  "displayName": "`http2session.connecting`"
                },
                {
                  "textRaw": "`http2session.destroy([error][, code])`",
                  "name": "`http2session.destroy([error][,_code])`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> An <code>Error</code> object if the <code>Http2Session</code> is being destroyed\ndue to an error.</li>\n<li><code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The HTTP/2 error code to send in the final <code>GOAWAY</code> frame.\nIf unspecified, and <code>error</code> is not undefined, the default is <code>INTERNAL_ERROR</code>,\notherwise defaults to <code>NO_ERROR</code>.</li>\n</ul>\n<p>Immediately terminates the <code>Http2Session</code> and the associated <code>net.Socket</code> or\n<code>tls.TLSSocket</code>.</p>\n<p>Once destroyed, the <code>Http2Session</code> will emit the <code>'close'</code> event. If <code>error</code>\nis not undefined, an <code>'error'</code> event will be emitted immediately before the\n<code>'close'</code> event.</p>\n<p>If there are any remaining open <code>Http2Streams</code> associated with the\n<code>Http2Session</code>, those will also be destroyed.</p>",
                  "type": "module",
                  "displayName": "`http2session.destroy([error][, code])`"
                },
                {
                  "textRaw": "`http2session.destroyed`",
                  "name": "`http2session.destroyed`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Will be <code>true</code> if this <code>Http2Session</code> instance has been destroyed and must no\nlonger be used, otherwise <code>false</code>.</p>",
                  "type": "module",
                  "displayName": "`http2session.destroyed`"
                },
                {
                  "textRaw": "`http2session.encrypted`",
                  "name": "`http2session.encrypted`",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type\" class=\"type\">&lt;undefined&gt;</a></li>\n</ul>\n<p>Value is <code>undefined</code> if the <code>Http2Session</code> session socket has not yet been\nconnected, <code>true</code> if the <code>Http2Session</code> is connected with a <code>TLSSocket</code>,\nand <code>false</code> if the <code>Http2Session</code> is connected to any other kind of socket\nor stream.</p>",
                  "type": "module",
                  "displayName": "`http2session.encrypted`"
                },
                {
                  "textRaw": "`http2session.goaway([code[, lastStreamID[, opaqueData]]])`",
                  "name": "`http2session.goaway([code[,_laststreamid[,_opaquedata]]])`",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> An HTTP/2 error code</li>\n<li><code>lastStreamID</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The numeric ID of the last processed <code>Http2Stream</code></li>\n<li><code>opaqueData</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" class=\"type\">&lt;TypedArray&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" class=\"type\">&lt;DataView&gt;</a> A <code>TypedArray</code> or <code>DataView</code>\ninstance containing additional data to be carried within the <code>GOAWAY</code> frame.</li>\n</ul>\n<p>Transmits a <code>GOAWAY</code> frame to the connected peer <em>without</em> shutting down the\n<code>Http2Session</code>.</p>",
                  "type": "module",
                  "displayName": "`http2session.goaway([code[, lastStreamID[, opaqueData]]])`"
                },
                {
                  "textRaw": "`http2session.localSettings`",
                  "name": "`http2session.localsettings`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"http2.html#http2_settings_object\" class=\"type\">&lt;HTTP/2 Settings Object&gt;</a></li>\n</ul>\n<p>A prototype-less object describing the current local settings of this\n<code>Http2Session</code>. The local settings are local to <em>this</em> <code>Http2Session</code> instance.</p>",
                  "type": "module",
                  "displayName": "`http2session.localSettings`"
                },
                {
                  "textRaw": "`http2session.originSet`",
                  "name": "`http2session.originset`",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type\" class=\"type\">&lt;undefined&gt;</a></li>\n</ul>\n<p>If the <code>Http2Session</code> is connected to a <code>TLSSocket</code>, the <code>originSet</code> property\nwill return an <code>Array</code> of origins for which the <code>Http2Session</code> may be\nconsidered authoritative.</p>\n<p>The <code>originSet</code> property is only available when using a secure TLS connection.</p>",
                  "type": "module",
                  "displayName": "`http2session.originSet`"
                },
                {
                  "textRaw": "`http2session.pendingSettingsAck`",
                  "name": "`http2session.pendingsettingsack`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Indicates whether the <code>Http2Session</code> is currently waiting for acknowledgment of\na sent <code>SETTINGS</code> frame. Will be <code>true</code> after calling the\n<code>http2session.settings()</code> method. Will be <code>false</code> once all sent <code>SETTINGS</code>\nframes have been acknowledged.</p>",
                  "type": "module",
                  "displayName": "`http2session.pendingSettingsAck`"
                },
                {
                  "textRaw": "`http2session.ping([payload, ]callback)`",
                  "name": "`http2session.ping([payload,_]callback)`",
                  "meta": {
                    "added": [
                      "v8.9.3"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>payload</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" class=\"type\">&lt;TypedArray&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" class=\"type\">&lt;DataView&gt;</a> Optional ping payload.</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Sends a <code>PING</code> frame to the connected HTTP/2 peer. A <code>callback</code> function must\nbe provided. The method will return <code>true</code> if the <code>PING</code> was sent, <code>false</code>\notherwise.</p>\n<p>The maximum number of outstanding (unacknowledged) pings is determined by the\n<code>maxOutstandingPings</code> configuration option. The default maximum is 10.</p>\n<p>If provided, the <code>payload</code> must be a <code>Buffer</code>, <code>TypedArray</code>, or <code>DataView</code>\ncontaining 8 bytes of data that will be transmitted with the <code>PING</code> and\nreturned with the ping acknowledgment.</p>\n<p>The callback will be invoked with three arguments: an error argument that will\nbe <code>null</code> if the <code>PING</code> was successfully acknowledged, a <code>duration</code> argument\nthat reports the number of milliseconds elapsed since the ping was sent and the\nacknowledgment was received, and a <code>Buffer</code> containing the 8-byte <code>PING</code>\npayload.</p>\n<pre><code class=\"language-js\">session.ping(Buffer.from('abcdefgh'), (err, duration, payload) => {\n  if (!err) {\n    console.log(`Ping acknowledged in ${duration} milliseconds`);\n    console.log(`With payload '${payload.toString()}'`);\n  }\n});\n</code></pre>\n<p>If the <code>payload</code> argument is not specified, the default payload will be the\n64-bit timestamp (little endian) marking the start of the <code>PING</code> duration.</p>",
                  "type": "module",
                  "displayName": "`http2session.ping([payload, ]callback)`"
                },
                {
                  "textRaw": "`http2session.ref()`",
                  "name": "`http2session.ref()`",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Calls <a href=\"net.html#net_socket_ref\"><code>ref()</code></a> on this <code>Http2Session</code>\ninstance's underlying <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>.</p>",
                  "type": "module",
                  "displayName": "`http2session.ref()`"
                },
                {
                  "textRaw": "`http2session.remoteSettings`",
                  "name": "`http2session.remotesettings`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"http2.html#http2_settings_object\" class=\"type\">&lt;HTTP/2 Settings Object&gt;</a></li>\n</ul>\n<p>A prototype-less object describing the current remote settings of this\n<code>Http2Session</code>. The remote settings are set by the <em>connected</em> HTTP/2 peer.</p>",
                  "type": "module",
                  "displayName": "`http2session.remoteSettings`"
                },
                {
                  "textRaw": "`http2session.setTimeout(msecs, callback)`",
                  "name": "`http2session.settimeout(msecs,_callback)`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>msecs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Used to set a callback function that is called when there is no activity on\nthe <code>Http2Session</code> after <code>msecs</code> milliseconds. The given <code>callback</code> is\nregistered as a listener on the <code>'timeout'</code> event.</p>",
                  "type": "module",
                  "displayName": "`http2session.setTimeout(msecs, callback)`"
                },
                {
                  "textRaw": "`http2session.socket`",
                  "name": "`http2session.socket`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"net.html#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a> | <a href=\"tls.html#tls_class_tls_tlssocket\" class=\"type\">&lt;tls.TLSSocket&gt;</a></li>\n</ul>\n<p>Returns a <code>Proxy</code> object that acts as a <code>net.Socket</code> (or <code>tls.TLSSocket</code>) but\nlimits available methods to ones safe to use with HTTP/2.</p>\n<p><code>destroy</code>, <code>emit</code>, <code>end</code>, <code>pause</code>, <code>read</code>, <code>resume</code>, and <code>write</code> will throw\nan error with code <code>ERR_HTTP2_NO_SOCKET_MANIPULATION</code>. See\n<a href=\"#http2_http2session_and_sockets\"><code>Http2Session</code> and Sockets</a> for more information.</p>\n<p><code>setTimeout</code> method will be called on this <code>Http2Session</code>.</p>\n<p>All other interactions will be routed directly to the socket.</p>",
                  "type": "module",
                  "displayName": "`http2session.socket`"
                },
                {
                  "textRaw": "`http2session.state`",
                  "name": "`http2session.state`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Provides miscellaneous information about the current state of the\n<code>Http2Session</code>.</p>\n<ul>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>effectiveLocalWindowSize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The current local (receive)\nflow control window size for the <code>Http2Session</code>.</li>\n<li><code>effectiveRecvDataLength</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The current number of bytes\nthat have been received since the last flow control <code>WINDOW_UPDATE</code>.</li>\n<li><code>nextStreamID</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The numeric identifier to be used the\nnext time a new <code>Http2Stream</code> is created by this <code>Http2Session</code>.</li>\n<li><code>localWindowSize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of bytes that the remote peer can\nsend without receiving a <code>WINDOW_UPDATE</code>.</li>\n<li><code>lastProcStreamID</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The numeric id of the <code>Http2Stream</code>\nfor which a <code>HEADERS</code> or <code>DATA</code> frame was most recently received.</li>\n<li><code>remoteWindowSize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of bytes that this <code>Http2Session</code>\nmay send without receiving a <code>WINDOW_UPDATE</code>.</li>\n<li><code>outboundQueueSize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of frames currently within the\noutbound queue for this <code>Http2Session</code>.</li>\n<li><code>deflateDynamicTableSize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The current size in bytes of the\noutbound header compression state table.</li>\n<li><code>inflateDynamicTableSize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The current size in bytes of the\ninbound header compression state table.</li>\n</ul>\n</li>\n</ul>\n<p>An object describing the current status of this <code>Http2Session</code>.</p>",
                  "type": "module",
                  "displayName": "`http2session.state`"
                },
                {
                  "textRaw": "`http2session.settings([settings][, callback])`",
                  "name": "`http2session.settings([settings][,_callback])`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>settings</code> <a href=\"http2.html#http2_settings_object\" class=\"type\">&lt;HTTP/2 Settings Object&gt;</a></li>\n<li>\n<p><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Callback that is called once the session is connected or\nright away if the session is already connected.</p>\n<ul>\n<li><code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;null&gt;</a></li>\n<li><code>settings</code> <a href=\"http2.html#http2_settings_object\" class=\"type\">&lt;HTTP/2 Settings Object&gt;</a> The updated <code>settings</code> object.</li>\n<li><code>duration</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a></li>\n</ul>\n</li>\n</ul>\n<p>Updates the current local settings for this <code>Http2Session</code> and sends a new\n<code>SETTINGS</code> frame to the connected HTTP/2 peer.</p>\n<p>Once called, the <code>http2session.pendingSettingsAck</code> property will be <code>true</code>\nwhile the session is waiting for the remote peer to acknowledge the new\nsettings.</p>\n<p>The new settings will not become effective until the <code>SETTINGS</code> acknowledgment\nis received and the <code>'localSettings'</code> event is emitted. It is possible to send\nmultiple <code>SETTINGS</code> frames while acknowledgment is still pending.</p>",
                  "type": "module",
                  "displayName": "`http2session.settings([settings][, callback])`"
                },
                {
                  "textRaw": "`http2session.type`",
                  "name": "`http2session.type`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>The <code>http2session.type</code> will be equal to\n<code>http2.constants.NGHTTP2_SESSION_SERVER</code> if this <code>Http2Session</code> instance is a\nserver, and <code>http2.constants.NGHTTP2_SESSION_CLIENT</code> if the instance is a\nclient.</p>",
                  "type": "module",
                  "displayName": "`http2session.type`"
                },
                {
                  "textRaw": "`http2session.unref()`",
                  "name": "`http2session.unref()`",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Calls <a href=\"net.html#net_socket_unref\"><code>unref()</code></a> on this <code>Http2Session</code>\ninstance's underlying <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>.</p>",
                  "type": "module",
                  "displayName": "`http2session.unref()`"
                }
              ],
              "type": "module",
              "displayName": "Class: `Http2Session`"
            },
            {
              "textRaw": "Class: `ServerHttp2Session`",
              "name": "class:_`serverhttp2session`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Extends: <a href=\"http2.html#http2_class_http2session\" class=\"type\">&lt;Http2Session&gt;</a></li>\n</ul>",
              "modules": [
                {
                  "textRaw": "`serverhttp2session.altsvc(alt, originOrStream)`",
                  "name": "`serverhttp2session.altsvc(alt,_originorstream)`",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>alt</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A description of the alternative service configuration as\ndefined by <a href=\"https://tools.ietf.org/html/rfc7838\">RFC 7838</a>.</li>\n<li><code>originOrStream</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"url.html#url_the_whatwg_url_api\" class=\"type\">&lt;URL&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> Either a URL string specifying\nthe origin (or an <code>Object</code> with an <code>origin</code> property) or the numeric\nidentifier of an active <code>Http2Stream</code> as given by the <code>http2stream.id</code>\nproperty.</li>\n</ul>\n<p>Submits an <code>ALTSVC</code> frame (as defined by <a href=\"https://tools.ietf.org/html/rfc7838\">RFC 7838</a>) to the connected client.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\n\nconst server = http2.createServer();\nserver.on('session', (session) => {\n  // Set altsvc for origin https://example.org:80\n  session.altsvc('h2=\":8000\"', 'https://example.org:80');\n});\n\nserver.on('stream', (stream) => {\n  // Set altsvc for a specific stream\n  stream.session.altsvc('h2=\":8000\"', stream.id);\n});\n</code></pre>\n<p>Sending an <code>ALTSVC</code> frame with a specific stream ID indicates that the alternate\nservice is associated with the origin of the given <code>Http2Stream</code>.</p>\n<p>The <code>alt</code> and origin string <em>must</em> contain only ASCII bytes and are\nstrictly interpreted as a sequence of ASCII bytes. The special value <code>'clear'</code>\nmay be passed to clear any previously set alternative service for a given\ndomain.</p>\n<p>When a string is passed for the <code>originOrStream</code> argument, it will be parsed as\na URL and the origin will be derived. For instance, the origin for the\nHTTP URL <code>'https://example.org/foo/bar'</code> is the ASCII string\n<code>'https://example.org'</code>. An error will be thrown if either the given string\ncannot be parsed as a URL or if a valid origin cannot be derived.</p>\n<p>A <code>URL</code> object, or any object with an <code>origin</code> property, may be passed as\n<code>originOrStream</code>, in which case the value of the <code>origin</code> property will be\nused. The value of the <code>origin</code> property <em>must</em> be a properly serialized\nASCII origin.</p>",
                  "type": "module",
                  "displayName": "`serverhttp2session.altsvc(alt, originOrStream)`"
                },
                {
                  "textRaw": "Specifying alternative services",
                  "name": "specifying_alternative_services",
                  "desc": "<p>The format of the <code>alt</code> parameter is strictly defined by <a href=\"https://tools.ietf.org/html/rfc7838\">RFC 7838</a> as an\nASCII string containing a comma-delimited list of \"alternative\" protocols\nassociated with a specific host and port.</p>\n<p>For example, the value <code>'h2=\"example.org:81\"'</code> indicates that the HTTP/2\nprotocol is available on the host <code>'example.org'</code> on TCP/IP port 81. The\nhost and port <em>must</em> be contained within the quote (<code>\"</code>) characters.</p>\n<p>Multiple alternatives may be specified, for instance: <code>'h2=\"example.org:81\", h2=\":82\"'</code>.</p>\n<p>The protocol identifier (<code>'h2'</code> in the examples) may be any valid\n<a href=\"https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids\">ALPN Protocol ID</a>.</p>\n<p>The syntax of these values is not validated by the Node.js implementation and\nare passed through as provided by the user or received from the peer.</p>",
                  "type": "module",
                  "displayName": "Specifying alternative services"
                },
                {
                  "textRaw": "`serverhttp2session.origin(...origins)`",
                  "name": "`serverhttp2session.origin(...origins)`",
                  "meta": {
                    "added": [
                      "v10.12.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>origins</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"url.html#url_the_whatwg_url_api\" class=\"type\">&lt;URL&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> One or more URL Strings passed as\nseparate arguments.</li>\n</ul>\n<p>Submits an <code>ORIGIN</code> frame (as defined by <a href=\"https://tools.ietf.org/html/rfc8336\">RFC 8336</a>) to the connected client\nto advertise the set of origins for which the server is capable of providing\nauthoritative responses.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst options = getSecureOptionsSomehow();\nconst server = http2.createSecureServer(options);\nserver.on('stream', (stream) => {\n  stream.respond();\n  stream.end('ok');\n});\nserver.on('session', (session) => {\n  session.origin('https://example.com', 'https://example.org');\n});\n</code></pre>\n<p>When a string is passed as an <code>origin</code>, it will be parsed as a URL and the\norigin will be derived. For instance, the origin for the HTTP URL\n<code>'https://example.org/foo/bar'</code> is the ASCII string\n<code>'https://example.org'</code>. An error will be thrown if either the given string\ncannot be parsed as a URL or if a valid origin cannot be derived.</p>\n<p>A <code>URL</code> object, or any object with an <code>origin</code> property, may be passed as\nan <code>origin</code>, in which case the value of the <code>origin</code> property will be\nused. The value of the <code>origin</code> property <em>must</em> be a properly serialized\nASCII origin.</p>\n<p>Alternatively, the <code>origins</code> option may be used when creating a new HTTP/2\nserver using the <code>http2.createSecureServer()</code> method:</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst options = getSecureOptionsSomehow();\noptions.origins = ['https://example.com', 'https://example.org'];\nconst server = http2.createSecureServer(options);\nserver.on('stream', (stream) => {\n  stream.respond();\n  stream.end('ok');\n});\n</code></pre>",
                  "type": "module",
                  "displayName": "`serverhttp2session.origin(...origins)`"
                }
              ],
              "type": "module",
              "displayName": "Class: `ServerHttp2Session`"
            },
            {
              "textRaw": "Class: `ClientHttp2Session`",
              "name": "class:_`clienthttp2session`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Extends: <a href=\"http2.html#http2_class_http2session\" class=\"type\">&lt;Http2Session&gt;</a></li>\n</ul>",
              "modules": [
                {
                  "textRaw": "Event: `'altsvc'`",
                  "name": "event:_`'altsvc'`",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>alt</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li><code>origin</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li><code>streamId</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>The <code>'altsvc'</code> event is emitted whenever an <code>ALTSVC</code> frame is received by\nthe client. The event is emitted with the <code>ALTSVC</code> value, origin, and stream\nID. If no <code>origin</code> is provided in the <code>ALTSVC</code> frame, <code>origin</code> will\nbe an empty string.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst client = http2.connect('https://example.org');\n\nclient.on('altsvc', (alt, origin, streamId) => {\n  console.log(alt);\n  console.log(origin);\n  console.log(streamId);\n});\n</code></pre>",
                  "type": "module",
                  "displayName": "Event: `'altsvc'`"
                },
                {
                  "textRaw": "Event: `'origin'`",
                  "name": "event:_`'origin'`",
                  "meta": {
                    "added": [
                      "v10.12.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>origins</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a></li>\n</ul>\n<p>The <code>'origin'</code> event is emitted whenever an <code>ORIGIN</code> frame is received by\nthe client. The event is emitted with an array of <code>origin</code> strings. The\n<code>http2session.originSet</code> will be updated to include the received\norigins.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst client = http2.connect('https://example.org');\n\nclient.on('origin', (origins) => {\n  for (let n = 0; n &#x3C; origins.length; n++)\n    console.log(origins[n]);\n});\n</code></pre>\n<p>The <code>'origin'</code> event is only emitted when using a secure TLS connection.</p>",
                  "type": "module",
                  "displayName": "Event: `'origin'`"
                },
                {
                  "textRaw": "`clienthttp2session.request(headers[, options])`",
                  "name": "`clienthttp2session.request(headers[,_options])`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li>\n<p><code>headers</code> <a href=\"http2.html#http2_headers_object\" class=\"type\">&lt;HTTP/2 Headers Object&gt;</a></p>\n</li>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>endStream</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> if the <code>Http2Stream</code> <em>writable</em> side should\nbe closed initially, such as when sending a <code>GET</code> request that should not\nexpect a payload body.</li>\n<li><code>exclusive</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code> and <code>parent</code> identifies a parent Stream,\nthe created stream is made the sole direct dependency of the parent, with\nall other existing dependents made a dependent of the newly created stream.\n<strong>Default:</strong> <code>false</code>.</li>\n<li><code>parent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the numeric identifier of a stream the newly\ncreated stream is dependent on.</li>\n<li><code>weight</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the relative dependency of a stream in relation\nto other streams with the same <code>parent</code>. The value is a number between <code>1</code>\nand <code>256</code> (inclusive).</li>\n<li><code>waitForTrailers</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code>, the <code>Http2Stream</code> will emit the\n<code>'wantTrailers'</code> event after the final <code>DATA</code> frame has been sent.</li>\n</ul>\n</li>\n<li>\n<p>Returns: <a href=\"http2.html#http2_class_clienthttp2stream\" class=\"type\">&lt;ClientHttp2Stream&gt;</a></p>\n</li>\n</ul>\n<p>For HTTP/2 Client <code>Http2Session</code> instances only, the <code>http2session.request()</code>\ncreates and returns an <code>Http2Stream</code> instance that can be used to send an\nHTTP/2 request to the connected server.</p>\n<p>This method is only available if <code>http2session.type</code> is equal to\n<code>http2.constants.NGHTTP2_SESSION_CLIENT</code>.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst clientSession = http2.connect('https://localhost:1234');\nconst {\n  HTTP2_HEADER_PATH,\n  HTTP2_HEADER_STATUS\n} = http2.constants;\n\nconst req = clientSession.request({ [HTTP2_HEADER_PATH]: '/' });\nreq.on('response', (headers) => {\n  console.log(headers[HTTP2_HEADER_STATUS]);\n  req.on('data', (chunk) => { /* .. */ });\n  req.on('end', () => { /* .. */ });\n});\n</code></pre>\n<p>When the <code>options.waitForTrailers</code> option is set, the <code>'wantTrailers'</code> event\nis emitted immediately after queuing the last chunk of payload data to be sent.\nThe <code>http2stream.sendTrailers()</code> method can then be called to send trailing\nheaders to the peer.</p>\n<p>When <code>options.waitForTrailers</code> is set, the <code>Http2Stream</code> will not automatically\nclose when the final <code>DATA</code> frame is transmitted. User code must call either\n<code>http2stream.sendTrailers()</code> or <code>http2stream.close()</code> to close the\n<code>Http2Stream</code>.</p>\n<p>The <code>:method</code> and <code>:path</code> pseudo-headers are not specified within <code>headers</code>,\nthey respectively default to:</p>\n<ul>\n<li><code>:method</code> = <code>'GET'</code></li>\n<li><code>:path</code> = <code>/</code></li>\n</ul>",
                  "type": "module",
                  "displayName": "`clienthttp2session.request(headers[, options])`"
                }
              ],
              "type": "module",
              "displayName": "Class: `ClientHttp2Session`"
            },
            {
              "textRaw": "Class: `Http2Stream`",
              "name": "class:_`http2stream`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Extends: <a href=\"stream.html#stream_class_stream_duplex\" class=\"type\">&lt;stream.Duplex&gt;</a></li>\n</ul>\n<p>Each instance of the <code>Http2Stream</code> class represents a bidirectional HTTP/2\ncommunications stream over an <code>Http2Session</code> instance. Any single <code>Http2Session</code>\nmay have up to 2<sup>31</sup>-1 <code>Http2Stream</code> instances over its lifetime.</p>\n<p>User code will not construct <code>Http2Stream</code> instances directly. Rather, these\nare created, managed, and provided to user code through the <code>Http2Session</code>\ninstance. On the server, <code>Http2Stream</code> instances are created either in response\nto an incoming HTTP request (and handed off to user code via the <code>'stream'</code>\nevent), or in response to a call to the <code>http2stream.pushStream()</code> method.\nOn the client, <code>Http2Stream</code> instances are created and returned when either the\n<code>http2session.request()</code> method is called, or in response to an incoming\n<code>'push'</code> event.</p>\n<p>The <code>Http2Stream</code> class is a base for the <a href=\"#http2_class_serverhttp2stream\"><code>ServerHttp2Stream</code></a> and\n<a href=\"#http2_class_clienthttp2stream\"><code>ClientHttp2Stream</code></a> classes, each of which is used specifically by either\nthe Server or Client side, respectively.</p>\n<p>All <code>Http2Stream</code> instances are <a href=\"stream.html#stream_class_stream_duplex\"><code>Duplex</code></a> streams. The <code>Writable</code> side of the\n<code>Duplex</code> is used to send data to the connected peer, while the <code>Readable</code> side\nis used to receive data sent by the connected peer.</p>",
              "modules": [
                {
                  "textRaw": "`Http2Stream` Lifecycle",
                  "name": "`http2stream`_lifecycle",
                  "modules": [
                    {
                      "textRaw": "Creation",
                      "name": "creation",
                      "desc": "<p>On the server side, instances of <a href=\"#http2_class_serverhttp2stream\"><code>ServerHttp2Stream</code></a> are created either\nwhen:</p>\n<ul>\n<li>A new HTTP/2 <code>HEADERS</code> frame with a previously unused stream ID is received;</li>\n<li>The <code>http2stream.pushStream()</code> method is called.</li>\n</ul>\n<p>On the client side, instances of <a href=\"#http2_class_clienthttp2stream\"><code>ClientHttp2Stream</code></a> are created when the\n<code>http2session.request()</code> method is called.</p>\n<p>On the client, the <code>Http2Stream</code> instance returned by <code>http2session.request()</code>\nmay not be immediately ready for use if the parent <code>Http2Session</code> has not yet\nbeen fully established. In such cases, operations called on the <code>Http2Stream</code>\nwill be buffered until the <code>'ready'</code> event is emitted. User code should rarely,\nif ever, need to handle the <code>'ready'</code> event directly. The ready status of an\n<code>Http2Stream</code> can be determined by checking the value of <code>http2stream.id</code>. If\nthe value is <code>undefined</code>, the stream is not yet ready for use.</p>",
                      "type": "module",
                      "displayName": "Creation"
                    },
                    {
                      "textRaw": "Destruction",
                      "name": "destruction",
                      "desc": "<p>All <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a> instances are destroyed either when:</p>\n<ul>\n<li>An <code>RST_STREAM</code> frame for the stream is received by the connected peer,\nand pending data has been read.</li>\n<li>The <code>http2stream.close()</code> method is called, and pending data has been read.</li>\n<li>The <code>http2stream.destroy()</code> or <code>http2session.destroy()</code> methods are called.</li>\n</ul>\n<p>When an <code>Http2Stream</code> instance is destroyed, an attempt will be made to send an\n<code>RST_STREAM</code> frame to the connected peer.</p>\n<p>When the <code>Http2Stream</code> instance is destroyed, the <code>'close'</code> event will\nbe emitted. Because <code>Http2Stream</code> is an instance of <code>stream.Duplex</code>, the\n<code>'end'</code> event will also be emitted if the stream data is currently flowing.\nThe <code>'error'</code> event may also be emitted if <code>http2stream.destroy()</code> was called\nwith an <code>Error</code> passed as the first argument.</p>\n<p>After the <code>Http2Stream</code> has been destroyed, the <code>http2stream.destroyed</code>\nproperty will be <code>true</code> and the <code>http2stream.rstCode</code> property will specify the\n<code>RST_STREAM</code> error code. The <code>Http2Stream</code> instance is no longer usable once\ndestroyed.</p>",
                      "type": "module",
                      "displayName": "Destruction"
                    }
                  ],
                  "type": "module",
                  "displayName": "`Http2Stream` Lifecycle"
                },
                {
                  "textRaw": "Event: `'aborted'`",
                  "name": "event:_`'aborted'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'aborted'</code> event is emitted whenever a <code>Http2Stream</code> instance is\nabnormally aborted in mid-communication.\nIts listener does not expect any arguments.</p>\n<p>The <code>'aborted'</code> event will only be emitted if the <code>Http2Stream</code> writable side\nhas not been ended.</p>",
                  "type": "module",
                  "displayName": "Event: `'aborted'`"
                },
                {
                  "textRaw": "Event: `'close'`",
                  "name": "event:_`'close'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'close'</code> event is emitted when the <code>Http2Stream</code> is destroyed. Once\nthis event is emitted, the <code>Http2Stream</code> instance is no longer usable.</p>\n<p>The HTTP/2 error code used when closing the stream can be retrieved using\nthe <code>http2stream.rstCode</code> property. If the code is any value other than\n<code>NGHTTP2_NO_ERROR</code> (<code>0</code>), an <code>'error'</code> event will have also been emitted.</p>",
                  "type": "module",
                  "displayName": "Event: `'close'`"
                },
                {
                  "textRaw": "Event: `'error'`",
                  "name": "event:_`'error'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li>\n</ul>\n<p>The <code>'error'</code> event is emitted when an error occurs during the processing of\nan <code>Http2Stream</code>.</p>",
                  "type": "module",
                  "displayName": "Event: `'error'`"
                },
                {
                  "textRaw": "Event: `'frameError'`",
                  "name": "event:_`'frameerror'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>type</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The frame type.</li>\n<li><code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The error code.</li>\n<li><code>id</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> The stream id (or <code>0</code> if the frame isn't associated with a\nstream).</li>\n</ul>\n<p>The <code>'frameError'</code> event is emitted when an error occurs while attempting to\nsend a frame. When invoked, the handler function will receive an integer\nargument identifying the frame type, and an integer argument identifying the\nerror code. The <code>Http2Stream</code> instance will be destroyed immediately after the\n<code>'frameError'</code> event is emitted.</p>",
                  "type": "module",
                  "displayName": "Event: `'frameError'`"
                },
                {
                  "textRaw": "Event: `'timeout'`",
                  "name": "event:_`'timeout'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'timeout'</code> event is emitted after no activity is received for this\n<code>Http2Stream</code> within the number of milliseconds set using\n<code>http2stream.setTimeout()</code>.\nIts listener does not expect any arguments.</p>",
                  "type": "module",
                  "displayName": "Event: `'timeout'`"
                },
                {
                  "textRaw": "Event: `'trailers'`",
                  "name": "event:_`'trailers'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>headers</code> <a href=\"http2.html#http2_headers_object\" class=\"type\">&lt;HTTP/2 Headers Object&gt;</a> An object describing the headers</li>\n<li><code>flags</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The associated numeric flags</li>\n</ul>\n<p>The <code>'trailers'</code> event is emitted when a block of headers associated with\ntrailing header fields is received. The listener callback is passed the\n<a href=\"#http2_headers_object\">HTTP/2 Headers Object</a> and flags associated with the headers.</p>\n<p>This event might not be emitted if <code>http2stream.end()</code> is called\nbefore trailers are received and the incoming data is not being read or\nlistened for.</p>\n<pre><code class=\"language-js\">stream.on('trailers', (headers, flags) => {\n  console.log(headers);\n});\n</code></pre>",
                  "type": "module",
                  "displayName": "Event: `'trailers'`"
                },
                {
                  "textRaw": "Event: `'wantTrailers'`",
                  "name": "event:_`'wanttrailers'`",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'wantTrailers'</code> event is emitted when the <code>Http2Stream</code> has queued the\nfinal <code>DATA</code> frame to be sent on a frame and the <code>Http2Stream</code> is ready to send\ntrailing headers. When initiating a request or response, the <code>waitForTrailers</code>\noption must be set for this event to be emitted.</p>",
                  "type": "module",
                  "displayName": "Event: `'wantTrailers'`"
                },
                {
                  "textRaw": "`http2stream.aborted`",
                  "name": "`http2stream.aborted`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Set to <code>true</code> if the <code>Http2Stream</code> instance was aborted abnormally. When set,\nthe <code>'aborted'</code> event will have been emitted.</p>",
                  "type": "module",
                  "displayName": "`http2stream.aborted`"
                },
                {
                  "textRaw": "`http2stream.bufferSize`",
                  "name": "`http2stream.buffersize`",
                  "meta": {
                    "added": [
                      "v11.2.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>This property shows the number of characters currently buffered to be written.\nSee <a href=\"net.html#net_socket_buffersize\"><code>net.Socket.bufferSize</code></a> for details.</p>",
                  "type": "module",
                  "displayName": "`http2stream.bufferSize`"
                },
                {
                  "textRaw": "`http2stream.close(code[, callback])`",
                  "name": "`http2stream.close(code[,_callback])`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>code</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Unsigned 32-bit integer identifying the error code.\n<strong>Default:</strong> <code>http2.constants.NGHTTP2_NO_ERROR</code> (<code>0x00</code>).</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> An optional function registered to listen for the\n<code>'close'</code> event.</li>\n</ul>\n<p>Closes the <code>Http2Stream</code> instance by sending an <code>RST_STREAM</code> frame to the\nconnected HTTP/2 peer.</p>",
                  "type": "module",
                  "displayName": "`http2stream.close(code[, callback])`"
                },
                {
                  "textRaw": "`http2stream.closed`",
                  "name": "`http2stream.closed`",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Set to <code>true</code> if the <code>Http2Stream</code> instance has been closed.</p>",
                  "type": "module",
                  "displayName": "`http2stream.closed`"
                },
                {
                  "textRaw": "`http2stream.destroyed`",
                  "name": "`http2stream.destroyed`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Set to <code>true</code> if the <code>Http2Stream</code> instance has been destroyed and is no longer\nusable.</p>",
                  "type": "module",
                  "displayName": "`http2stream.destroyed`"
                },
                {
                  "textRaw": "`http2stream.endAfterHeaders`",
                  "name": "`http2stream.endafterheaders`",
                  "meta": {
                    "added": [
                      "v10.11.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Set the <code>true</code> if the <code>END_STREAM</code> flag was set in the request or response\nHEADERS frame received, indicating that no additional data should be received\nand the readable side of the <code>Http2Stream</code> will be closed.</p>",
                  "type": "module",
                  "displayName": "`http2stream.endAfterHeaders`"
                },
                {
                  "textRaw": "`http2stream.id`",
                  "name": "`http2stream.id`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type\" class=\"type\">&lt;undefined&gt;</a></li>\n</ul>\n<p>The numeric stream identifier of this <code>Http2Stream</code> instance. Set to <code>undefined</code>\nif the stream identifier has not yet been assigned.</p>",
                  "type": "module",
                  "displayName": "`http2stream.id`"
                },
                {
                  "textRaw": "`http2stream.pending`",
                  "name": "`http2stream.pending`",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Set to <code>true</code> if the <code>Http2Stream</code> instance has not yet been assigned a\nnumeric stream identifier.</p>",
                  "type": "module",
                  "displayName": "`http2stream.pending`"
                },
                {
                  "textRaw": "`http2stream.priority(options)`",
                  "name": "`http2stream.priority(options)`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>exclusive</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code> and <code>parent</code> identifies a parent Stream,\nthis stream is made the sole direct dependency of the parent, with\nall other existing dependents made a dependent of this stream. <strong>Default:</strong>\n<code>false</code>.</li>\n<li><code>parent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the numeric identifier of a stream this stream\nis dependent on.</li>\n<li><code>weight</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the relative dependency of a stream in relation\nto other streams with the same <code>parent</code>. The value is a number between <code>1</code>\nand <code>256</code> (inclusive).</li>\n<li><code>silent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code>, changes the priority locally without\nsending a <code>PRIORITY</code> frame to the connected peer.</li>\n</ul>\n</li>\n</ul>\n<p>Updates the priority for this <code>Http2Stream</code> instance.</p>",
                  "type": "module",
                  "displayName": "`http2stream.priority(options)`"
                },
                {
                  "textRaw": "`http2stream.rstCode`",
                  "name": "`http2stream.rstcode`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>Set to the <code>RST_STREAM</code> <a href=\"#error_codes\">error code</a> reported when the <code>Http2Stream</code> is\ndestroyed after either receiving an <code>RST_STREAM</code> frame from the connected peer,\ncalling <code>http2stream.close()</code>, or <code>http2stream.destroy()</code>. Will be\n<code>undefined</code> if the <code>Http2Stream</code> has not been closed.</p>",
                  "type": "module",
                  "displayName": "`http2stream.rstCode`"
                },
                {
                  "textRaw": "`http2stream.sentHeaders`",
                  "name": "`http2stream.sentheaders`",
                  "meta": {
                    "added": [
                      "v9.5.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"http2.html#http2_headers_object\" class=\"type\">&lt;HTTP/2 Headers Object&gt;</a></li>\n</ul>\n<p>An object containing the outbound headers sent for this <code>Http2Stream</code>.</p>",
                  "type": "module",
                  "displayName": "`http2stream.sentHeaders`"
                },
                {
                  "textRaw": "`http2stream.sentInfoHeaders`",
                  "name": "`http2stream.sentinfoheaders`",
                  "meta": {
                    "added": [
                      "v9.5.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"http2.html#http2_headers_object\" class=\"type\">&lt;HTTP/2 Headers Object[]&gt;</a></li>\n</ul>\n<p>An array of objects containing the outbound informational (additional) headers\nsent for this <code>Http2Stream</code>.</p>",
                  "type": "module",
                  "displayName": "`http2stream.sentInfoHeaders`"
                },
                {
                  "textRaw": "`http2stream.sentTrailers`",
                  "name": "`http2stream.senttrailers`",
                  "meta": {
                    "added": [
                      "v9.5.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"http2.html#http2_headers_object\" class=\"type\">&lt;HTTP/2 Headers Object&gt;</a></li>\n</ul>\n<p>An object containing the outbound trailers sent for this <code>HttpStream</code>.</p>",
                  "type": "module",
                  "displayName": "`http2stream.sentTrailers`"
                },
                {
                  "textRaw": "`http2stream.session`",
                  "name": "`http2stream.session`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"http2.html#http2_class_http2session\" class=\"type\">&lt;Http2Session&gt;</a></li>\n</ul>\n<p>A reference to the <code>Http2Session</code> instance that owns this <code>Http2Stream</code>. The\nvalue will be <code>undefined</code> after the <code>Http2Stream</code> instance is destroyed.</p>",
                  "type": "module",
                  "displayName": "`http2stream.session`"
                },
                {
                  "textRaw": "`http2stream.setTimeout(msecs, callback)`",
                  "name": "`http2stream.settimeout(msecs,_callback)`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>msecs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst client = http2.connect('http://example.org:8000');\nconst { NGHTTP2_CANCEL } = http2.constants;\nconst req = client.request({ ':path': '/' });\n\n// Cancel the stream if there's no activity after 5 seconds\nreq.setTimeout(5000, () => req.close(NGHTTP2_CANCEL));\n</code></pre>",
                  "type": "module",
                  "displayName": "`http2stream.setTimeout(msecs, callback)`"
                },
                {
                  "textRaw": "`http2stream.state`",
                  "name": "`http2stream.state`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Provides miscellaneous information about the current state of the\n<code>Http2Stream</code>.</p>\n<ul>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>localWindowSize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of bytes the connected peer may send\nfor this <code>Http2Stream</code> without receiving a <code>WINDOW_UPDATE</code>.</li>\n<li><code>state</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> A flag indicating the low-level current state of the\n<code>Http2Stream</code> as determined by <code>nghttp2</code>.</li>\n<li><code>localClose</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> <code>1</code> if this <code>Http2Stream</code> has been closed locally.</li>\n<li><code>remoteClose</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> <code>1</code> if this <code>Http2Stream</code> has been closed\nremotely.</li>\n<li><code>sumDependencyWeight</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The sum weight of all <code>Http2Stream</code>\ninstances that depend on this <code>Http2Stream</code> as specified using\n<code>PRIORITY</code> frames.</li>\n<li><code>weight</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The priority weight of this <code>Http2Stream</code>.</li>\n</ul>\n</li>\n</ul>\n<p>A current state of this <code>Http2Stream</code>.</p>",
                  "type": "module",
                  "displayName": "`http2stream.state`"
                },
                {
                  "textRaw": "`http2stream.sendTrailers(headers)`",
                  "name": "`http2stream.sendtrailers(headers)`",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>headers</code> <a href=\"http2.html#http2_headers_object\" class=\"type\">&lt;HTTP/2 Headers Object&gt;</a></li>\n</ul>\n<p>Sends a trailing <code>HEADERS</code> frame to the connected HTTP/2 peer. This method\nwill cause the <code>Http2Stream</code> to be immediately closed and must only be\ncalled after the <code>'wantTrailers'</code> event has been emitted. When sending a\nrequest or sending a response, the <code>options.waitForTrailers</code> option must be set\nin order to keep the <code>Http2Stream</code> open after the final <code>DATA</code> frame so that\ntrailers can be sent.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  stream.respond(undefined, { waitForTrailers: true });\n  stream.on('wantTrailers', () => {\n    stream.sendTrailers({ xyz: 'abc' });\n  });\n  stream.end('Hello World');\n});\n</code></pre>\n<p>The HTTP/1 specification forbids trailers from containing HTTP/2 pseudo-header\nfields (e.g. <code>':method'</code>, <code>':path'</code>, etc).</p>",
                  "type": "module",
                  "displayName": "`http2stream.sendTrailers(headers)`"
                }
              ],
              "type": "module",
              "displayName": "Class: `Http2Stream`"
            },
            {
              "textRaw": "Class: `ClientHttp2Stream`",
              "name": "class:_`clienthttp2stream`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Extends <a href=\"http2.html#http2_class_http2stream\" class=\"type\">&lt;Http2Stream&gt;</a></li>\n</ul>\n<p>The <code>ClientHttp2Stream</code> class is an extension of <code>Http2Stream</code> that is\nused exclusively on HTTP/2 Clients. <code>Http2Stream</code> instances on the client\nprovide events such as <code>'response'</code> and <code>'push'</code> that are only relevant on\nthe client.</p>",
              "modules": [
                {
                  "textRaw": "Event: `'continue'`",
                  "name": "event:_`'continue'`",
                  "meta": {
                    "added": [
                      "v8.5.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Emitted when the server sends a <code>100 Continue</code> status, usually because\nthe request contained <code>Expect: 100-continue</code>. This is an instruction that\nthe client should send the request body.</p>",
                  "type": "module",
                  "displayName": "Event: `'continue'`"
                },
                {
                  "textRaw": "Event: `'headers'`",
                  "name": "event:_`'headers'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'headers'</code> event is emitted when an additional block of headers is received\nfor a stream, such as when a block of <code>1xx</code> informational headers is received.\nThe listener callback is passed the <a href=\"#http2_headers_object\">HTTP/2 Headers Object</a> and flags\nassociated with the headers.</p>\n<pre><code class=\"language-js\">stream.on('headers', (headers, flags) => {\n  console.log(headers);\n});\n</code></pre>",
                  "type": "module",
                  "displayName": "Event: `'headers'`"
                },
                {
                  "textRaw": "Event: `'push'`",
                  "name": "event:_`'push'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'push'</code> event is emitted when response headers for a Server Push stream\nare received. The listener callback is passed the <a href=\"#http2_headers_object\">HTTP/2 Headers Object</a> and\nflags associated with the headers.</p>\n<pre><code class=\"language-js\">stream.on('push', (headers, flags) => {\n  console.log(headers);\n});\n</code></pre>",
                  "type": "module",
                  "displayName": "Event: `'push'`"
                },
                {
                  "textRaw": "Event: `'response'`",
                  "name": "event:_`'response'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'response'</code> event is emitted when a response <code>HEADERS</code> frame has been\nreceived for this stream from the connected HTTP/2 server. The listener is\ninvoked with two arguments: an <code>Object</code> containing the received\n<a href=\"#http2_headers_object\">HTTP/2 Headers Object</a>, and flags associated with the headers.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst client = http2.connect('https://localhost');\nconst req = client.request({ ':path': '/' });\nreq.on('response', (headers, flags) => {\n  console.log(headers[':status']);\n});\n</code></pre>",
                  "type": "module",
                  "displayName": "Event: `'response'`"
                }
              ],
              "type": "module",
              "displayName": "Class: `ClientHttp2Stream`"
            },
            {
              "textRaw": "Class: `ServerHttp2Stream`",
              "name": "class:_`serverhttp2stream`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Extends: <a href=\"http2.html#http2_class_http2stream\" class=\"type\">&lt;Http2Stream&gt;</a></li>\n</ul>\n<p>The <code>ServerHttp2Stream</code> class is an extension of <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a> that is\nused exclusively on HTTP/2 Servers. <code>Http2Stream</code> instances on the server\nprovide additional methods such as <code>http2stream.pushStream()</code> and\n<code>http2stream.respond()</code> that are only relevant on the server.</p>",
              "modules": [
                {
                  "textRaw": "`http2stream.additionalHeaders(headers)`",
                  "name": "`http2stream.additionalheaders(headers)`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>headers</code> <a href=\"http2.html#http2_headers_object\" class=\"type\">&lt;HTTP/2 Headers Object&gt;</a></li>\n</ul>\n<p>Sends an additional informational <code>HEADERS</code> frame to the connected HTTP/2 peer.</p>",
                  "type": "module",
                  "displayName": "`http2stream.additionalHeaders(headers)`"
                },
                {
                  "textRaw": "`http2stream.headersSent`",
                  "name": "`http2stream.headerssent`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>True if headers were sent, false otherwise (read-only).</p>",
                  "type": "module",
                  "displayName": "`http2stream.headersSent`"
                },
                {
                  "textRaw": "`http2stream.pushAllowed`",
                  "name": "`http2stream.pushallowed`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Read-only property mapped to the <code>SETTINGS_ENABLE_PUSH</code> flag of the remote\nclient's most recent <code>SETTINGS</code> frame. Will be <code>true</code> if the remote peer\naccepts push streams, <code>false</code> otherwise. Settings are the same for every\n<code>Http2Stream</code> in the same <code>Http2Session</code>.</p>",
                  "type": "module",
                  "displayName": "`http2stream.pushAllowed`"
                },
                {
                  "textRaw": "`http2stream.pushStream(headers[, options], callback)`",
                  "name": "`http2stream.pushstream(headers[,_options],_callback)`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>headers</code> <a href=\"http2.html#http2_headers_object\" class=\"type\">&lt;HTTP/2 Headers Object&gt;</a></li>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>exclusive</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code> and <code>parent</code> identifies a parent Stream,\nthe created stream is made the sole direct dependency of the parent, with\nall other existing dependents made a dependent of the newly created stream.\n<strong>Default:</strong> <code>false</code>.</li>\n<li><code>parent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the numeric identifier of a stream the newly\ncreated stream is dependent on.</li>\n</ul>\n</li>\n<li>\n<p><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Callback that is called once the push stream has been\ninitiated.</p>\n<ul>\n<li><code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li>\n<li><code>pushStream</code> <a href=\"http2.html#http2_class_serverhttp2stream\" class=\"type\">&lt;ServerHttp2Stream&gt;</a> The returned <code>pushStream</code> object.</li>\n<li><code>headers</code> <a href=\"http2.html#http2_headers_object\" class=\"type\">&lt;HTTP/2 Headers Object&gt;</a> Headers object the <code>pushStream</code> was\ninitiated with.</li>\n</ul>\n</li>\n</ul>\n<p>Initiates a push stream. The callback is invoked with the new <code>Http2Stream</code>\ninstance created for the push stream passed as the second argument, or an\n<code>Error</code> passed as the first argument.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  stream.respond({ ':status': 200 });\n  stream.pushStream({ ':path': '/' }, (err, pushStream, headers) => {\n    if (err) throw err;\n    pushStream.respond({ ':status': 200 });\n    pushStream.end('some pushed data');\n  });\n  stream.end('some data');\n});\n</code></pre>\n<p>Setting the weight of a push stream is not allowed in the <code>HEADERS</code> frame. Pass\na <code>weight</code> value to <code>http2stream.priority</code> with the <code>silent</code> option set to\n<code>true</code> to enable server-side bandwidth balancing between concurrent streams.</p>\n<p>Calling <code>http2stream.pushStream()</code> from within a pushed stream is not permitted\nand will throw an error.</p>",
                  "type": "module",
                  "displayName": "`http2stream.pushStream(headers[, options], callback)`"
                },
                {
                  "textRaw": "`http2stream.respond([headers[, options]])`",
                  "name": "`http2stream.respond([headers[,_options]])`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>headers</code> <a href=\"http2.html#http2_headers_object\" class=\"type\">&lt;HTTP/2 Headers Object&gt;</a></li>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>endStream</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Set to <code>true</code> to indicate that the response will not\ninclude payload data.</li>\n<li><code>waitForTrailers</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code>, the <code>Http2Stream</code> will emit the\n<code>'wantTrailers'</code> event after the final <code>DATA</code> frame has been sent.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  stream.respond({ ':status': 200 });\n  stream.end('some data');\n});\n</code></pre>\n<p>When the <code>options.waitForTrailers</code> option is set, the <code>'wantTrailers'</code> event\nwill be emitted immediately after queuing the last chunk of payload data to be\nsent. The <code>http2stream.sendTrailers()</code> method can then be used to sent trailing\nheader fields to the peer.</p>\n<p>When <code>options.waitForTrailers</code> is set, the <code>Http2Stream</code> will not automatically\nclose when the final <code>DATA</code> frame is transmitted. User code must call either\n<code>http2stream.sendTrailers()</code> or <code>http2stream.close()</code> to close the\n<code>Http2Stream</code>.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  stream.respond({ ':status': 200 }, { waitForTrailers: true });\n  stream.on('wantTrailers', () => {\n    stream.sendTrailers({ ABC: 'some value to send' });\n  });\n  stream.end('some data');\n});\n</code></pre>",
                  "type": "module",
                  "displayName": "`http2stream.respond([headers[, options]])`"
                },
                {
                  "textRaw": "`http2stream.respondWithFD(fd[, headers[, options]])`",
                  "name": "`http2stream.respondwithfd(fd[,_headers[,_options]])`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": [
                      {
                        "version": "v12.12.0",
                        "pr-url": "https://github.com/nodejs/node/pull/29876",
                        "description": "The `fd` option may now be a `FileHandle`."
                      },
                      {
                        "version": "v10.0.0",
                        "pr-url": "https://github.com/nodejs/node/pull/18936",
                        "description": "Any readable file descriptor, not necessarily for a regular file, is supported now."
                      }
                    ]
                  },
                  "desc": "<ul>\n<li><code>fd</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> | <a href=\"fs.html#fs_class_filehandle\" class=\"type\">&lt;FileHandle&gt;</a> A readable file descriptor.</li>\n<li><code>headers</code> <a href=\"http2.html#http2_headers_object\" class=\"type\">&lt;HTTP/2 Headers Object&gt;</a></li>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>statCheck</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li><code>waitForTrailers</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code>, the <code>Http2Stream</code> will emit the\n<code>'wantTrailers'</code> event after the final <code>DATA</code> frame has been sent.</li>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The offset position at which to begin reading.</li>\n<li><code>length</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The amount of data from the fd to send.</li>\n</ul>\n</li>\n</ul>\n<p>Initiates a response whose data is read from the given file descriptor. No\nvalidation is performed on the given file descriptor. If an error occurs while\nattempting to read data using the file descriptor, the <code>Http2Stream</code> will be\nclosed using an <code>RST_STREAM</code> frame using the standard <code>INTERNAL_ERROR</code> code.</p>\n<p>When used, the <code>Http2Stream</code> object's <code>Duplex</code> interface will be closed\nautomatically.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst fs = require('fs');\n\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  const fd = fs.openSync('/some/file', 'r');\n\n  const stat = fs.fstatSync(fd);\n  const headers = {\n    'content-length': stat.size,\n    'last-modified': stat.mtime.toUTCString(),\n    'content-type': 'text/plain'\n  };\n  stream.respondWithFD(fd, headers);\n  stream.on('close', () => fs.closeSync(fd));\n});\n</code></pre>\n<p>The optional <code>options.statCheck</code> function may be specified to give user code\nan opportunity to set additional content headers based on the <code>fs.Stat</code> details\nof the given fd. If the <code>statCheck</code> function is provided, the\n<code>http2stream.respondWithFD()</code> method will perform an <code>fs.fstat()</code> call to\ncollect details on the provided file descriptor.</p>\n<p>The <code>offset</code> and <code>length</code> options may be used to limit the response to a\nspecific range subset. This can be used, for instance, to support HTTP Range\nrequests.</p>\n<p>The file descriptor or <code>FileHandle</code> is not closed when the stream is closed,\nso it will need to be closed manually once it is no longer needed.\nUsing the same file descriptor concurrently for multiple streams\nis not supported and may result in data loss. Re-using a file descriptor\nafter a stream has finished is supported.</p>\n<p>When the <code>options.waitForTrailers</code> option is set, the <code>'wantTrailers'</code> event\nwill be emitted immediately after queuing the last chunk of payload data to be\nsent. The <code>http2stream.sendTrailers()</code> method can then be used to sent trailing\nheader fields to the peer.</p>\n<p>When <code>options.waitForTrailers</code> is set, the <code>Http2Stream</code> will not automatically\nclose when the final <code>DATA</code> frame is transmitted. User code <em>must</em> call either\n<code>http2stream.sendTrailers()</code> or <code>http2stream.close()</code> to close the\n<code>Http2Stream</code>.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst fs = require('fs');\n\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  const fd = fs.openSync('/some/file', 'r');\n\n  const stat = fs.fstatSync(fd);\n  const headers = {\n    'content-length': stat.size,\n    'last-modified': stat.mtime.toUTCString(),\n    'content-type': 'text/plain'\n  };\n  stream.respondWithFD(fd, headers, { waitForTrailers: true });\n  stream.on('wantTrailers', () => {\n    stream.sendTrailers({ ABC: 'some value to send' });\n  });\n\n  stream.on('close', () => fs.closeSync(fd));\n});\n</code></pre>",
                  "type": "module",
                  "displayName": "`http2stream.respondWithFD(fd[, headers[, options]])`"
                },
                {
                  "textRaw": "`http2stream.respondWithFile(path[, headers[, options]])`",
                  "name": "`http2stream.respondwithfile(path[,_headers[,_options]])`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": [
                      {
                        "version": "v10.0.0",
                        "pr-url": "https://github.com/nodejs/node/pull/18936",
                        "description": "Any readable file, not necessarily a regular file, is supported now."
                      }
                    ]
                  },
                  "desc": "<ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"url.html#url_the_whatwg_url_api\" class=\"type\">&lt;URL&gt;</a></li>\n<li><code>headers</code> <a href=\"http2.html#http2_headers_object\" class=\"type\">&lt;HTTP/2 Headers Object&gt;</a></li>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>statCheck</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li><code>onError</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Callback function invoked in the case of an\nerror before send.</li>\n<li><code>waitForTrailers</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> When <code>true</code>, the <code>Http2Stream</code> will emit the\n<code>'wantTrailers'</code> event after the final <code>DATA</code> frame has been sent.</li>\n<li><code>offset</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The offset position at which to begin reading.</li>\n<li><code>length</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The amount of data from the fd to send.</li>\n</ul>\n</li>\n</ul>\n<p>Sends a regular file as the response. The <code>path</code> must specify a regular file\nor an <code>'error'</code> event will be emitted on the <code>Http2Stream</code> object.</p>\n<p>When used, the <code>Http2Stream</code> object's <code>Duplex</code> interface will be closed\nautomatically.</p>\n<p>The optional <code>options.statCheck</code> function may be specified to give user code\nan opportunity to set additional content headers based on the <code>fs.Stat</code> details\nof the given file:</p>\n<p>If an error occurs while attempting to read the file data, the <code>Http2Stream</code>\nwill be closed using an <code>RST_STREAM</code> frame using the standard <code>INTERNAL_ERROR</code>\ncode. If the <code>onError</code> callback is defined, then it will be called. Otherwise\nthe stream will be destroyed.</p>\n<p>Example using a file path:</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  function statCheck(stat, headers) {\n    headers['last-modified'] = stat.mtime.toUTCString();\n  }\n\n  function onError(err) {\n    if (err.code === 'ENOENT') {\n      stream.respond({ ':status': 404 });\n    } else {\n      stream.respond({ ':status': 500 });\n    }\n    stream.end();\n  }\n\n  stream.respondWithFile('/some/file',\n                         { 'content-type': 'text/plain' },\n                         { statCheck, onError });\n});\n</code></pre>\n<p>The <code>options.statCheck</code> function may also be used to cancel the send operation\nby returning <code>false</code>. For instance, a conditional request may check the stat\nresults to determine if the file has been modified to return an appropriate\n<code>304</code> response:</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  function statCheck(stat, headers) {\n    // Check the stat here...\n    stream.respond({ ':status': 304 });\n    return false; // Cancel the send operation\n  }\n  stream.respondWithFile('/some/file',\n                         { 'content-type': 'text/plain' },\n                         { statCheck });\n});\n</code></pre>\n<p>The <code>content-length</code> header field will be automatically set.</p>\n<p>The <code>offset</code> and <code>length</code> options may be used to limit the response to a\nspecific range subset. This can be used, for instance, to support HTTP Range\nrequests.</p>\n<p>The <code>options.onError</code> function may also be used to handle all the errors\nthat could happen before the delivery of the file is initiated. The\ndefault behavior is to destroy the stream.</p>\n<p>When the <code>options.waitForTrailers</code> option is set, the <code>'wantTrailers'</code> event\nwill be emitted immediately after queuing the last chunk of payload data to be\nsent. The <code>http2stream.sendTrailers()</code> method can then be used to sent trailing\nheader fields to the peer.</p>\n<p>When <code>options.waitForTrailers</code> is set, the <code>Http2Stream</code> will not automatically\nclose when the final <code>DATA</code> frame is transmitted. User code must call either\n<code>http2stream.sendTrailers()</code> or <code>http2stream.close()</code> to close the\n<code>Http2Stream</code>.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  stream.respondWithFile('/some/file',\n                         { 'content-type': 'text/plain' },\n                         { waitForTrailers: true });\n  stream.on('wantTrailers', () => {\n    stream.sendTrailers({ ABC: 'some value to send' });\n  });\n});\n</code></pre>",
                  "type": "module",
                  "displayName": "`http2stream.respondWithFile(path[, headers[, options]])`"
                }
              ],
              "type": "module",
              "displayName": "Class: `ServerHttp2Stream`"
            },
            {
              "textRaw": "Class: `Http2Server`",
              "name": "class:_`http2server`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Extends: <a href=\"net.html#net_class_net_server\" class=\"type\">&lt;net.Server&gt;</a></li>\n</ul>\n<p>Instances of <code>Http2Server</code> are created using the <code>http2.createServer()</code>\nfunction. The <code>Http2Server</code> class is not exported directly by the <code>http2</code>\nmodule.</p>",
              "modules": [
                {
                  "textRaw": "Event: `'checkContinue'`",
                  "name": "event:_`'checkcontinue'`",
                  "meta": {
                    "added": [
                      "v8.5.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>request</code> <a href=\"http2.html#http2_class_http2_http2serverrequest\" class=\"type\">&lt;http2.Http2ServerRequest&gt;</a></li>\n<li><code>response</code> <a href=\"http2.html#http2_class_http2_http2serverresponse\" class=\"type\">&lt;http2.Http2ServerResponse&gt;</a></li>\n</ul>\n<p>If a <a href=\"#http2_event_request\"><code>'request'</code></a> listener is registered or <a href=\"#http2_http2_createserver_options_onrequesthandler\"><code>http2.createServer()</code></a> is\nsupplied a callback function, the <code>'checkContinue'</code> event is emitted each time\na request with an HTTP <code>Expect: 100-continue</code> is received. If this event is\nnot listened for, the server will automatically respond with a status\n<code>100 Continue</code> as appropriate.</p>\n<p>Handling this event involves calling <a href=\"#http2_response_writecontinue\"><code>response.writeContinue()</code></a> if the\nclient should continue to send the request body, or generating an appropriate\nHTTP response (e.g. 400 Bad Request) if the client should not continue to send\nthe request body.</p>\n<p>When this event is emitted and handled, the <a href=\"#http2_event_request\"><code>'request'</code></a> event will\nnot be emitted.</p>",
                  "type": "module",
                  "displayName": "Event: `'checkContinue'`"
                },
                {
                  "textRaw": "Event: `'request'`",
                  "name": "event:_`'request'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>request</code> <a href=\"http2.html#http2_class_http2_http2serverrequest\" class=\"type\">&lt;http2.Http2ServerRequest&gt;</a></li>\n<li><code>response</code> <a href=\"http2.html#http2_class_http2_http2serverresponse\" class=\"type\">&lt;http2.Http2ServerResponse&gt;</a></li>\n</ul>\n<p>Emitted each time there is a request. There may be multiple requests\nper session. See the <a href=\"#http2_compatibility_api\">Compatibility API</a>.</p>",
                  "type": "module",
                  "displayName": "Event: `'request'`"
                },
                {
                  "textRaw": "Event: `'session'`",
                  "name": "event:_`'session'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'session'</code> event is emitted when a new <code>Http2Session</code> is created by the\n<code>Http2Server</code>.</p>",
                  "type": "module",
                  "displayName": "Event: `'session'`"
                },
                {
                  "textRaw": "Event: `'sessionError'`",
                  "name": "event:_`'sessionerror'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'sessionError'</code> event is emitted when an <code>'error'</code> event is emitted by\nan <code>Http2Session</code> object associated with the <code>Http2Server</code>.</p>",
                  "type": "module",
                  "displayName": "Event: `'sessionError'`"
                },
                {
                  "textRaw": "Event: `'stream'`",
                  "name": "event:_`'stream'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'stream'</code> event is emitted when a <code>'stream'</code> event has been emitted by\nan <code>Http2Session</code> associated with the server.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst {\n  HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_PATH,\n  HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_CONTENT_TYPE\n} = http2.constants;\n\nconst server = http2.createServer();\nserver.on('stream', (stream, headers, flags) => {\n  const method = headers[HTTP2_HEADER_METHOD];\n  const path = headers[HTTP2_HEADER_PATH];\n  // ...\n  stream.respond({\n    [HTTP2_HEADER_STATUS]: 200,\n    [HTTP2_HEADER_CONTENT_TYPE]: 'text/plain'\n  });\n  stream.write('hello ');\n  stream.end('world');\n});\n</code></pre>",
                  "type": "module",
                  "displayName": "Event: `'stream'`"
                },
                {
                  "textRaw": "Event: `'timeout'`",
                  "name": "event:_`'timeout'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'timeout'</code> event is emitted when there is no activity on the Server for\na given number of milliseconds set using <code>http2server.setTimeout()</code>.\n<strong>Default:</strong> 2 minutes.</p>\n<p>To change the default timeout use the <a href=\"cli.html#cli_http_server_default_timeout_milliseconds\"><code>--http-server-default-timeout</code></a>\nflag.</p>",
                  "type": "module",
                  "displayName": "Event: `'timeout'`"
                },
                {
                  "textRaw": "`server.close([callback])`",
                  "name": "`server.close([callback])`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Stops the server from establishing new sessions. This does not prevent new\nrequest streams from being created due to the persistent nature of HTTP/2\nsessions. To gracefully shut down the server, call <a href=\"#http2_http2session_close_callback\"><code>http2session.close()</code></a> on\nall active sessions.</p>\n<p>If <code>callback</code> is provided, it is not invoked until all active sessions have been\nclosed, although the server has already stopped allowing new sessions. See\n<a href=\"net.html#net_server_close_callback\"><code>net.Server.close()</code></a> for more details.</p>",
                  "type": "module",
                  "displayName": "`server.close([callback])`"
                },
                {
                  "textRaw": "`server.setTimeout([msecs][, callback])`",
                  "name": "`server.settimeout([msecs][,_callback])`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>msecs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> <strong>Default:</strong> <code>120000</code> (2 minutes)</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li>Returns: <a href=\"http2.html#http2_class_http2server\" class=\"type\">&lt;Http2Server&gt;</a></li>\n</ul>\n<p>Used to set the timeout value for http2 server requests,\nand sets a callback function that is called when there is no activity\non the <code>Http2Server</code> after <code>msecs</code> milliseconds.</p>\n<p>The given callback is registered as a listener on the <code>'timeout'</code> event.</p>\n<p>In case of no callback function were assigned, a new <code>ERR_INVALID_CALLBACK</code>\nerror will be thrown.</p>\n<p>To change the default timeout use the <a href=\"cli.html#cli_http_server_default_timeout_milliseconds\"><code>--http-server-default-timeout</code></a>\nflag.</p>",
                  "type": "module",
                  "displayName": "`server.setTimeout([msecs][, callback])`"
                }
              ],
              "type": "module",
              "displayName": "Class: `Http2Server`"
            },
            {
              "textRaw": "Class: `Http2SecureServer`",
              "name": "class:_`http2secureserver`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Extends: <a href=\"tls.html#tls_class_tls_server\" class=\"type\">&lt;tls.Server&gt;</a></li>\n</ul>\n<p>Instances of <code>Http2SecureServer</code> are created using the\n<code>http2.createSecureServer()</code> function. The <code>Http2SecureServer</code> class is not\nexported directly by the <code>http2</code> module.</p>",
              "modules": [
                {
                  "textRaw": "Event: `'checkContinue'`",
                  "name": "event:_`'checkcontinue'`",
                  "meta": {
                    "added": [
                      "v8.5.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>request</code> <a href=\"http2.html#http2_class_http2_http2serverrequest\" class=\"type\">&lt;http2.Http2ServerRequest&gt;</a></li>\n<li><code>response</code> <a href=\"http2.html#http2_class_http2_http2serverresponse\" class=\"type\">&lt;http2.Http2ServerResponse&gt;</a></li>\n</ul>\n<p>If a <a href=\"#http2_event_request\"><code>'request'</code></a> listener is registered or <a href=\"#http2_http2_createsecureserver_options_onrequesthandler\"><code>http2.createSecureServer()</code></a>\nis supplied a callback function, the <code>'checkContinue'</code> event is emitted each\ntime a request with an HTTP <code>Expect: 100-continue</code> is received. If this event\nis not listened for, the server will automatically respond with a status\n<code>100 Continue</code> as appropriate.</p>\n<p>Handling this event involves calling <a href=\"#http2_response_writecontinue\"><code>response.writeContinue()</code></a> if the\nclient should continue to send the request body, or generating an appropriate\nHTTP response (e.g. 400 Bad Request) if the client should not continue to send\nthe request body.</p>\n<p>When this event is emitted and handled, the <a href=\"#http2_event_request\"><code>'request'</code></a> event will\nnot be emitted.</p>",
                  "type": "module",
                  "displayName": "Event: `'checkContinue'`"
                },
                {
                  "textRaw": "Event: `'request'`",
                  "name": "event:_`'request'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>request</code> <a href=\"http2.html#http2_class_http2_http2serverrequest\" class=\"type\">&lt;http2.Http2ServerRequest&gt;</a></li>\n<li><code>response</code> <a href=\"http2.html#http2_class_http2_http2serverresponse\" class=\"type\">&lt;http2.Http2ServerResponse&gt;</a></li>\n</ul>\n<p>Emitted each time there is a request. There may be multiple requests\nper session. See the <a href=\"#http2_compatibility_api\">Compatibility API</a>.</p>",
                  "type": "module",
                  "displayName": "Event: `'request'`"
                },
                {
                  "textRaw": "Event: `'session'`",
                  "name": "event:_`'session'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'session'</code> event is emitted when a new <code>Http2Session</code> is created by the\n<code>Http2SecureServer</code>.</p>",
                  "type": "module",
                  "displayName": "Event: `'session'`"
                },
                {
                  "textRaw": "Event: `'sessionError'`",
                  "name": "event:_`'sessionerror'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'sessionError'</code> event is emitted when an <code>'error'</code> event is emitted by\nan <code>Http2Session</code> object associated with the <code>Http2SecureServer</code>.</p>",
                  "type": "module",
                  "displayName": "Event: `'sessionError'`"
                },
                {
                  "textRaw": "Event: `'stream'`",
                  "name": "event:_`'stream'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'stream'</code> event is emitted when a <code>'stream'</code> event has been emitted by\nan <code>Http2Session</code> associated with the server.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst {\n  HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_PATH,\n  HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_CONTENT_TYPE\n} = http2.constants;\n\nconst options = getOptionsSomehow();\n\nconst server = http2.createSecureServer(options);\nserver.on('stream', (stream, headers, flags) => {\n  const method = headers[HTTP2_HEADER_METHOD];\n  const path = headers[HTTP2_HEADER_PATH];\n  // ...\n  stream.respond({\n    [HTTP2_HEADER_STATUS]: 200,\n    [HTTP2_HEADER_CONTENT_TYPE]: 'text/plain'\n  });\n  stream.write('hello ');\n  stream.end('world');\n});\n</code></pre>",
                  "type": "module",
                  "displayName": "Event: `'stream'`"
                },
                {
                  "textRaw": "Event: `'timeout'`",
                  "name": "event:_`'timeout'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'timeout'</code> event is emitted when there is no activity on the Server for\na given number of milliseconds set using <code>http2secureServer.setTimeout()</code>.\n<strong>Default:</strong> 2 minutes.</p>",
                  "type": "module",
                  "displayName": "Event: `'timeout'`"
                },
                {
                  "textRaw": "Event: `'unknownProtocol'`",
                  "name": "event:_`'unknownprotocol'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'unknownProtocol'</code> event is emitted when a connecting client fails to\nnegotiate an allowed protocol (i.e. HTTP/2 or HTTP/1.1). The event handler\nreceives the socket for handling. If no listener is registered for this event,\nthe connection is terminated. See the <a href=\"#http2_compatibility_api\">Compatibility API</a>.</p>",
                  "type": "module",
                  "displayName": "Event: `'unknownProtocol'`"
                },
                {
                  "textRaw": "`server.close([callback])`",
                  "name": "`server.close([callback])`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n</ul>\n<p>Stops the server from establishing new sessions. This does not prevent new\nrequest streams from being created due to the persistent nature of HTTP/2\nsessions. To gracefully shut down the server, call <a href=\"#http2_http2session_close_callback\"><code>http2session.close()</code></a> on\nall active sessions.</p>\n<p>If <code>callback</code> is provided, it is not invoked until all active sessions have been\nclosed, although the server has already stopped allowing new sessions. See\n<a href=\"tls.html#tls_server_close_callback\"><code>tls.Server.close()</code></a> for more details.</p>",
                  "type": "module",
                  "displayName": "`server.close([callback])`"
                },
                {
                  "textRaw": "`server.setTimeout([msecs][, callback])`",
                  "name": "`server.settimeout([msecs][,_callback])`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>msecs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> <strong>Default:</strong> <code>120000</code> (2 minutes)</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li>Returns: <a href=\"http2.html#http2_class_http2secureserver\" class=\"type\">&lt;Http2SecureServer&gt;</a></li>\n</ul>\n<p>Used to set the timeout value for http2 secure server requests,\nand sets a callback function that is called when there is no activity\non the <code>Http2SecureServer</code> after <code>msecs</code> milliseconds.</p>\n<p>The given callback is registered as a listener on the <code>'timeout'</code> event.</p>\n<p>In case of no callback function were assigned, a new <code>ERR_INVALID_CALLBACK</code>\nerror will be thrown.</p>",
                  "type": "module",
                  "displayName": "`server.setTimeout([msecs][, callback])`"
                }
              ],
              "type": "module",
              "displayName": "Class: `Http2SecureServer`"
            },
            {
              "textRaw": "`http2.createServer(options[, onRequestHandler])`",
              "name": "`http2.createserver(options[,_onrequesthandler])`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": [
                  {
                    "version": "v12.16.0",
                    "pr-url": "https://github.com/nodejs/node/pull/30534",
                    "description": "Added `maxSessionRejectedStreams` option with a default of 100."
                  },
                  {
                    "version": "v12.16.0",
                    "pr-url": "https://github.com/nodejs/node/pull/30534",
                    "description": "Added `maxSessionInvalidFrames` option with a default of 1000."
                  },
                  {
                    "version": "v12.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/27782",
                    "description": "The `options` parameter now supports `net.createServer()` options."
                  },
                  {
                    "version": "v8.9.3",
                    "pr-url": "https://github.com/nodejs/node/pull/17105",
                    "description": "Added the `maxOutstandingPings` option with a default limit of 10."
                  },
                  {
                    "version": "v8.9.3",
                    "pr-url": "https://github.com/nodejs/node/pull/16676",
                    "description": "Added the `maxHeaderListPairs` option with a default limit of 128 header pairs."
                  },
                  {
                    "version": "v9.6.0",
                    "pr-url": "https://github.com/nodejs/node/pull/15752",
                    "description": "Added the `Http1IncomingMessage` and `Http1ServerResponse` option."
                  }
                ]
              },
              "desc": "<ul>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>maxDeflateDynamicTableSize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum dynamic table size\nfor deflating header fields. <strong>Default:</strong> <code>4Kib</code>.</li>\n<li><code>maxSessionMemory</code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum memory that the <code>Http2Session</code>\nis permitted to use. The value is expressed in terms of number of megabytes,\ne.g. <code>1</code> equal 1 megabyte. The minimum value allowed is <code>1</code>.\nThis is a credit based limit, existing <code>Http2Stream</code>s may cause this\nlimit to be exceeded, but new <code>Http2Stream</code> instances will be rejected\nwhile this limit is exceeded. The current number of <code>Http2Stream</code> sessions,\nthe current memory use of the header compression tables, current data\nqueued to be sent, and unacknowledged <code>PING</code> and <code>SETTINGS</code> frames are all\ncounted towards the current limit. <strong>Default:</strong> <code>10</code>.</li>\n<li><code>maxHeaderListPairs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum number of header entries.\nThe minimum value is <code>4</code>. <strong>Default:</strong> <code>128</code>.</li>\n<li><code>maxOutstandingPings</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum number of outstanding,\nunacknowledged pings. <strong>Default:</strong> <code>10</code>.</li>\n<li><code>maxSendHeaderBlockLength</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum allowed size for a\nserialized, compressed block of headers. Attempts to send headers that\nexceed this limit will result in a <code>'frameError'</code> event being emitted\nand the stream being closed and destroyed.</li>\n<li>\n<p><code>paddingStrategy</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The strategy used for determining the amount of\npadding to use for <code>HEADERS</code> and <code>DATA</code> frames. <strong>Default:</strong>\n<code>http2.constants.PADDING_STRATEGY_NONE</code>. Value may be one of:</p>\n<ul>\n<li><code>http2.constants.PADDING_STRATEGY_NONE</code>: Specifies that no padding is\nto be applied.</li>\n<li><code>http2.constants.PADDING_STRATEGY_MAX</code>: Specifies that the maximum\namount of padding, as determined by the internal implementation, is to\nbe applied.</li>\n<li><code>http2.constants.PADDING_STRATEGY_CALLBACK</code>: Specifies that the user\nprovided <code>options.selectPadding()</code> callback is to be used to determine\nthe amount of padding.</li>\n<li><code>http2.constants.PADDING_STRATEGY_ALIGNED</code>: Will <em>attempt</em> to apply\nenough padding to ensure that the total frame length, including the\n9-byte header, is a multiple of 8. For each frame, however, there is a\nmaximum allowed number of padding bytes that is determined by current\nflow control state and settings. If this maximum is less than the\ncalculated amount needed to ensure alignment, the maximum will be used\nand the total frame length will <em>not</em> necessarily be aligned at 8 bytes.</li>\n</ul>\n</li>\n<li><code>peerMaxConcurrentStreams</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum number of concurrent\nstreams for the remote peer as if a <code>SETTINGS</code> frame had been received. Will\nbe overridden if the remote peer sets its own value for\n<code>maxConcurrentStreams</code>. <strong>Default:</strong> <code>100</code>.</li>\n<li><code>maxSessionInvalidFrames</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Sets the maximum number of invalid\nframes that will be tolerated before the session is closed.\n<strong>Default:</strong> <code>1000</code>.</li>\n<li><code>maxSessionRejectedStreams</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Sets the maximum number of rejected\nupon creation streams that will be tolerated before the session is closed.\nEach rejection is associated with an <code>NGHTTP2_ENHANCE_YOUR_CALM</code>\nerror that should tell the peer to not open any more streams, continuing\nto open streams is therefore regarded as a sign of a misbehaving peer.\n<strong>Default:</strong> <code>100</code>.</li>\n<li><code>selectPadding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> When <code>options.paddingStrategy</code> is equal to\n<code>http2.constants.PADDING_STRATEGY_CALLBACK</code>, provides the callback function\nused to determine the padding. See <a href=\"#http2_using_options_selectpadding\">Using <code>options.selectPadding()</code></a>.</li>\n<li><code>settings</code> <a href=\"http2.html#http2_settings_object\" class=\"type\">&lt;HTTP/2 Settings Object&gt;</a> The initial settings to send to the\nremote peer upon connection.</li>\n<li><code>Http1IncomingMessage</code> <a href=\"http.html#http_class_http_incomingmessage\" class=\"type\">&lt;http.IncomingMessage&gt;</a> Specifies the\n<code>IncomingMessage</code> class to used for HTTP/1 fallback. Useful for extending\nthe original <code>http.IncomingMessage</code>. <strong>Default:</strong> <code>http.IncomingMessage</code>.</li>\n<li><code>Http1ServerResponse</code> <a href=\"http.html#http_class_http_serverresponse\" class=\"type\">&lt;http.ServerResponse&gt;</a> Specifies the <code>ServerResponse</code>\nclass to used for HTTP/1 fallback. Useful for extending the original\n<code>http.ServerResponse</code>. <strong>Default:</strong> <code>http.ServerResponse</code>.</li>\n<li><code>Http2ServerRequest</code> <a href=\"http2.html#http2_class_http2_http2serverrequest\" class=\"type\">&lt;http2.Http2ServerRequest&gt;</a> Specifies the\n<code>Http2ServerRequest</code> class to use.\nUseful for extending the original <code>Http2ServerRequest</code>.\n<strong>Default:</strong> <code>Http2ServerRequest</code>.</li>\n<li><code>Http2ServerResponse</code> <a href=\"http2.html#http2_class_http2_http2serverresponse\" class=\"type\">&lt;http2.Http2ServerResponse&gt;</a> Specifies the\n<code>Http2ServerResponse</code> class to use.\nUseful for extending the original <code>Http2ServerResponse</code>.\n<strong>Default:</strong> <code>Http2ServerResponse</code>.</li>\n<li>...: Any <a href=\"net.html#net_net_createserver_options_connectionlistener\"><code>net.createServer()</code></a> option can be provided.</li>\n</ul>\n</li>\n<li><code>onRequestHandler</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> See <a href=\"#http2_compatibility_api\">Compatibility API</a></li>\n<li>Returns: <a href=\"http2.html#http2_class_http2server\" class=\"type\">&lt;Http2Server&gt;</a></li>\n</ul>\n<p>Returns a <code>net.Server</code> instance that creates and manages <code>Http2Session</code>\ninstances.</p>\n<p>Since there are no browsers known that support\n<a href=\"https://http2.github.io/faq/#does-http2-require-encryption\">unencrypted HTTP/2</a>, the use of\n<a href=\"#http2_http2_createsecureserver_options_onrequesthandler\"><code>http2.createSecureServer()</code></a> is necessary when communicating\nwith browser clients.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\n\n// Create an unencrypted HTTP/2 server.\n// Since there are no browsers known that support\n// unencrypted HTTP/2, the use of `http2.createSecureServer()`\n// is necessary when communicating with browser clients.\nconst server = http2.createServer();\n\nserver.on('stream', (stream, headers) => {\n  stream.respond({\n    'content-type': 'text/html',\n    ':status': 200\n  });\n  stream.end('&#x3C;h1>Hello World&#x3C;/h1>');\n});\n\nserver.listen(80);\n</code></pre>",
              "type": "module",
              "displayName": "`http2.createServer(options[, onRequestHandler])`"
            },
            {
              "textRaw": "`http2.createSecureServer(options[, onRequestHandler])`",
              "name": "`http2.createsecureserver(options[,_onrequesthandler])`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": [
                  {
                    "version": "v12.16.0",
                    "pr-url": "https://github.com/nodejs/node/pull/30534",
                    "description": "Added `maxSessionRejectedStreams` option with a default of 100."
                  },
                  {
                    "version": "v12.16.0",
                    "pr-url": "https://github.com/nodejs/node/pull/30534",
                    "description": "Added `maxSessionInvalidFrames` option with a default of 1000."
                  },
                  {
                    "version": "v10.12.0",
                    "pr-url": "https://github.com/nodejs/node/pull/22956",
                    "description": "Added the `origins` option to automatically send an `ORIGIN` frame on `Http2Session` startup."
                  },
                  {
                    "version": "v8.9.3",
                    "pr-url": "https://github.com/nodejs/node/pull/17105",
                    "description": "Added the `maxOutstandingPings` option with a default limit of 10."
                  },
                  {
                    "version": "v8.9.3",
                    "pr-url": "https://github.com/nodejs/node/pull/16676",
                    "description": "Added the `maxHeaderListPairs` option with a default limit of 128 header pairs."
                  }
                ]
              },
              "desc": "<ul>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>allowHTTP1</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Incoming client connections that do not support\nHTTP/2 will be downgraded to HTTP/1.x when set to <code>true</code>.\nSee the <a href=\"#http2_event_unknownprotocol\"><code>'unknownProtocol'</code></a> event. See <a href=\"#http2_alpn_negotiation\">ALPN negotiation</a>.\n<strong>Default:</strong> <code>false</code>.</li>\n<li><code>maxDeflateDynamicTableSize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum dynamic table size\nfor deflating header fields. <strong>Default:</strong> <code>4Kib</code>.</li>\n<li><code>maxSessionMemory</code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum memory that the <code>Http2Session</code>\nis permitted to use. The value is expressed in terms of number of megabytes,\ne.g. <code>1</code> equal 1 megabyte. The minimum value allowed is <code>1</code>. This is a\ncredit based limit, existing <code>Http2Stream</code>s may cause this\nlimit to be exceeded, but new <code>Http2Stream</code> instances will be rejected\nwhile this limit is exceeded. The current number of <code>Http2Stream</code> sessions,\nthe current memory use of the header compression tables, current data\nqueued to be sent, and unacknowledged <code>PING</code> and <code>SETTINGS</code> frames are all\ncounted towards the current limit. <strong>Default:</strong> <code>10</code>.</li>\n<li><code>maxHeaderListPairs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum number of header entries.\nThe minimum value is <code>4</code>. <strong>Default:</strong> <code>128</code>.</li>\n<li><code>maxOutstandingPings</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum number of outstanding,\nunacknowledged pings. <strong>Default:</strong> <code>10</code>.</li>\n<li><code>maxSendHeaderBlockLength</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum allowed size for a\nserialized, compressed block of headers. Attempts to send headers that\nexceed this limit will result in a <code>'frameError'</code> event being emitted\nand the stream being closed and destroyed.</li>\n<li>\n<p><code>paddingStrategy</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Strategy used for determining the amount of\npadding to use for <code>HEADERS</code> and <code>DATA</code> frames. <strong>Default:</strong>\n<code>http2.constants.PADDING_STRATEGY_NONE</code>. Value may be one of:</p>\n<ul>\n<li><code>http2.constants.PADDING_STRATEGY_NONE</code>: Specifies that no padding is\nto be applied.</li>\n<li><code>http2.constants.PADDING_STRATEGY_MAX</code>: Specifies that the maximum\namount of padding, as determined by the internal implementation, is to\nbe applied.</li>\n<li><code>http2.constants.PADDING_STRATEGY_CALLBACK</code>: Specifies that the user\nprovided <code>options.selectPadding()</code> callback is to be used to determine\nthe amount of padding.</li>\n<li><code>http2.constants.PADDING_STRATEGY_ALIGNED</code>: Will <em>attempt</em> to apply\nenough padding to ensure that the total frame length, including the\n9-byte header, is a multiple of 8. For each frame, however, there is a\nmaximum allowed number of padding bytes that is determined by current\nflow control state and settings. If this maximum is less than the\ncalculated amount needed to ensure alignment, the maximum will be used\nand the total frame length will <em>not</em> necessarily be aligned at 8 bytes.</li>\n</ul>\n</li>\n<li><code>peerMaxConcurrentStreams</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum number of concurrent\nstreams for the remote peer as if a <code>SETTINGS</code> frame had been received. Will\nbe overridden if the remote peer sets its own value for\n<code>maxConcurrentStreams</code>. <strong>Default:</strong> <code>100</code>.</li>\n<li><code>maxSessionInvalidFrames</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Sets the maximum number of invalid\nframes that will be tolerated before the session is closed.\n<strong>Default:</strong> <code>1000</code>.</li>\n<li><code>maxSessionRejectedStreams</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;integer&gt;</a> Sets the maximum number of rejected\nupon creation streams that will be tolerated before the session is closed.\nEach rejection is associated with an <code>NGHTTP2_ENHANCE_YOUR_CALM</code>\nerror that should tell the peer to not open any more streams, continuing\nto open streams is therefore regarded as a sign of a misbehaving peer.\n<strong>Default:</strong> <code>100</code>.</li>\n<li><code>selectPadding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> When <code>options.paddingStrategy</code> is equal to\n<code>http2.constants.PADDING_STRATEGY_CALLBACK</code>, provides the callback function\nused to determine the padding. See <a href=\"#http2_using_options_selectpadding\">Using <code>options.selectPadding()</code></a>.</li>\n<li><code>settings</code> <a href=\"http2.html#http2_settings_object\" class=\"type\">&lt;HTTP/2 Settings Object&gt;</a> The initial settings to send to the\nremote peer upon connection.</li>\n<li>...: Any <a href=\"tls.html#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a> options can be provided. For\nservers, the identity options (<code>pfx</code> or <code>key</code>/<code>cert</code>) are usually required.</li>\n<li><code>origins</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> An array of origin strings to send within an <code>ORIGIN</code>\nframe immediately following creation of a new server <code>Http2Session</code>.</li>\n</ul>\n</li>\n<li><code>onRequestHandler</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> See <a href=\"#http2_compatibility_api\">Compatibility API</a></li>\n<li>Returns: <a href=\"http2.html#http2_class_http2secureserver\" class=\"type\">&lt;Http2SecureServer&gt;</a></li>\n</ul>\n<p>Returns a <code>tls.Server</code> instance that creates and manages <code>Http2Session</code>\ninstances.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('server-key.pem'),\n  cert: fs.readFileSync('server-cert.pem')\n};\n\n// Create a secure HTTP/2 server\nconst server = http2.createSecureServer(options);\n\nserver.on('stream', (stream, headers) => {\n  stream.respond({\n    'content-type': 'text/html',\n    ':status': 200\n  });\n  stream.end('&#x3C;h1>Hello World&#x3C;/h1>');\n});\n\nserver.listen(80);\n</code></pre>",
              "type": "module",
              "displayName": "`http2.createSecureServer(options[, onRequestHandler])`"
            },
            {
              "textRaw": "`http2.connect(authority[, options][, listener])`",
              "name": "`http2.connect(authority[,_options][,_listener])`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": [
                  {
                    "version": "v8.9.3",
                    "pr-url": "https://github.com/nodejs/node/pull/17105",
                    "description": "Added the `maxOutstandingPings` option with a default limit of 10."
                  },
                  {
                    "version": "v8.9.3",
                    "pr-url": "https://github.com/nodejs/node/pull/16676",
                    "description": "Added the `maxHeaderListPairs` option with a default limit of 128 header pairs."
                  }
                ]
              },
              "desc": "<ul>\n<li><code>authority</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"url.html#url_the_whatwg_url_api\" class=\"type\">&lt;URL&gt;</a></li>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>maxDeflateDynamicTableSize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum dynamic table size\nfor deflating header fields. <strong>Default:</strong> <code>4Kib</code>.</li>\n<li><code>maxSessionMemory</code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum memory that the <code>Http2Session</code>\nis permitted to use. The value is expressed in terms of number of megabytes,\ne.g. <code>1</code> equal 1 megabyte. The minimum value allowed is <code>1</code>.\nThis is a credit based limit, existing <code>Http2Stream</code>s may cause this\nlimit to be exceeded, but new <code>Http2Stream</code> instances will be rejected\nwhile this limit is exceeded. The current number of <code>Http2Stream</code> sessions,\nthe current memory use of the header compression tables, current data\nqueued to be sent, and unacknowledged <code>PING</code> and <code>SETTINGS</code> frames are all\ncounted towards the current limit. <strong>Default:</strong> <code>10</code>.</li>\n<li><code>maxHeaderListPairs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum number of header entries.\nThe minimum value is <code>1</code>. <strong>Default:</strong> <code>128</code>.</li>\n<li><code>maxOutstandingPings</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum number of outstanding,\nunacknowledged pings. <strong>Default:</strong> <code>10</code>.</li>\n<li><code>maxReservedRemoteStreams</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum number of reserved push\nstreams the client will accept at any given time. Once the current number of\ncurrently reserved push streams exceeds reaches this limit, new push streams\nsent by the server will be automatically rejected. The minimum allowed value\nis 0. The maximum allowed value is 2<sup>32</sup>-1. A negative value sets\nthis option to the maximum allowed value. <strong>Default:</strong> <code>200</code>.</li>\n<li><code>maxSendHeaderBlockLength</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum allowed size for a\nserialized, compressed block of headers. Attempts to send headers that\nexceed this limit will result in a <code>'frameError'</code> event being emitted\nand the stream being closed and destroyed.</li>\n<li>\n<p><code>paddingStrategy</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Strategy used for determining the amount of\npadding to use for <code>HEADERS</code> and <code>DATA</code> frames. <strong>Default:</strong>\n<code>http2.constants.PADDING_STRATEGY_NONE</code>. Value may be one of:</p>\n<ul>\n<li><code>http2.constants.PADDING_STRATEGY_NONE</code>: Specifies that no padding is\nto be applied.</li>\n<li><code>http2.constants.PADDING_STRATEGY_MAX</code>: Specifies that the maximum\namount of padding, as determined by the internal implementation, is to\nbe applied.</li>\n<li><code>http2.constants.PADDING_STRATEGY_CALLBACK</code>: Specifies that the user\nprovided <code>options.selectPadding()</code> callback is to be used to determine\nthe amount of padding.</li>\n<li><code>http2.constants.PADDING_STRATEGY_ALIGNED</code>: Will <em>attempt</em> to apply\nenough padding to ensure that the total frame length, including the\n9-byte header, is a multiple of 8. For each frame, however, there is a\nmaximum allowed number of padding bytes that is determined by current\nflow control state and settings. If this maximum is less than the\ncalculated amount needed to ensure alignment, the maximum will be used\nand the total frame length will <em>not</em> necessarily be aligned at 8 bytes.</li>\n</ul>\n</li>\n<li><code>peerMaxConcurrentStreams</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Sets the maximum number of concurrent\nstreams for the remote peer as if a <code>SETTINGS</code> frame had been received. Will\nbe overridden if the remote peer sets its own value for\n<code>maxConcurrentStreams</code>. <strong>Default:</strong> <code>100</code>.</li>\n<li><code>selectPadding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> When <code>options.paddingStrategy</code> is equal to\n<code>http2.constants.PADDING_STRATEGY_CALLBACK</code>, provides the callback function\nused to determine the padding. See <a href=\"#http2_using_options_selectpadding\">Using <code>options.selectPadding()</code></a>.</li>\n<li><code>settings</code> <a href=\"http2.html#http2_settings_object\" class=\"type\">&lt;HTTP/2 Settings Object&gt;</a> The initial settings to send to the\nremote peer upon connection.</li>\n<li><code>createConnection</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> An optional callback that receives the <code>URL</code>\ninstance passed to <code>connect</code> and the <code>options</code> object, and returns any\n<a href=\"stream.html#stream_class_stream_duplex\"><code>Duplex</code></a> stream that is to be used as the connection for this session.</li>\n<li>...: Any <a href=\"net.html#net_net_connect\"><code>net.connect()</code></a> or <a href=\"tls.html#tls_tls_connect_options_callback\"><code>tls.connect()</code></a> options can be provided.</li>\n</ul>\n</li>\n<li><code>listener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Will be registered as a one-time listener of the\n<a href=\"#http2_event_connect\"><code>'connect'</code></a> event.</li>\n<li>Returns: <a href=\"http2.html#http2_class_clienthttp2session\" class=\"type\">&lt;ClientHttp2Session&gt;</a></li>\n</ul>\n<p>Returns a <code>ClientHttp2Session</code> instance.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst client = http2.connect('https://localhost:1234');\n\n/* Use the client */\n\nclient.close();\n</code></pre>",
              "type": "module",
              "displayName": "`http2.connect(authority[, options][, listener])`"
            },
            {
              "textRaw": "`http2.constants`",
              "name": "`http2.constants`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "modules": [
                {
                  "textRaw": "Error Codes for `RST_STREAM` and `GOAWAY`",
                  "name": "error_codes_for_`rst_stream`_and_`goaway`",
                  "desc": "<p><a id=\"error_codes\"></a></p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Name</th>\n<th>Constant</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>0x00</code></td>\n<td>No Error</td>\n<td><code>http2.constants.NGHTTP2_NO_ERROR</code></td>\n</tr>\n<tr>\n<td><code>0x01</code></td>\n<td>Protocol Error</td>\n<td><code>http2.constants.NGHTTP2_PROTOCOL_ERROR</code></td>\n</tr>\n<tr>\n<td><code>0x02</code></td>\n<td>Internal Error</td>\n<td><code>http2.constants.NGHTTP2_INTERNAL_ERROR</code></td>\n</tr>\n<tr>\n<td><code>0x03</code></td>\n<td>Flow Control Error</td>\n<td><code>http2.constants.NGHTTP2_FLOW_CONTROL_ERROR</code></td>\n</tr>\n<tr>\n<td><code>0x04</code></td>\n<td>Settings Timeout</td>\n<td><code>http2.constants.NGHTTP2_SETTINGS_TIMEOUT</code></td>\n</tr>\n<tr>\n<td><code>0x05</code></td>\n<td>Stream Closed</td>\n<td><code>http2.constants.NGHTTP2_STREAM_CLOSED</code></td>\n</tr>\n<tr>\n<td><code>0x06</code></td>\n<td>Frame Size Error</td>\n<td><code>http2.constants.NGHTTP2_FRAME_SIZE_ERROR</code></td>\n</tr>\n<tr>\n<td><code>0x07</code></td>\n<td>Refused Stream</td>\n<td><code>http2.constants.NGHTTP2_REFUSED_STREAM</code></td>\n</tr>\n<tr>\n<td><code>0x08</code></td>\n<td>Cancel</td>\n<td><code>http2.constants.NGHTTP2_CANCEL</code></td>\n</tr>\n<tr>\n<td><code>0x09</code></td>\n<td>Compression Error</td>\n<td><code>http2.constants.NGHTTP2_COMPRESSION_ERROR</code></td>\n</tr>\n<tr>\n<td><code>0x0a</code></td>\n<td>Connect Error</td>\n<td><code>http2.constants.NGHTTP2_CONNECT_ERROR</code></td>\n</tr>\n<tr>\n<td><code>0x0b</code></td>\n<td>Enhance Your Calm</td>\n<td><code>http2.constants.NGHTTP2_ENHANCE_YOUR_CALM</code></td>\n</tr>\n<tr>\n<td><code>0x0c</code></td>\n<td>Inadequate Security</td>\n<td><code>http2.constants.NGHTTP2_INADEQUATE_SECURITY</code></td>\n</tr>\n<tr>\n<td><code>0x0d</code></td>\n<td>HTTP/1.1 Required</td>\n<td><code>http2.constants.NGHTTP2_HTTP_1_1_REQUIRED</code></td>\n</tr>\n</tbody>\n</table>\n<p>The <code>'timeout'</code> event is emitted when there is no activity on the Server for\na given number of milliseconds set using <code>http2server.setTimeout()</code>.</p>",
                  "type": "module",
                  "displayName": "Error Codes for `RST_STREAM` and `GOAWAY`"
                }
              ],
              "type": "module",
              "displayName": "`http2.constants`"
            },
            {
              "textRaw": "`http2.getDefaultSettings()`",
              "name": "`http2.getdefaultsettings()`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Returns: <a href=\"http2.html#http2_settings_object\" class=\"type\">&lt;HTTP/2 Settings Object&gt;</a></li>\n</ul>\n<p>Returns an object containing the default settings for an <code>Http2Session</code>\ninstance. This method returns a new object instance every time it is called\nso instances returned may be safely modified for use.</p>",
              "type": "module",
              "displayName": "`http2.getDefaultSettings()`"
            },
            {
              "textRaw": "`http2.getPackedSettings([settings])`",
              "name": "`http2.getpackedsettings([settings])`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>settings</code> <a href=\"http2.html#http2_settings_object\" class=\"type\">&lt;HTTP/2 Settings Object&gt;</a></li>\n<li>Returns: <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Returns a <code>Buffer</code> instance containing serialized representation of the given\nHTTP/2 settings as specified in the <a href=\"https://tools.ietf.org/html/rfc7540\">HTTP/2</a> specification. This is intended\nfor use with the <code>HTTP2-Settings</code> header field.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\n\nconst packed = http2.getPackedSettings({ enablePush: false });\n\nconsole.log(packed.toString('base64'));\n// Prints: AAIAAAAA\n</code></pre>",
              "type": "module",
              "displayName": "`http2.getPackedSettings([settings])`"
            },
            {
              "textRaw": "`http2.getUnpackedSettings(buf)`",
              "name": "`http2.getunpackedsettings(buf)`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>buf</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" class=\"type\">&lt;Uint8Array&gt;</a> The packed settings.</li>\n<li>Returns: <a href=\"http2.html#http2_settings_object\" class=\"type\">&lt;HTTP/2 Settings Object&gt;</a></li>\n</ul>\n<p>Returns a <a href=\"#http2_settings_object\">HTTP/2 Settings Object</a> containing the deserialized settings from\nthe given <code>Buffer</code> as generated by <code>http2.getPackedSettings()</code>.</p>",
              "type": "module",
              "displayName": "`http2.getUnpackedSettings(buf)`"
            },
            {
              "textRaw": "Headers Object",
              "name": "headers_object",
              "desc": "<p>Headers are represented as own-properties on JavaScript objects. The property\nkeys will be serialized to lower-case. Property values should be strings (if\nthey are not they will be coerced to strings) or an <code>Array</code> of strings (in order\nto send more than one value per header field).</p>\n<pre><code class=\"language-js\">const headers = {\n  ':status': '200',\n  'content-type': 'text-plain',\n  'ABC': ['has', 'more', 'than', 'one', 'value']\n};\n\nstream.respond(headers);\n</code></pre>\n<p>Header objects passed to callback functions will have a <code>null</code> prototype. This\nmeans that normal JavaScript object methods such as\n<code>Object.prototype.toString()</code> and <code>Object.prototype.hasOwnProperty()</code> will\nnot work.</p>\n<p>For incoming headers:</p>\n<ul>\n<li>The <code>:status</code> header is converted to <code>number</code>.</li>\n<li>Duplicates of <code>:status</code>, <code>:method</code>, <code>:authority</code>, <code>:scheme</code>, <code>:path</code>,\n<code>:protocol</code>, <code>age</code>, <code>authorization</code>, <code>access-control-allow-credentials</code>,\n<code>access-control-max-age</code>, <code>access-control-request-method</code>, <code>content-encoding</code>,\n<code>content-language</code>, <code>content-length</code>, <code>content-location</code>, <code>content-md5</code>,\n<code>content-range</code>, <code>content-type</code>, <code>date</code>, <code>dnt</code>, <code>etag</code>, <code>expires</code>, <code>from</code>,\n<code>if-match</code>, <code>if-modified-since</code>, <code>if-none-match</code>, <code>if-range</code>,\n<code>if-unmodified-since</code>, <code>last-modified</code>, <code>location</code>, <code>max-forwards</code>,\n<code>proxy-authorization</code>, <code>range</code>, <code>referer</code>,<code>retry-after</code>, <code>tk</code>,\n<code>upgrade-insecure-requests</code>, <code>user-agent</code> or <code>x-content-type-options</code> are\ndiscarded.</li>\n<li><code>set-cookie</code> is always an array. Duplicates are added to the array.</li>\n<li>For duplicate <code>cookie</code> headers, the values are joined together with '; '.</li>\n<li>For all other headers, the values are joined together with ', '.</li>\n</ul>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst server = http2.createServer();\nserver.on('stream', (stream, headers) => {\n  console.log(headers[':path']);\n  console.log(headers.ABC);\n});\n</code></pre>",
              "type": "module",
              "displayName": "Headers Object"
            },
            {
              "textRaw": "Settings Object",
              "name": "settings_object",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": [
                  {
                    "version": "v12.12.0",
                    "pr-url": "https://github.com/nodejs/node/pull/29833",
                    "description": "The `maxConcurrentStreams` setting is stricter."
                  },
                  {
                    "version": "v8.9.3",
                    "pr-url": "https://github.com/nodejs/node/pull/16676",
                    "description": "The `maxHeaderListSize` setting is now strictly enforced."
                  }
                ]
              },
              "desc": "<p>The <code>http2.getDefaultSettings()</code>, <code>http2.getPackedSettings()</code>,\n<code>http2.createServer()</code>, <code>http2.createSecureServer()</code>,\n<code>http2session.settings()</code>, <code>http2session.localSettings</code>, and\n<code>http2session.remoteSettings</code> APIs either return or receive as input an\nobject that defines configuration settings for an <code>Http2Session</code> object.\nThese objects are ordinary JavaScript objects containing the following\nproperties.</p>\n<ul>\n<li><code>headerTableSize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the maximum number of bytes used for\nheader compression. The minimum allowed value is 0. The maximum allowed value\nis 2<sup>32</sup>-1. <strong>Default:</strong> <code>4,096 octets</code>.</li>\n<li><code>enablePush</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Specifies <code>true</code> if HTTP/2 Push Streams are to be\npermitted on the <code>Http2Session</code> instances. <strong>Default:</strong> <code>true</code>.</li>\n<li><code>initialWindowSize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the <em>senders</em> initial window size\nfor stream-level flow control. The minimum allowed value is 0. The maximum\nallowed value is 2<sup>32</sup>-1. <strong>Default:</strong> <code>65,535 bytes</code>.</li>\n<li><code>maxFrameSize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the size of the largest frame payload.\nThe minimum allowed value is 16,384. The maximum allowed value\nis 2<sup>24</sup>-1. <strong>Default:</strong> <code>16,384 bytes</code>.</li>\n<li><code>maxConcurrentStreams</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the maximum number of concurrent\nstreams permitted on an <code>Http2Session</code>. There is no default value which\nimplies, at least theoretically, 2<sup>32</sup>-1 streams may be open\nconcurrently at any given time in an <code>Http2Session</code>. The minimum value\nis 0. The maximum allowed value is 2<sup>32</sup>-1. <strong>Default:</strong>\n<code>4294967295</code>.</li>\n<li><code>maxHeaderListSize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the maximum size (uncompressed octets)\nof header list that will be accepted. The minimum allowed value is 0. The\nmaximum allowed value is 2<sup>32</sup>-1. <strong>Default:</strong> <code>65535</code>.</li>\n<li><code>enableConnectProtocol</code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Specifies <code>true</code> if the \"Extended Connect\nProtocol\" defined by <a href=\"https://tools.ietf.org/html/rfc8441\">RFC 8441</a> is to be enabled. This setting is only\nmeaningful if sent by the server. Once the <code>enableConnectProtocol</code> setting\nhas been enabled for a given <code>Http2Session</code>, it cannot be disabled.\n<strong>Default:</strong> <code>false</code>.</li>\n</ul>\n<p>All additional properties on the settings object are ignored.</p>",
              "type": "module",
              "displayName": "Settings Object"
            },
            {
              "textRaw": "Using `options.selectPadding()`",
              "name": "using_`options.selectpadding()`",
              "desc": "<p>When <code>options.paddingStrategy</code> is equal to\n<code>http2.constants.PADDING_STRATEGY_CALLBACK</code>, the HTTP/2 implementation will\nconsult the <code>options.selectPadding()</code> callback function, if provided, to\ndetermine the specific amount of padding to use per <code>HEADERS</code> and <code>DATA</code> frame.</p>\n<p>The <code>options.selectPadding()</code> function receives two numeric arguments,\n<code>frameLen</code> and <code>maxFrameLen</code> and must return a number <code>N</code> such that\n<code>frameLen &#x3C;= N &#x3C;= maxFrameLen</code>.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst server = http2.createServer({\n  paddingStrategy: http2.constants.PADDING_STRATEGY_CALLBACK,\n  selectPadding(frameLen, maxFrameLen) {\n    return maxFrameLen;\n  }\n});\n</code></pre>\n<p>The <code>options.selectPadding()</code> function is invoked once for <em>every</em> <code>HEADERS</code> and\n<code>DATA</code> frame. This has a definite noticeable impact on performance.</p>",
              "type": "module",
              "displayName": "Using `options.selectPadding()`"
            },
            {
              "textRaw": "Error Handling",
              "name": "error_handling",
              "desc": "<p>There are several types of error conditions that may arise when using the\n<code>http2</code> module:</p>\n<p>Validation errors occur when an incorrect argument, option, or setting value is\npassed in. These will always be reported by a synchronous <code>throw</code>.</p>\n<p>State errors occur when an action is attempted at an incorrect time (for\ninstance, attempting to send data on a stream after it has closed). These will\nbe reported using either a synchronous <code>throw</code> or via an <code>'error'</code> event on\nthe <code>Http2Stream</code>, <code>Http2Session</code> or HTTP/2 Server objects, depending on where\nand when the error occurs.</p>\n<p>Internal errors occur when an HTTP/2 session fails unexpectedly. These will be\nreported via an <code>'error'</code> event on the <code>Http2Session</code> or HTTP/2 Server objects.</p>\n<p>Protocol errors occur when various HTTP/2 protocol constraints are violated.\nThese will be reported using either a synchronous <code>throw</code> or via an <code>'error'</code>\nevent on the <code>Http2Stream</code>, <code>Http2Session</code> or HTTP/2 Server objects, depending\non where and when the error occurs.</p>",
              "type": "module",
              "displayName": "Error Handling"
            },
            {
              "textRaw": "Invalid character handling in header names and values",
              "name": "invalid_character_handling_in_header_names_and_values",
              "desc": "<p>The HTTP/2 implementation applies stricter handling of invalid characters in\nHTTP header names and values than the HTTP/1 implementation.</p>\n<p>Header field names are <em>case-insensitive</em> and are transmitted over the wire\nstrictly as lower-case strings. The API provided by Node.js allows header\nnames to be set as mixed-case strings (e.g. <code>Content-Type</code>) but will convert\nthose to lower-case (e.g. <code>content-type</code>) upon transmission.</p>\n<p>Header field-names <em>must only</em> contain one or more of the following ASCII\ncharacters: <code>a</code>-<code>z</code>, <code>A</code>-<code>Z</code>, <code>0</code>-<code>9</code>, <code>!</code>, <code>#</code>, <code>$</code>, <code>%</code>, <code>&#x26;</code>, <code>'</code>, <code>*</code>, <code>+</code>,\n<code>-</code>, <code>.</code>, <code>^</code>, <code>_</code>, <code>`</code> (backtick), <code>|</code>, and <code>~</code>.</p>\n<p>Using invalid characters within an HTTP header field name will cause the\nstream to be closed with a protocol error being reported.</p>\n<p>Header field values are handled with more leniency but <em>should</em> not contain\nnew-line or carriage return characters and <em>should</em> be limited to US-ASCII\ncharacters, per the requirements of the HTTP specification.</p>",
              "type": "module",
              "displayName": "Invalid character handling in header names and values"
            },
            {
              "textRaw": "Push streams on the client",
              "name": "push_streams_on_the_client",
              "desc": "<p>To receive pushed streams on the client, set a listener for the <code>'stream'</code>\nevent on the <code>ClientHttp2Session</code>:</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\n\nconst client = http2.connect('http://localhost');\n\nclient.on('stream', (pushedStream, requestHeaders) => {\n  pushedStream.on('push', (responseHeaders) => {\n    // Process response headers\n  });\n  pushedStream.on('data', (chunk) => { /* handle pushed data */ });\n});\n\nconst req = client.request({ ':path': '/' });\n</code></pre>",
              "type": "module",
              "displayName": "Push streams on the client"
            },
            {
              "textRaw": "Supporting the `CONNECT` method",
              "name": "supporting_the_`connect`_method",
              "desc": "<p>The <code>CONNECT</code> method is used to allow an HTTP/2 server to be used as a proxy\nfor TCP/IP connections.</p>\n<p>A simple TCP Server:</p>\n<pre><code class=\"language-js\">const net = require('net');\n\nconst server = net.createServer((socket) => {\n  let name = '';\n  socket.setEncoding('utf8');\n  socket.on('data', (chunk) => name += chunk);\n  socket.on('end', () => socket.end(`hello ${name}`));\n});\n\nserver.listen(8000);\n</code></pre>\n<p>An HTTP/2 CONNECT proxy:</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst { NGHTTP2_REFUSED_STREAM } = http2.constants;\nconst net = require('net');\n\nconst proxy = http2.createServer();\nproxy.on('stream', (stream, headers) => {\n  if (headers[':method'] !== 'CONNECT') {\n    // Only accept CONNECT requests\n    stream.close(NGHTTP2_REFUSED_STREAM);\n    return;\n  }\n  const auth = new URL(`tcp://${headers[':authority']}`);\n  // It's a very good idea to verify that hostname and port are\n  // things this proxy should be connecting to.\n  const socket = net.connect(auth.port, auth.hostname, () => {\n    stream.respond();\n    socket.pipe(stream);\n    stream.pipe(socket);\n  });\n  socket.on('error', (error) => {\n    stream.close(http2.constants.NGHTTP2_CONNECT_ERROR);\n  });\n});\n\nproxy.listen(8001);\n</code></pre>\n<p>An HTTP/2 CONNECT client:</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\n\nconst client = http2.connect('http://localhost:8001');\n\n// Must not specify the ':path' and ':scheme' headers\n// for CONNECT requests or an error will be thrown.\nconst req = client.request({\n  ':method': 'CONNECT',\n  ':authority': `localhost:${port}`\n});\n\nreq.on('response', (headers) => {\n  console.log(headers[http2.constants.HTTP2_HEADER_STATUS]);\n});\nlet data = '';\nreq.setEncoding('utf8');\nreq.on('data', (chunk) => data += chunk);\nreq.on('end', () => {\n  console.log(`The server says: ${data}`);\n  client.close();\n});\nreq.end('Jane');\n</code></pre>",
              "type": "module",
              "displayName": "Supporting the `CONNECT` method"
            },
            {
              "textRaw": "The Extended `CONNECT` Protocol",
              "name": "the_extended_`connect`_protocol",
              "desc": "<p><a href=\"https://tools.ietf.org/html/rfc8441\">RFC 8441</a> defines an \"Extended CONNECT Protocol\" extension to HTTP/2 that\nmay be used to bootstrap the use of an <code>Http2Stream</code> using the <code>CONNECT</code>\nmethod as a tunnel for other communication protocols (such as WebSockets).</p>\n<p>The use of the Extended CONNECT Protocol is enabled by HTTP/2 servers by using\nthe <code>enableConnectProtocol</code> setting:</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst settings = { enableConnectProtocol: true };\nconst server = http2.createServer({ settings });\n</code></pre>\n<p>Once the client receives the <code>SETTINGS</code> frame from the server indicating that\nthe extended CONNECT may be used, it may send <code>CONNECT</code> requests that use the\n<code>':protocol'</code> HTTP/2 pseudo-header:</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst client = http2.connect('http://localhost:8080');\nclient.on('remoteSettings', (settings) => {\n  if (settings.enableConnectProtocol) {\n    const req = client.request({ ':method': 'CONNECT', ':protocol': 'foo' });\n    // ...\n  }\n});\n</code></pre>",
              "type": "module",
              "displayName": "The Extended `CONNECT` Protocol"
            }
          ],
          "type": "module",
          "displayName": "Core API"
        },
        {
          "textRaw": "Compatibility API",
          "name": "compatibility_api",
          "desc": "<p>The Compatibility API has the goal of providing a similar developer experience\nof HTTP/1 when using HTTP/2, making it possible to develop applications\nthat support both <a href=\"http.html\">HTTP/1</a> and HTTP/2. This API targets only the\n<strong>public API</strong> of the <a href=\"http.html\">HTTP/1</a>. However many modules use internal\nmethods or state, and those <em>are not supported</em> as it is a completely\ndifferent implementation.</p>\n<p>The following example creates an HTTP/2 server using the compatibility\nAPI:</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst server = http2.createServer((req, res) => {\n  res.setHeader('Content-Type', 'text/html');\n  res.setHeader('X-Foo', 'bar');\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('ok');\n});\n</code></pre>\n<p>In order to create a mixed <a href=\"https.html\">HTTPS</a> and HTTP/2 server, refer to the\n<a href=\"#http2_alpn_negotiation\">ALPN negotiation</a> section.\nUpgrading from non-tls HTTP/1 servers is not supported.</p>\n<p>The HTTP/2 compatibility API is composed of <a href=\"#http2_class_http2_http2serverrequest\"><code>Http2ServerRequest</code></a> and\n<a href=\"#class-http2http2serverresponse\"><code>Http2ServerResponse</code></a>. They aim at API compatibility with HTTP/1, but\nthey do not hide the differences between the protocols. As an example,\nthe status message for HTTP codes is ignored.</p>",
          "modules": [
            {
              "textRaw": "ALPN negotiation",
              "name": "alpn_negotiation",
              "desc": "<p>ALPN negotiation allows supporting both <a href=\"https.html\">HTTPS</a> and HTTP/2 over\nthe same socket. The <code>req</code> and <code>res</code> objects can be either HTTP/1 or\nHTTP/2, and an application <strong>must</strong> restrict itself to the public API of\n<a href=\"http.html\">HTTP/1</a>, and detect if it is possible to use the more advanced\nfeatures of HTTP/2.</p>\n<p>The following example creates a server that supports both protocols:</p>\n<pre><code class=\"language-js\">const { createSecureServer } = require('http2');\nconst { readFileSync } = require('fs');\n\nconst cert = readFileSync('./cert.pem');\nconst key = readFileSync('./key.pem');\n\nconst server = createSecureServer(\n  { cert, key, allowHTTP1: true },\n  onRequest\n).listen(4443);\n\nfunction onRequest(req, res) {\n  // Detects if it is a HTTPS request or HTTP/2\n  const { socket: { alpnProtocol } } = req.httpVersion === '2.0' ?\n    req.stream.session : req;\n  res.writeHead(200, { 'content-type': 'application/json' });\n  res.end(JSON.stringify({\n    alpnProtocol,\n    httpVersion: req.httpVersion\n  }));\n}\n</code></pre>\n<p>The <code>'request'</code> event works identically on both <a href=\"https.html\">HTTPS</a> and\nHTTP/2.</p>",
              "type": "module",
              "displayName": "ALPN negotiation"
            },
            {
              "textRaw": "Class: `http2.Http2ServerRequest`",
              "name": "class:_`http2.http2serverrequest`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Extends: <a href=\"stream.html#stream_class_stream_readable\" class=\"type\">&lt;stream.Readable&gt;</a></li>\n</ul>\n<p>A <code>Http2ServerRequest</code> object is created by <a href=\"#http2_class_http2server\"><code>http2.Server</code></a> or\n<a href=\"#http2_class_http2secureserver\"><code>http2.SecureServer</code></a> and passed as the first argument to the\n<a href=\"#http2_event_request\"><code>'request'</code></a> event. It may be used to access a request status, headers, and\ndata.</p>",
              "modules": [
                {
                  "textRaw": "Event: `'aborted'`",
                  "name": "event:_`'aborted'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'aborted'</code> event is emitted whenever a <code>Http2ServerRequest</code> instance is\nabnormally aborted in mid-communication.</p>\n<p>The <code>'aborted'</code> event will only be emitted if the <code>Http2ServerRequest</code> writable\nside has not been ended.</p>",
                  "type": "module",
                  "displayName": "Event: `'aborted'`"
                },
                {
                  "textRaw": "Event: `'close'`",
                  "name": "event:_`'close'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Indicates that the underlying <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a> was closed.\nJust like <code>'end'</code>, this event occurs only once per response.</p>",
                  "type": "module",
                  "displayName": "Event: `'close'`"
                },
                {
                  "textRaw": "`request.aborted`",
                  "name": "`request.aborted`",
                  "meta": {
                    "added": [
                      "v10.1.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>The <code>request.aborted</code> property will be <code>true</code> if the request has\nbeen aborted.</p>",
                  "type": "module",
                  "displayName": "`request.aborted`"
                },
                {
                  "textRaw": "`request.authority`",
                  "name": "`request.authority`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>The request authority pseudo header field. It can also be accessed via\n<code>req.headers[':authority']</code>.</p>",
                  "type": "module",
                  "displayName": "`request.authority`"
                },
                {
                  "textRaw": "`request.complete`",
                  "name": "`request.complete`",
                  "meta": {
                    "added": [
                      "v12.10.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>The <code>request.complete</code> property will be <code>true</code> if the request has\nbeen completed, aborted, or destroyed.</p>",
                  "type": "module",
                  "displayName": "`request.complete`"
                },
                {
                  "textRaw": "`request.destroy([error])`",
                  "name": "`request.destroy([error])`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>error</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li>\n</ul>\n<p>Calls <code>destroy()</code> on the <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a> that received\nthe <a href=\"#http2_class_http2_http2serverrequest\"><code>Http2ServerRequest</code></a>. If <code>error</code> is provided, an <code>'error'</code> event\nis emitted and <code>error</code> is passed as an argument to any listeners on the event.</p>\n<p>It does nothing if the stream was already destroyed.</p>",
                  "type": "module",
                  "displayName": "`request.destroy([error])`"
                },
                {
                  "textRaw": "`request.headers`",
                  "name": "`request.headers`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>The request/response headers object.</p>\n<p>Key-value pairs of header names and values. Header names are lower-cased.</p>\n<pre><code class=\"language-js\">// Prints something like:\n//\n// { 'user-agent': 'curl/7.22.0',\n//   host: '127.0.0.1:8000',\n//   accept: '*/*' }\nconsole.log(request.headers);\n</code></pre>\n<p>See <a href=\"#http2_headers_object\">HTTP/2 Headers Object</a>.</p>\n<p>In HTTP/2, the request path, hostname, protocol, and method are represented as\nspecial headers prefixed with the <code>:</code> character (e.g. <code>':path'</code>). These special\nheaders will be included in the <code>request.headers</code> object. Care must be taken not\nto inadvertently modify these special headers or errors may occur. For instance,\nremoving all headers from the request will cause errors to occur:</p>\n<pre><code class=\"language-js\">removeAllHeaders(request.headers);\nassert(request.url);   // Fails because the :path header has been removed\n</code></pre>",
                  "type": "module",
                  "displayName": "`request.headers`"
                },
                {
                  "textRaw": "`request.httpVersion`",
                  "name": "`request.httpversion`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>In case of server request, the HTTP version sent by the client. In the case of\nclient response, the HTTP version of the connected-to server. Returns\n<code>'2.0'</code>.</p>\n<p>Also <code>message.httpVersionMajor</code> is the first integer and\n<code>message.httpVersionMinor</code> is the second.</p>",
                  "type": "module",
                  "displayName": "`request.httpVersion`"
                },
                {
                  "textRaw": "`request.method`",
                  "name": "`request.method`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>The request method as a string. Read-only. Examples: <code>'GET'</code>, <code>'DELETE'</code>.</p>",
                  "type": "module",
                  "displayName": "`request.method`"
                },
                {
                  "textRaw": "`request.rawHeaders`",
                  "name": "`request.rawheaders`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a></li>\n</ul>\n<p>The raw request/response headers list exactly as they were received.</p>\n<p>The keys and values are in the same list. It is <em>not</em> a\nlist of tuples. So, the even-numbered offsets are key values, and the\nodd-numbered offsets are the associated values.</p>\n<p>Header names are not lowercased, and duplicates are not merged.</p>\n<pre><code class=\"language-js\">// Prints something like:\n//\n// [ 'user-agent',\n//   'this is invalid because there can be only one',\n//   'User-Agent',\n//   'curl/7.22.0',\n//   'Host',\n//   '127.0.0.1:8000',\n//   'ACCEPT',\n//   '*/*' ]\nconsole.log(request.rawHeaders);\n</code></pre>",
                  "type": "module",
                  "displayName": "`request.rawHeaders`"
                },
                {
                  "textRaw": "`request.rawTrailers`",
                  "name": "`request.rawtrailers`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a></li>\n</ul>\n<p>The raw request/response trailer keys and values exactly as they were\nreceived. Only populated at the <code>'end'</code> event.</p>",
                  "type": "module",
                  "displayName": "`request.rawTrailers`"
                },
                {
                  "textRaw": "`request.scheme`",
                  "name": "`request.scheme`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>The request scheme pseudo header field indicating the scheme\nportion of the target URL.</p>",
                  "type": "module",
                  "displayName": "`request.scheme`"
                },
                {
                  "textRaw": "`request.setTimeout(msecs, callback)`",
                  "name": "`request.settimeout(msecs,_callback)`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>msecs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li>Returns: <a href=\"http2.html#http2_class_http2_http2serverrequest\" class=\"type\">&lt;http2.Http2ServerRequest&gt;</a></li>\n</ul>\n<p>Sets the <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a>'s timeout value to <code>msecs</code>. If a callback is\nprovided, then it is added as a listener on the <code>'timeout'</code> event on\nthe response object.</p>\n<p>If no <code>'timeout'</code> listener is added to the request, the response, or\nthe server, then <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a>s are destroyed when they time out. If a\nhandler is assigned to the request, the response, or the server's <code>'timeout'</code>\nevents, timed out sockets must be handled explicitly.</p>",
                  "type": "module",
                  "displayName": "`request.setTimeout(msecs, callback)`"
                },
                {
                  "textRaw": "`request.socket`",
                  "name": "`request.socket`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"net.html#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a> | <a href=\"tls.html#tls_class_tls_tlssocket\" class=\"type\">&lt;tls.TLSSocket&gt;</a></li>\n</ul>\n<p>Returns a <code>Proxy</code> object that acts as a <code>net.Socket</code> (or <code>tls.TLSSocket</code>) but\napplies getters, setters, and methods based on HTTP/2 logic.</p>\n<p><code>destroyed</code>, <code>readable</code>, and <code>writable</code> properties will be retrieved from and\nset on <code>request.stream</code>.</p>\n<p><code>destroy</code>, <code>emit</code>, <code>end</code>, <code>on</code> and <code>once</code> methods will be called on\n<code>request.stream</code>.</p>\n<p><code>setTimeout</code> method will be called on <code>request.stream.session</code>.</p>\n<p><code>pause</code>, <code>read</code>, <code>resume</code>, and <code>write</code> will throw an error with code\n<code>ERR_HTTP2_NO_SOCKET_MANIPULATION</code>. See <a href=\"#http2_http2session_and_sockets\"><code>Http2Session</code> and Sockets</a> for\nmore information.</p>\n<p>All other interactions will be routed directly to the socket. With TLS support,\nuse <a href=\"tls.html#tls_tlssocket_getpeercertificate_detailed\"><code>request.socket.getPeerCertificate()</code></a> to obtain the client's\nauthentication details.</p>",
                  "type": "module",
                  "displayName": "`request.socket`"
                },
                {
                  "textRaw": "`request.stream`",
                  "name": "`request.stream`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"http2.html#http2_class_http2stream\" class=\"type\">&lt;Http2Stream&gt;</a></li>\n</ul>\n<p>The <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a> object backing the request.</p>",
                  "type": "module",
                  "displayName": "`request.stream`"
                },
                {
                  "textRaw": "`request.trailers`",
                  "name": "`request.trailers`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>The request/response trailers object. Only populated at the <code>'end'</code> event.</p>",
                  "type": "module",
                  "displayName": "`request.trailers`"
                },
                {
                  "textRaw": "`request.url`",
                  "name": "`request.url`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>Request URL string. This contains only the URL that is\npresent in the actual HTTP request. If the request is:</p>\n<pre><code class=\"language-txt\">GET /status?name=ryan HTTP/1.1\\r\\n\nAccept: text/plain\\r\\n\n\\r\\n\n</code></pre>\n<p>Then <code>request.url</code> will be:</p>\n<!-- eslint-disable semi -->\n<pre><code class=\"language-js\">'/status?name=ryan'\n</code></pre>\n<p>To parse the url into its parts <code>require('url').parse(request.url)</code>\ncan be used:</p>\n<pre><code class=\"language-txt\">$ node\n> require('url').parse('/status?name=ryan')\nUrl {\n  protocol: null,\n  slashes: null,\n  auth: null,\n  host: null,\n  port: null,\n  hostname: null,\n  hash: null,\n  search: '?name=ryan',\n  query: 'name=ryan',\n  pathname: '/status',\n  path: '/status?name=ryan',\n  href: '/status?name=ryan' }\n</code></pre>\n<p>To extract the parameters from the query string, the\n<code>require('querystring').parse</code> function can be used, or\n<code>true</code> can be passed as the second argument to <code>require('url').parse</code>.</p>\n<pre><code class=\"language-console\">$ node\n> require('url').parse('/status?name=ryan', true)\nUrl {\n  protocol: null,\n  slashes: null,\n  auth: null,\n  host: null,\n  port: null,\n  hostname: null,\n  hash: null,\n  search: '?name=ryan',\n  query: { name: 'ryan' },\n  pathname: '/status',\n  path: '/status?name=ryan',\n  href: '/status?name=ryan' }\n</code></pre>",
                  "type": "module",
                  "displayName": "`request.url`"
                }
              ],
              "type": "module",
              "displayName": "Class: `http2.Http2ServerRequest`"
            },
            {
              "textRaw": "Class: `http2.Http2ServerResponse`",
              "name": "class:_`http2.http2serverresponse`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Extends: <a href=\"stream.html#stream_stream\" class=\"type\">&lt;Stream&gt;</a></li>\n</ul>\n<p>This object is created internally by an HTTP server — not by the user. It is\npassed as the second parameter to the <a href=\"#http2_event_request\"><code>'request'</code></a> event.</p>",
              "modules": [
                {
                  "textRaw": "Event: `'close'`",
                  "name": "event:_`'close'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Indicates that the underlying <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a> was terminated before\n<a href=\"#http2_response_end_data_encoding_callback\"><code>response.end()</code></a> was called or able to flush.</p>",
                  "type": "module",
                  "displayName": "Event: `'close'`"
                },
                {
                  "textRaw": "Event: `'finish'`",
                  "name": "event:_`'finish'`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Emitted when the response has been sent. More specifically, this event is\nemitted when the last segment of the response headers and body have been\nhanded off to the HTTP/2 multiplexing for transmission over the network. It\ndoes not imply that the client has received anything yet.</p>\n<p>After this event, no more events will be emitted on the response object.</p>",
                  "type": "module",
                  "displayName": "Event: `'finish'`"
                },
                {
                  "textRaw": "`response.addTrailers(headers)`",
                  "name": "`response.addtrailers(headers)`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>headers</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>This method adds HTTP trailing headers (a header but at the end of the\nmessage) to the response.</p>\n<p>Attempting to set a header field name or value that contains invalid characters\nwill result in a <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> being thrown.</p>",
                  "type": "module",
                  "displayName": "`response.addTrailers(headers)`"
                },
                {
                  "textRaw": "`response.connection`",
                  "name": "`response.connection`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"net.html#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a> | <a href=\"tls.html#tls_class_tls_tlssocket\" class=\"type\">&lt;tls.TLSSocket&gt;</a></li>\n</ul>\n<p>See <a href=\"#http2_response_socket\"><code>response.socket</code></a>.</p>",
                  "type": "module",
                  "displayName": "`response.connection`"
                },
                {
                  "textRaw": "`response.end([data[, encoding]][, callback])`",
                  "name": "`response.end([data[,_encoding]][,_callback])`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": [
                      {
                        "version": "v10.0.0",
                        "pr-url": "https://github.com/nodejs/node/pull/18780",
                        "description": "This method now returns a reference to `ServerResponse`."
                      }
                    ]
                  },
                  "desc": "<ul>\n<li><code>data</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" class=\"type\">&lt;this&gt;</a></li>\n</ul>\n<p>This method signals to the server that all of the response headers and body\nhave been sent; that server should consider this message complete.\nThe method, <code>response.end()</code>, MUST be called on each response.</p>\n<p>If <code>data</code> is specified, it is equivalent to calling\n<a href=\"http.html#http_response_write_chunk_encoding_callback\"><code>response.write(data, encoding)</code></a> followed by <code>response.end(callback)</code>.</p>\n<p>If <code>callback</code> is specified, it will be called when the response stream\nis finished.</p>",
                  "type": "module",
                  "displayName": "`response.end([data[, encoding]][, callback])`"
                },
                {
                  "textRaw": "`response.finished`",
                  "name": "`response.finished`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "deprecated": [
                      "v12.16.0"
                    ],
                    "changes": []
                  },
                  "stability": 0,
                  "stabilityText": "Deprecated. Use [`response.writableEnded`][].",
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Boolean value that indicates whether the response has completed. Starts\nas <code>false</code>. After <a href=\"#http2_response_end_data_encoding_callback\"><code>response.end()</code></a> executes, the value will be <code>true</code>.</p>",
                  "type": "module",
                  "displayName": "`response.finished`"
                },
                {
                  "textRaw": "`response.getHeader(name)`",
                  "name": "`response.getheader(name)`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>Reads out a header that has already been queued but not sent to the client.\nThe name is case-insensitive.</p>\n<pre><code class=\"language-js\">const contentType = response.getHeader('content-type');\n</code></pre>",
                  "type": "module",
                  "displayName": "`response.getHeader(name)`"
                },
                {
                  "textRaw": "`response.getHeaderNames()`",
                  "name": "`response.getheadernames()`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a></li>\n</ul>\n<p>Returns an array containing the unique names of the current outgoing headers.\nAll header names are lowercase.</p>\n<pre><code class=\"language-js\">response.setHeader('Foo', 'bar');\nresponse.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\n\nconst headerNames = response.getHeaderNames();\n// headerNames === ['foo', 'set-cookie']\n</code></pre>",
                  "type": "module",
                  "displayName": "`response.getHeaderNames()`"
                },
                {
                  "textRaw": "`response.getHeaders()`",
                  "name": "`response.getheaders()`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>Returns a shallow copy of the current outgoing headers. Since a shallow copy\nis used, array values may be mutated without additional calls to various\nheader-related http module methods. The keys of the returned object are the\nheader names and the values are the respective header values. All header names\nare lowercase.</p>\n<p>The object returned by the <code>response.getHeaders()</code> method <em>does not</em>\nprototypically inherit from the JavaScript <code>Object</code>. This means that typical\n<code>Object</code> methods such as <code>obj.toString()</code>, <code>obj.hasOwnProperty()</code>, and others\nare not defined and <em>will not work</em>.</p>\n<pre><code class=\"language-js\">response.setHeader('Foo', 'bar');\nresponse.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\n\nconst headers = response.getHeaders();\n// headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }\n</code></pre>",
                  "type": "module",
                  "displayName": "`response.getHeaders()`"
                },
                {
                  "textRaw": "`response.hasHeader(name)`",
                  "name": "`response.hasheader(name)`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Returns <code>true</code> if the header identified by <code>name</code> is currently set in the\noutgoing headers. The header name matching is case-insensitive.</p>\n<pre><code class=\"language-js\">const hasContentType = response.hasHeader('content-type');\n</code></pre>",
                  "type": "module",
                  "displayName": "`response.hasHeader(name)`"
                },
                {
                  "textRaw": "`response.headersSent`",
                  "name": "`response.headerssent`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>True if headers were sent, false otherwise (read-only).</p>",
                  "type": "module",
                  "displayName": "`response.headersSent`"
                },
                {
                  "textRaw": "`response.removeHeader(name)`",
                  "name": "`response.removeheader(name)`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>Removes a header that has been queued for implicit sending.</p>\n<pre><code class=\"language-js\">response.removeHeader('Content-Encoding');\n</code></pre>",
                  "type": "module",
                  "displayName": "`response.removeHeader(name)`"
                },
                {
                  "textRaw": "`response.sendDate`",
                  "name": "`response.senddate`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>When true, the Date header will be automatically generated and sent in\nthe response if it is not already present in the headers. Defaults to true.</p>\n<p>This should only be disabled for testing; HTTP requires the Date header\nin responses.</p>",
                  "type": "module",
                  "displayName": "`response.sendDate`"
                },
                {
                  "textRaw": "`response.setHeader(name, value)`",
                  "name": "`response.setheader(name,_value)`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li><code>value</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a></li>\n</ul>\n<p>Sets a single header value for implicit headers. If this header already exists\nin the to-be-sent headers, its value will be replaced. Use an array of strings\nhere to send multiple headers with the same name.</p>\n<pre><code class=\"language-js\">response.setHeader('Content-Type', 'text/html');\n</code></pre>\n<p>or</p>\n<pre><code class=\"language-js\">response.setHeader('Set-Cookie', ['type=ninja', 'language=javascript']);\n</code></pre>\n<p>Attempting to set a header field name or value that contains invalid characters\nwill result in a <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> being thrown.</p>\n<p>When headers have been set with <a href=\"#http2_response_setheader_name_value\"><code>response.setHeader()</code></a>, they will be merged\nwith any headers passed to <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a>, with the headers passed\nto <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> given precedence.</p>\n<pre><code class=\"language-js\">// Returns content-type = text/plain\nconst server = http2.createServer((req, res) => {\n  res.setHeader('Content-Type', 'text/html');\n  res.setHeader('X-Foo', 'bar');\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('ok');\n});\n</code></pre>",
                  "type": "module",
                  "displayName": "`response.setHeader(name, value)`"
                },
                {
                  "textRaw": "`response.setTimeout(msecs[, callback])`",
                  "name": "`response.settimeout(msecs[,_callback])`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>msecs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li>Returns: <a href=\"http2.html#http2_class_http2_http2serverresponse\" class=\"type\">&lt;http2.Http2ServerResponse&gt;</a></li>\n</ul>\n<p>Sets the <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a>'s timeout value to <code>msecs</code>. If a callback is\nprovided, then it is added as a listener on the <code>'timeout'</code> event on\nthe response object.</p>\n<p>If no <code>'timeout'</code> listener is added to the request, the response, or\nthe server, then <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a>s are destroyed when they time out. If a\nhandler is assigned to the request, the response, or the server's <code>'timeout'</code>\nevents, timed out sockets must be handled explicitly.</p>",
                  "type": "module",
                  "displayName": "`response.setTimeout(msecs[, callback])`"
                },
                {
                  "textRaw": "`response.socket`",
                  "name": "`response.socket`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"net.html#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a> | <a href=\"tls.html#tls_class_tls_tlssocket\" class=\"type\">&lt;tls.TLSSocket&gt;</a></li>\n</ul>\n<p>Returns a <code>Proxy</code> object that acts as a <code>net.Socket</code> (or <code>tls.TLSSocket</code>) but\napplies getters, setters, and methods based on HTTP/2 logic.</p>\n<p><code>destroyed</code>, <code>readable</code>, and <code>writable</code> properties will be retrieved from and\nset on <code>response.stream</code>.</p>\n<p><code>destroy</code>, <code>emit</code>, <code>end</code>, <code>on</code> and <code>once</code> methods will be called on\n<code>response.stream</code>.</p>\n<p><code>setTimeout</code> method will be called on <code>response.stream.session</code>.</p>\n<p><code>pause</code>, <code>read</code>, <code>resume</code>, and <code>write</code> will throw an error with code\n<code>ERR_HTTP2_NO_SOCKET_MANIPULATION</code>. See <a href=\"#http2_http2session_and_sockets\"><code>Http2Session</code> and Sockets</a> for\nmore information.</p>\n<p>All other interactions will be routed directly to the socket.</p>\n<pre><code class=\"language-js\">const http2 = require('http2');\nconst server = http2.createServer((req, res) => {\n  const ip = req.socket.remoteAddress;\n  const port = req.socket.remotePort;\n  res.end(`Your IP address is ${ip} and your source port is ${port}.`);\n}).listen(3000);\n</code></pre>",
                  "type": "module",
                  "displayName": "`response.socket`"
                },
                {
                  "textRaw": "`response.statusCode`",
                  "name": "`response.statuscode`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>When using implicit headers (not calling <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> explicitly),\nthis property controls the status code that will be sent to the client when\nthe headers get flushed.</p>\n<pre><code class=\"language-js\">response.statusCode = 404;\n</code></pre>\n<p>After response header was sent to the client, this property indicates the\nstatus code which was sent out.</p>",
                  "type": "module",
                  "displayName": "`response.statusCode`"
                },
                {
                  "textRaw": "`response.statusMessage`",
                  "name": "`response.statusmessage`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>Status message is not supported by HTTP/2 (RFC 7540 8.1.2.4). It returns\nan empty string.</p>",
                  "type": "module",
                  "displayName": "`response.statusMessage`"
                },
                {
                  "textRaw": "`response.stream`",
                  "name": "`response.stream`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"http2.html#http2_class_http2stream\" class=\"type\">&lt;Http2Stream&gt;</a></li>\n</ul>\n<p>The <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a> object backing the response.</p>",
                  "type": "module",
                  "displayName": "`response.stream`"
                },
                {
                  "textRaw": "`response.writableEnded`",
                  "name": "`response.writableended`",
                  "meta": {
                    "added": [
                      "v12.9.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Is <code>true</code> after <a href=\"#http2_response_end_data_encoding_callback\"><code>response.end()</code></a> has been called. This property\ndoes not indicate whether the data has been flushed, for this use\n<a href=\"stream.html#stream_writable_writablefinished\"><code>writable.writableFinished</code></a> instead.</p>",
                  "type": "module",
                  "displayName": "`response.writableEnded`"
                },
                {
                  "textRaw": "`response.write(chunk[, encoding][, callback])`",
                  "name": "`response.write(chunk[,_encoding][,_callback])`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>chunk</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n<li><code>encoding</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>If this method is called and <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> has not been called,\nit will switch to implicit header mode and flush the implicit headers.</p>\n<p>This sends a chunk of the response body. This method may\nbe called multiple times to provide successive parts of the body.</p>\n<p>In the <code>http</code> module, the response body is omitted when the\nrequest is a HEAD request. Similarly, the <code>204</code> and <code>304</code> responses\n<em>must not</em> include a message body.</p>\n<p><code>chunk</code> can be a string or a buffer. If <code>chunk</code> is a string,\nthe second parameter specifies how to encode it into a byte stream.\nBy default the <code>encoding</code> is <code>'utf8'</code>. <code>callback</code> will be called when this chunk\nof data is flushed.</p>\n<p>This is the raw HTTP body and has nothing to do with higher-level multi-part\nbody encodings that may be used.</p>\n<p>The first time <a href=\"#http2_response_write_chunk_encoding_callback\"><code>response.write()</code></a> is called, it will send the buffered\nheader information and the first chunk of the body to the client. The second\ntime <a href=\"#http2_response_write_chunk_encoding_callback\"><code>response.write()</code></a> is called, Node.js assumes data will be streamed,\nand sends the new data separately. That is, the response is buffered up to the\nfirst chunk of the body.</p>\n<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel\nbuffer. Returns <code>false</code> if all or part of the data was queued in user memory.\n<code>'drain'</code> will be emitted when the buffer is free again.</p>",
                  "type": "module",
                  "displayName": "`response.write(chunk[, encoding][, callback])`"
                },
                {
                  "textRaw": "`response.writeContinue()`",
                  "name": "`response.writecontinue()`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Sends a status <code>100 Continue</code> to the client, indicating that the request body\nshould be sent. See the <a href=\"#http2_event_checkcontinue\"><code>'checkContinue'</code></a> event on <code>Http2Server</code> and\n<code>Http2SecureServer</code>.</p>",
                  "type": "module",
                  "displayName": "`response.writeContinue()`"
                },
                {
                  "textRaw": "`response.writeHead(statusCode[, statusMessage][, headers])`",
                  "name": "`response.writehead(statuscode[,_statusmessage][,_headers])`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": [
                      {
                        "version": "v11.10.0",
                        "pr-url": "https://github.com/nodejs/node/pull/25974",
                        "description": "Return `this` from `writeHead()` to allow chaining with `end()`."
                      }
                    ]
                  },
                  "desc": "<ul>\n<li><code>statusCode</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n<li><code>statusMessage</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li><code>headers</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n<li>Returns: <a href=\"http2.html#http2_class_http2_http2serverresponse\" class=\"type\">&lt;http2.Http2ServerResponse&gt;</a></li>\n</ul>\n<p>Sends a response header to the request. The status code is a 3-digit HTTP\nstatus code, like <code>404</code>. The last argument, <code>headers</code>, are the response headers.</p>\n<p>Returns a reference to the <code>Http2ServerResponse</code>, so that calls can be chained.</p>\n<p>For compatibility with <a href=\"http.html\">HTTP/1</a>, a human-readable <code>statusMessage</code> may be\npassed as the second argument. However, because the <code>statusMessage</code> has no\nmeaning within HTTP/2, the argument will have no effect and a process warning\nwill be emitted.</p>\n<pre><code class=\"language-js\">const body = 'hello world';\nresponse.writeHead(200, {\n  'Content-Length': Buffer.byteLength(body),\n  'Content-Type': 'text/plain' });\n</code></pre>\n<p><code>Content-Length</code> is given in bytes not characters. The\n<code>Buffer.byteLength()</code> API may be used to determine the number of bytes in a\ngiven encoding. On outbound messages, Node.js does not check if Content-Length\nand the length of the body being transmitted are equal or not. However, when\nreceiving messages, Node.js will automatically reject messages when the\n<code>Content-Length</code> does not match the actual payload size.</p>\n<p>This method may be called at most one time on a message before\n<a href=\"#http2_response_end_data_encoding_callback\"><code>response.end()</code></a> is called.</p>\n<p>If <a href=\"#http2_response_write_chunk_encoding_callback\"><code>response.write()</code></a> or <a href=\"#http2_response_end_data_encoding_callback\"><code>response.end()</code></a> are called before calling\nthis, the implicit/mutable headers will be calculated and call this function.</p>\n<p>When headers have been set with <a href=\"#http2_response_setheader_name_value\"><code>response.setHeader()</code></a>, they will be merged\nwith any headers passed to <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a>, with the headers passed\nto <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> given precedence.</p>\n<pre><code class=\"language-js\">// Returns content-type = text/plain\nconst server = http2.createServer((req, res) => {\n  res.setHeader('Content-Type', 'text/html');\n  res.setHeader('X-Foo', 'bar');\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('ok');\n});\n</code></pre>\n<p>Attempting to set a header field name or value that contains invalid characters\nwill result in a <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> being thrown.</p>",
                  "type": "module",
                  "displayName": "`response.writeHead(statusCode[, statusMessage][, headers])`"
                },
                {
                  "textRaw": "`response.createPushResponse(headers, callback)`",
                  "name": "`response.createpushresponse(headers,_callback)`",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li><code>headers</code> <a href=\"http2.html#http2_headers_object\" class=\"type\">&lt;HTTP/2 Headers Object&gt;</a> An object describing the headers</li>\n<li>\n<p><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> Called once <code>http2stream.pushStream()</code> is finished,\nor either when the attempt to create the pushed <code>Http2Stream</code> has failed or\nhas been rejected, or the state of <code>Http2ServerRequest</code> is closed prior to\ncalling the <code>http2stream.pushStream()</code> method</p>\n<ul>\n<li><code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li>\n<li><code>stream</code> <a href=\"http2.html#http2_class_serverhttp2stream\" class=\"type\">&lt;ServerHttp2Stream&gt;</a> The newly-created <code>ServerHttp2Stream</code> object</li>\n</ul>\n</li>\n</ul>\n<p>Call <a href=\"#http2_http2stream_pushstream_headers_options_callback\"><code>http2stream.pushStream()</code></a> with the given headers, and wrap the\ngiven <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a> on a newly created <code>Http2ServerResponse</code> as the callback\nparameter if successful. When <code>Http2ServerRequest</code> is closed, the callback is\ncalled with an error <code>ERR_HTTP2_INVALID_STREAM</code>.</p>",
                  "type": "module",
                  "displayName": "`response.createPushResponse(headers, callback)`"
                }
              ],
              "type": "module",
              "displayName": "Class: `http2.Http2ServerResponse`"
            }
          ],
          "type": "module",
          "displayName": "Compatibility API"
        },
        {
          "textRaw": "Collecting HTTP/2 Performance Metrics",
          "name": "collecting_http/2_performance_metrics",
          "desc": "<p>The <a href=\"perf_hooks.html\">Performance Observer</a> API can be used to collect basic performance\nmetrics for each <code>Http2Session</code> and <code>Http2Stream</code> instance.</p>\n<pre><code class=\"language-js\">const { PerformanceObserver } = require('perf_hooks');\n\nconst obs = new PerformanceObserver((items) => {\n  const entry = items.getEntries()[0];\n  console.log(entry.entryType);  // prints 'http2'\n  if (entry.name === 'Http2Session') {\n    // Entry contains statistics about the Http2Session\n  } else if (entry.name === 'Http2Stream') {\n    // Entry contains statistics about the Http2Stream\n  }\n});\nobs.observe({ entryTypes: ['http2'] });\n</code></pre>\n<p>The <code>entryType</code> property of the <code>PerformanceEntry</code> will be equal to <code>'http2'</code>.</p>\n<p>The <code>name</code> property of the <code>PerformanceEntry</code> will be equal to either\n<code>'Http2Stream'</code> or <code>'Http2Session'</code>.</p>\n<p>If <code>name</code> is equal to <code>Http2Stream</code>, the <code>PerformanceEntry</code> will contain the\nfollowing additional properties:</p>\n<ul>\n<li><code>bytesRead</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of <code>DATA</code> frame bytes received for this\n<code>Http2Stream</code>.</li>\n<li><code>bytesWritten</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of <code>DATA</code> frame bytes sent for this\n<code>Http2Stream</code>.</li>\n<li><code>id</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The identifier of the associated <code>Http2Stream</code></li>\n<li><code>timeToFirstByte</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of milliseconds elapsed between the\n<code>PerformanceEntry</code> <code>startTime</code> and the reception of the first <code>DATA</code> frame.</li>\n<li><code>timeToFirstByteSent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of milliseconds elapsed between\nthe <code>PerformanceEntry</code> <code>startTime</code> and sending of the first <code>DATA</code> frame.</li>\n<li><code>timeToFirstHeader</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of milliseconds elapsed between the\n<code>PerformanceEntry</code> <code>startTime</code> and the reception of the first header.</li>\n</ul>\n<p>If <code>name</code> is equal to <code>Http2Session</code>, the <code>PerformanceEntry</code> will contain the\nfollowing additional properties:</p>\n<ul>\n<li><code>bytesRead</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of bytes received for this <code>Http2Session</code>.</li>\n<li><code>bytesWritten</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of bytes sent for this <code>Http2Session</code>.</li>\n<li><code>framesReceived</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of HTTP/2 frames received by the\n<code>Http2Session</code>.</li>\n<li><code>framesSent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of HTTP/2 frames sent by the <code>Http2Session</code>.</li>\n<li><code>maxConcurrentStreams</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The maximum number of streams concurrently\nopen during the lifetime of the <code>Http2Session</code>.</li>\n<li><code>pingRTT</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of milliseconds elapsed since the transmission\nof a <code>PING</code> frame and the reception of its acknowledgment. Only present if\na <code>PING</code> frame has been sent on the <code>Http2Session</code>.</li>\n<li><code>streamAverageDuration</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The average duration (in milliseconds) for\nall <code>Http2Stream</code> instances.</li>\n<li><code>streamCount</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of <code>Http2Stream</code> instances processed by\nthe <code>Http2Session</code>.</li>\n<li><code>type</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Either <code>'server'</code> or <code>'client'</code> to identify the type of\n<code>Http2Session</code>.</li>\n</ul>",
          "type": "module",
          "displayName": "Collecting HTTP/2 Performance Metrics"
        }
      ],
      "type": "module",
      "displayName": "HTTP/2"
    }
  ]
}