{
  "type": "module",
  "source": "doc/api/tls.md",
  "modules": [
    {
      "textRaw": "TLS (SSL)",
      "name": "tls_(ssl)",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>tls</code> module provides an implementation of the Transport Layer Security\n(TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL.\nThe module can be accessed using:</p>\n<pre><code class=\"language-js\">const tls = require('tls');\n</code></pre>",
      "modules": [
        {
          "textRaw": "TLS/SSL Concepts",
          "name": "tls/ssl_concepts",
          "desc": "<p>The TLS/SSL is a public/private key infrastructure (PKI). For most common\ncases, each client and server must have a <em>private key</em>.</p>\n<p>Private keys can be generated in multiple ways. The example below illustrates\nuse of the OpenSSL command-line interface to generate a 2048-bit RSA private\nkey:</p>\n<pre><code class=\"language-sh\">openssl genrsa -out ryans-key.pem 2048\n</code></pre>\n<p>With TLS/SSL, all servers (and some clients) must have a <em>certificate</em>.\nCertificates are <em>public keys</em> that correspond to a private key, and that are\ndigitally signed either by a Certificate Authority or by the owner of the\nprivate key (such certificates are referred to as \"self-signed\"). The first\nstep to obtaining a certificate is to create a <em>Certificate Signing Request</em>\n(CSR) file.</p>\n<p>The OpenSSL command-line interface can be used to generate a CSR for a private\nkey:</p>\n<pre><code class=\"language-sh\">openssl req -new -sha256 -key ryans-key.pem -out ryans-csr.pem\n</code></pre>\n<p>Once the CSR file is generated, it can either be sent to a Certificate\nAuthority for signing or used to generate a self-signed certificate.</p>\n<p>Creating a self-signed certificate using the OpenSSL command-line interface\nis illustrated in the example below:</p>\n<pre><code class=\"language-sh\">openssl x509 -req -in ryans-csr.pem -signkey ryans-key.pem -out ryans-cert.pem\n</code></pre>\n<p>Once the certificate is generated, it can be used to generate a <code>.pfx</code> or\n<code>.p12</code> file:</p>\n<pre><code class=\"language-sh\">openssl pkcs12 -export -in ryans-cert.pem -inkey ryans-key.pem \\\n      -certfile ca-cert.pem -out ryans.pfx\n</code></pre>\n<p>Where:</p>\n<ul>\n<li><code>in</code>: is the signed certificate</li>\n<li><code>inkey</code>: is the associated private key</li>\n<li><code>certfile</code>: is a concatenation of all Certificate Authority (CA) certs into\na single file, e.g. <code>cat ca1-cert.pem ca2-cert.pem > ca-cert.pem</code></li>\n</ul>",
          "miscs": [
            {
              "textRaw": "Perfect Forward Secrecy",
              "name": "Perfect Forward Secrecy",
              "type": "misc",
              "desc": "<p>The term \"<a href=\"https://en.wikipedia.org/wiki/Perfect_forward_secrecy\">Forward Secrecy</a>\" or \"Perfect Forward Secrecy\" describes a feature\nof key-agreement (i.e., key-exchange) methods. That is, the server and client\nkeys are used to negotiate new temporary keys that are used specifically and\nonly for the current communication session. Practically, this means that even\nif the server's private key is compromised, communication can only be decrypted\nby eavesdroppers if the attacker manages to obtain the key-pair specifically\ngenerated for the session.</p>\n<p>Perfect Forward Secrecy is achieved by randomly generating a key pair for\nkey-agreement on every TLS/SSL handshake (in contrast to using the same key for\nall sessions). Methods implementing this technique are called \"ephemeral\".</p>\n<p>Currently two methods are commonly used to achieve Perfect Forward Secrecy (note\nthe character \"E\" appended to the traditional abbreviations):</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange\">DHE</a>: An ephemeral version of the Diffie Hellman key-agreement protocol.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Elliptic_curve_Diffie%E2%80%93Hellman\">ECDHE</a>: An ephemeral version of the Elliptic Curve Diffie Hellman\nkey-agreement protocol.</li>\n</ul>\n<p>Ephemeral methods may have some performance drawbacks, because key generation\nis expensive.</p>\n<p>To use Perfect Forward Secrecy using <code>DHE</code> with the <code>tls</code> module, it is required\nto generate Diffie-Hellman parameters and specify them with the <code>dhparam</code>\noption to <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>. The following illustrates the use of\nthe OpenSSL command-line interface to generate such parameters:</p>\n<pre><code class=\"language-sh\">openssl dhparam -outform PEM -out dhparam.pem 2048\n</code></pre>\n<p>If using Perfect Forward Secrecy using <code>ECDHE</code>, Diffie-Hellman parameters are\nnot required and a default ECDHE curve will be used. The <code>ecdhCurve</code> property\ncan be used when creating a TLS Server to specify the list of names of supported\ncurves to use, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a> for more info.</p>\n<p>Perfect Forward Secrecy was optional up to TLSv1.2, but it is not optional for\nTLSv1.3, because all TLSv1.3 cipher suites use ECDHE.</p>"
            },
            {
              "textRaw": "ALPN and SNI",
              "name": "ALPN and SNI",
              "type": "misc",
              "desc": "<p>ALPN (Application-Layer Protocol Negotiation Extension) and\nSNI (Server Name Indication) are TLS handshake extensions:</p>\n<ul>\n<li>ALPN: Allows the use of one TLS server for multiple protocols (HTTP, HTTP/2)</li>\n<li>SNI: Allows the use of one TLS server for multiple hostnames with different\nSSL certificates.</li>\n</ul>"
            },
            {
              "textRaw": "Pre-shared keys",
              "name": "Pre-shared keys",
              "type": "misc",
              "desc": "<p>TLS-PSK support is available as an alternative to normal certificate-based\nauthentication. It uses a pre-shared key instead of certificates to\nauthenticate a TLS connection, providing mutual authentication.\nTLS-PSK and public key infrastructure are not mutually exclusive. Clients and\nservers can accommodate both, choosing either of them during the normal cipher\nnegotiation step.</p>\n<p>TLS-PSK is only a good choice where means exist to securely share a\nkey with every connecting machine, so it does not replace PKI\n(Public Key Infrastructure) for the majority of TLS uses.\nThe TLS-PSK implementation in OpenSSL has seen many security flaws in\nrecent years, mostly because it is used only by a minority of applications.\nPlease consider all alternative solutions before switching to PSK ciphers.\nUpon generating PSK it is of critical importance to use sufficient entropy as\ndiscussed in <a href=\"https://tools.ietf.org/html/rfc4086\">RFC 4086</a>. Deriving a shared secret from a password or other\nlow-entropy sources is not secure.</p>\n<p>PSK ciphers are disabled by default, and using TLS-PSK thus requires explicitly\nspecifying a cipher suite with the <code>ciphers</code> option. The list of available\nciphers can be retrieved via <code>openssl ciphers -v 'PSK'</code>. All TLS 1.3\nciphers are eligible for PSK but currently only those that use SHA256 digest are\nsupported they can be retrieved via <code>openssl ciphers -v -s -tls1_3 -psk</code>.</p>\n<p>According to the <a href=\"https://tools.ietf.org/html/rfc4279\">RFC 4279</a>, PSK identities up to 128 bytes in length and\nPSKs up to 64 bytes in length must be supported. As of OpenSSL 1.1.0\nmaximum identity size is 128 bytes, and maximum PSK length is 256 bytes.</p>\n<p>The current implementation doesn't support asynchronous PSK callbacks due to the\nlimitations of the underlying OpenSSL API.</p>"
            },
            {
              "textRaw": "Client-initiated renegotiation attack mitigation",
              "name": "Client-initiated renegotiation attack mitigation",
              "type": "misc",
              "desc": "<p>The TLS protocol allows clients to renegotiate certain aspects of the TLS\nsession. Unfortunately, session renegotiation requires a disproportionate amount\nof server-side resources, making it a potential vector for denial-of-service\nattacks.</p>\n<p>To mitigate the risk, renegotiation is limited to three times every ten minutes.\nAn <code>'error'</code> event is emitted on the <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> instance when this\nthreshold is exceeded. The limits are configurable:</p>\n<ul>\n<li><code>tls.CLIENT_RENEG_LIMIT</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the number of renegotiation\nrequests. <strong>Default:</strong> <code>3</code>.</li>\n<li><code>tls.CLIENT_RENEG_WINDOW</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Specifies the time renegotiation window\nin seconds. <strong>Default:</strong> <code>600</code> (10 minutes).</li>\n</ul>\n<p>The default renegotiation limits should not be modified without a full\nunderstanding of the implications and risks.</p>\n<p>TLSv1.3 does not support renegotiation.</p>"
            }
          ],
          "modules": [
            {
              "textRaw": "Session Resumption",
              "name": "session_resumption",
              "desc": "<p>Establishing a TLS session can be relatively slow. The process can be sped\nup by saving and later reusing the session state. There are several mechanisms\nto do so, discussed here from oldest to newest (and preferred).</p>\n<p><strong><em>Session Identifiers</em></strong> Servers generate a unique ID for new connections and\nsend it to the client. Clients and servers save the session state. When\nreconnecting, clients send the ID of their saved session state and if the server\nalso has the state for that ID, it can agree to use it. Otherwise, the server\nwill create a new session. See <a href=\"https://www.ietf.org/rfc/rfc2246.txt\">RFC 2246</a> for more information, page 23 and\n30.</p>\n<p>Resumption using session identifiers is supported by most web browsers when\nmaking HTTPS requests.</p>\n<p>For Node.js, clients wait for the <a href=\"#tls_event_session\"><code>'session'</code></a> event to get the session data,\nand provide the data to the <code>session</code> option of a subsequent <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>\nto reuse the session. Servers must\nimplement handlers for the <a href=\"#tls_event_newsession\"><code>'newSession'</code></a> and <a href=\"#tls_event_resumesession\"><code>'resumeSession'</code></a> events\nto save and restore the session data using the session ID as the lookup key to\nreuse sessions. To reuse sessions across load balancers or cluster workers,\nservers must use a shared session cache (such as Redis) in their session\nhandlers.</p>\n<p><strong><em>Session Tickets</em></strong> The servers encrypt the entire session state and send it\nto the client as a \"ticket\". When reconnecting, the state is sent to the server\nin the initial connection. This mechanism avoids the need for server-side\nsession cache. If the server doesn't use the ticket, for any reason (failure\nto decrypt it, it's too old, etc.), it will create a new session and send a new\nticket. See <a href=\"https://tools.ietf.org/html/rfc5077\">RFC 5077</a> for more information.</p>\n<p>Resumption using session tickets is becoming commonly supported by many web\nbrowsers when making HTTPS requests.</p>\n<p>For Node.js, clients use the same APIs for resumption with session identifiers\nas for resumption with session tickets. For debugging, if\n<a href=\"#tls_tlssocket_gettlsticket\"><code>tls.TLSSocket.getTLSTicket()</code></a> returns a value, the session data contains a\nticket, otherwise it contains client-side session state.</p>\n<p>With TLSv1.3, be aware that multiple tickets may be sent by the server,\nresulting in multiple <code>'session'</code> events, see <a href=\"#tls_event_session\"><code>'session'</code></a> for more\ninformation.</p>\n<p>Single process servers need no specific implementation to use session tickets.\nTo use session tickets across server restarts or load balancers, servers must\nall have the same ticket keys. There are three 16-byte keys internally, but the\ntls API exposes them as a single 48-byte buffer for convenience.</p>\n<p>Its possible to get the ticket keys by calling <a href=\"#tls_server_getticketkeys\"><code>server.getTicketKeys()</code></a> on\none server instance and then distribute them, but it is more reasonable to\nsecurely generate 48 bytes of secure random data and set them with the\n<code>ticketKeys</code> option of <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>. The keys should be regularly\nregenerated and server's keys can be reset with\n<a href=\"#tls_server_setticketkeys_keys\"><code>server.setTicketKeys()</code></a>.</p>\n<p>Session ticket keys are cryptographic keys, and they <strong><em>must be stored\nsecurely</em></strong>. With TLS 1.2 and below, if they are compromised all sessions that\nused tickets encrypted with them can be decrypted. They should not be stored\non disk, and they should be regenerated regularly.</p>\n<p>If clients advertise support for tickets, the server will send them. The\nserver can disable tickets by supplying\n<code>require('constants').SSL_OP_NO_TICKET</code> in <code>secureOptions</code>.</p>\n<p>Both session identifiers and session tickets timeout, causing the server to\ncreate new sessions. The timeout can be configured with the <code>sessionTimeout</code>\noption of <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>.</p>\n<p>For all the mechanisms, when resumption fails, servers will create new sessions.\nSince failing to resume the session does not cause TLS/HTTPS connection\nfailures, it is easy to not notice unnecessarily poor TLS performance. The\nOpenSSL CLI can be used to verify that servers are resuming sessions. Use the\n<code>-reconnect</code> option to <code>openssl s_client</code>, for example:</p>\n<pre><code class=\"language-sh\">$ openssl s_client -connect localhost:443 -reconnect\n</code></pre>\n<p>Read through the debug output. The first connection should say \"New\", for\nexample:</p>\n<pre><code class=\"language-text\">New, TLSv1.2, Cipher is ECDHE-RSA-AES128-GCM-SHA256\n</code></pre>\n<p>Subsequent connections should say \"Reused\", for example:</p>\n<pre><code class=\"language-text\">Reused, TLSv1.2, Cipher is ECDHE-RSA-AES128-GCM-SHA256\n</code></pre>",
              "type": "module",
              "displayName": "Session Resumption"
            }
          ],
          "type": "module",
          "displayName": "TLS/SSL Concepts"
        },
        {
          "textRaw": "Modifying the Default TLS Cipher suite",
          "name": "modifying_the_default_tls_cipher_suite",
          "desc": "<p>Node.js is built with a default suite of enabled and disabled TLS ciphers.\nCurrently, the default cipher suite is:</p>\n<pre><code class=\"language-txt\">TLS_AES_256_GCM_SHA384:\nTLS_CHACHA20_POLY1305_SHA256:\nTLS_AES_128_GCM_SHA256:\nECDHE-RSA-AES128-GCM-SHA256:\nECDHE-ECDSA-AES128-GCM-SHA256:\nECDHE-RSA-AES256-GCM-SHA384:\nECDHE-ECDSA-AES256-GCM-SHA384:\nDHE-RSA-AES128-GCM-SHA256:\nECDHE-RSA-AES128-SHA256:\nDHE-RSA-AES128-SHA256:\nECDHE-RSA-AES256-SHA384:\nDHE-RSA-AES256-SHA384:\nECDHE-RSA-AES256-SHA256:\nDHE-RSA-AES256-SHA256:\nHIGH:\n!aNULL:\n!eNULL:\n!EXPORT:\n!DES:\n!RC4:\n!MD5:\n!PSK:\n!SRP:\n!CAMELLIA\n</code></pre>\n<p>This default can be replaced entirely using the <a href=\"cli.html#cli_tls_cipher_list_list\"><code>--tls-cipher-list</code></a> command\nline switch (directly, or via the <a href=\"cli.html#cli_node_options_options\"><code>NODE_OPTIONS</code></a> environment variable). For\ninstance, the following makes <code>ECDHE-RSA-AES128-GCM-SHA256:!RC4</code> the default TLS\ncipher suite:</p>\n<pre><code class=\"language-sh\">node --tls-cipher-list=\"ECDHE-RSA-AES128-GCM-SHA256:!RC4\" server.js\n\nexport NODE_OPTIONS=--tls-cipher-list=\"ECDHE-RSA-AES128-GCM-SHA256:!RC4\"\nnode server.js\n</code></pre>\n<p>The default can also be replaced on a per client or server basis using the\n<code>ciphers</code> option from <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>, which is also available\nin <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>, <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>, and when creating new\n<a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a>s.</p>\n<p>The ciphers list can contain a mixture of TLSv1.3 cipher suite names, the ones\nthat start with <code>'TLS_'</code>, and specifications for TLSv1.2 and below cipher\nsuites.  The TLSv1.2 ciphers support a legacy specification format, consult\nthe OpenSSL <a href=\"https://www.openssl.org/docs/man1.1.1/man1/ciphers.html#CIPHER-LIST-FORMAT\">cipher list format</a> documentation for details, but those\nspecifications do <em>not</em> apply to TLSv1.3 ciphers.  The TLSv1.3 suites can only\nbe enabled by including their full name in the cipher list. They cannot, for\nexample, be enabled or disabled by using the legacy TLSv1.2 <code>'EECDH'</code> or\n<code>'!EECDH'</code> specification.</p>\n<p>Despite the relative order of TLSv1.3 and TLSv1.2 cipher suites, the TLSv1.3\nprotocol is significantly more secure than TLSv1.2, and will always be chosen\nover TLSv1.2 if the handshake indicates it is supported, and if any TLSv1.3\ncipher suites are enabled.</p>\n<p>The default cipher suite included within Node.js has been carefully\nselected to reflect current security best practices and risk mitigation.\nChanging the default cipher suite can have a significant impact on the security\nof an application. The <code>--tls-cipher-list</code> switch and <code>ciphers</code> option should by\nused only if absolutely necessary.</p>\n<p>The default cipher suite prefers GCM ciphers for <a href=\"https://www.chromium.org/Home/chromium-security/education/tls#TOC-Cipher-Suites\">Chrome's 'modern\ncryptography' setting</a> and also prefers ECDHE and DHE ciphers for Perfect\nForward Secrecy, while offering <em>some</em> backward compatibility.</p>\n<p>128 bit AES is preferred over 192 and 256 bit AES in light of <a href=\"https://www.schneier.com/blog/archives/2009/07/another_new_aes.html\">specific\nattacks affecting larger AES key sizes</a>.</p>\n<p>Old clients that rely on insecure and deprecated RC4 or DES-based ciphers\n(like Internet Explorer 6) cannot complete the handshaking process with\nthe default configuration. If these clients <em>must</em> be supported, the\n<a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">TLS recommendations</a> may offer a compatible cipher suite. For more details\non the format, see the OpenSSL <a href=\"https://www.openssl.org/docs/man1.1.1/man1/ciphers.html#CIPHER-LIST-FORMAT\">cipher list format</a> documentation.</p>\n<p>There are only 5 TLSv1.3 cipher suites:</p>\n<ul>\n<li><code>'TLS_AES_256_GCM_SHA384'</code></li>\n<li><code>'TLS_CHACHA20_POLY1305_SHA256'</code></li>\n<li><code>'TLS_AES_128_GCM_SHA256'</code></li>\n<li><code>'TLS_AES_128_CCM_SHA256'</code></li>\n<li><code>'TLS_AES_128_CCM_8_SHA256'</code></li>\n</ul>\n<p>The first 3 are enabled by default. The last 2 <code>CCM</code>-based suites are supported\nby TLSv1.3 because they may be more performant on constrained systems, but they\nare not enabled by default since they offer less security.</p>",
          "type": "module",
          "displayName": "Modifying the Default TLS Cipher suite"
        },
        {
          "textRaw": "Class: `tls.Server`",
          "name": "class:_`tls.server`",
          "meta": {
            "added": [
              "v0.3.2"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li>Extends: <a href=\"net.html#net_class_net_server\" class=\"type\">&lt;net.Server&gt;</a></li>\n</ul>\n<p>Accepts encrypted connections using TLS or SSL.</p>",
          "modules": [
            {
              "textRaw": "Event: `'keylog'`",
              "name": "event:_`'keylog'`",
              "meta": {
                "added": [
                  "v12.3.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>line</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> Line of ASCII text, in NSS <code>SSLKEYLOGFILE</code> format.</li>\n<li><code>tlsSocket</code> <a href=\"tls.html#tls_class_tls_tlssocket\" class=\"type\">&lt;tls.TLSSocket&gt;</a> The <code>tls.TLSSocket</code> instance on which it was\ngenerated.</li>\n</ul>\n<p>The <code>keylog</code> event is emitted when key material is generated or received by\na connection to this server (typically before handshake has completed, but not\nnecessarily). This keying material can be stored for debugging, as it allows\ncaptured TLS traffic to be decrypted. It may be emitted multiple times for\neach socket.</p>\n<p>A typical use case is to append received lines to a common text file, which\nis later used by software (such as Wireshark) to decrypt the traffic:</p>\n<pre><code class=\"language-js\">const logFile = fs.createWriteStream('/tmp/ssl-keys.log', { flags: 'a' });\n// ...\nserver.on('keylog', (line, tlsSocket) => {\n  if (tlsSocket.remoteAddress !== '...')\n    return; // Only log keys for a particular IP\n  logFile.write(line);\n});\n</code></pre>",
              "type": "module",
              "displayName": "Event: `'keylog'`"
            },
            {
              "textRaw": "Event: `'newSession'`",
              "name": "event:_`'newsession'`",
              "meta": {
                "added": [
                  "v0.9.2"
                ],
                "changes": []
              },
              "desc": "<p>The <code>'newSession'</code> event is emitted upon creation of a new TLS session. This may\nbe used to store sessions in external storage. The data should be provided to\nthe <a href=\"#tls_event_resumesession\"><code>'resumeSession'</code></a> callback.</p>\n<p>The listener callback is passed three arguments when called:</p>\n<ul>\n<li><code>sessionId</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The TLS session identifier</li>\n<li><code>sessionData</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The TLS session data</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function taking no arguments that must be\ninvoked in order for data to be sent or received over the secure connection.</li>\n</ul>\n<p>Listening for this event will have an effect only on connections established\nafter the addition of the event listener.</p>",
              "type": "module",
              "displayName": "Event: `'newSession'`"
            },
            {
              "textRaw": "Event: `'OCSPRequest'`",
              "name": "event:_`'ocsprequest'`",
              "meta": {
                "added": [
                  "v0.11.13"
                ],
                "changes": []
              },
              "desc": "<p>The <code>'OCSPRequest'</code> event is emitted when the client sends a certificate status\nrequest. The listener callback is passed three arguments when called:</p>\n<ul>\n<li><code>certificate</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The server certificate</li>\n<li><code>issuer</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The issuer's certificate</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function that must be invoked to provide\nthe results of the OCSP request.</li>\n</ul>\n<p>The server's current certificate can be parsed to obtain the OCSP URL\nand certificate ID; after obtaining an OCSP response, <code>callback(null, resp)</code> is\nthen invoked, where <code>resp</code> is a <code>Buffer</code> instance containing the OCSP response.\nBoth <code>certificate</code> and <code>issuer</code> are <code>Buffer</code> DER-representations of the\nprimary and issuer's certificates. These can be used to obtain the OCSP\ncertificate ID and OCSP endpoint URL.</p>\n<p>Alternatively, <code>callback(null, null)</code> may be called, indicating that there was\nno OCSP response.</p>\n<p>Calling <code>callback(err)</code> will result in a <code>socket.destroy(err)</code> call.</p>\n<p>The typical flow of an OCSP Request is as follows:</p>\n<ol>\n<li>Client connects to the server and sends an <code>'OCSPRequest'</code> (via the status\ninfo extension in ClientHello).</li>\n<li>Server receives the request and emits the <code>'OCSPRequest'</code> event, calling the\nlistener if registered.</li>\n<li>Server extracts the OCSP URL from either the <code>certificate</code> or <code>issuer</code> and\nperforms an <a href=\"https://en.wikipedia.org/wiki/OCSP_stapling\">OCSP request</a> to the CA.</li>\n<li>Server receives <code>'OCSPResponse'</code> from the CA and sends it back to the client\nvia the <code>callback</code> argument</li>\n<li>Client validates the response and either destroys the socket or performs a\nhandshake.</li>\n</ol>\n<p>The <code>issuer</code> can be <code>null</code> if the certificate is either self-signed or the\nissuer is not in the root certificates list. (An issuer may be provided\nvia the <code>ca</code> option when establishing the TLS connection.)</p>\n<p>Listening for this event will have an effect only on connections established\nafter the addition of the event listener.</p>\n<p>An npm module like <a href=\"https://www.npmjs.com/package/asn1.js\">asn1.js</a> may be used to parse the certificates.</p>",
              "type": "module",
              "displayName": "Event: `'OCSPRequest'`"
            },
            {
              "textRaw": "Event: `'resumeSession'`",
              "name": "event:_`'resumesession'`",
              "meta": {
                "added": [
                  "v0.9.2"
                ],
                "changes": []
              },
              "desc": "<p>The <code>'resumeSession'</code> event is emitted when the client requests to resume a\nprevious TLS session. The listener callback is passed two arguments when\ncalled:</p>\n<ul>\n<li><code>sessionId</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The TLS session identifier</li>\n<li>\n<p><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function to be called when the prior session\nhas been recovered: <code>callback([err[, sessionData]])</code></p>\n<ul>\n<li><code>err</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a></li>\n<li><code>sessionData</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n</li>\n</ul>\n<p>The event listener should perform a lookup in external storage for the\n<code>sessionData</code> saved by the <a href=\"#tls_event_newsession\"><code>'newSession'</code></a> event handler using the given\n<code>sessionId</code>. If found, call <code>callback(null, sessionData)</code> to resume the session.\nIf not found, the session cannot be resumed. <code>callback()</code> must be called\nwithout <code>sessionData</code> so that the handshake can continue and a new session can\nbe created. It is possible to call <code>callback(err)</code> to terminate the incoming\nconnection and destroy the socket.</p>\n<p>Listening for this event will have an effect only on connections established\nafter the addition of the event listener.</p>\n<p>The following illustrates resuming a TLS session:</p>\n<pre><code class=\"language-js\">const tlsSessionStore = {};\nserver.on('newSession', (id, data, cb) => {\n  tlsSessionStore[id.toString('hex')] = data;\n  cb();\n});\nserver.on('resumeSession', (id, cb) => {\n  cb(null, tlsSessionStore[id.toString('hex')] || null);\n});\n</code></pre>",
              "type": "module",
              "displayName": "Event: `'resumeSession'`"
            },
            {
              "textRaw": "Event: `'secureConnection'`",
              "name": "event:_`'secureconnection'`",
              "meta": {
                "added": [
                  "v0.3.2"
                ],
                "changes": []
              },
              "desc": "<p>The <code>'secureConnection'</code> event is emitted after the handshaking process for a\nnew connection has successfully completed. The listener callback is passed a\nsingle argument when called:</p>\n<ul>\n<li><code>tlsSocket</code> <a href=\"tls.html#tls_class_tls_tlssocket\" class=\"type\">&lt;tls.TLSSocket&gt;</a> The established TLS socket.</li>\n</ul>\n<p>The <code>tlsSocket.authorized</code> property is a <code>boolean</code> indicating whether the\nclient has been verified by one of the supplied Certificate Authorities for the\nserver. If <code>tlsSocket.authorized</code> is <code>false</code>, then <code>socket.authorizationError</code>\nis set to describe how authorization failed. Depending on the settings\nof the TLS server, unauthorized connections may still be accepted.</p>\n<p>The <code>tlsSocket.alpnProtocol</code> property is a string that contains the selected\nALPN protocol. When ALPN has no selected protocol, <code>tlsSocket.alpnProtocol</code>\nequals <code>false</code>.</p>\n<p>The <code>tlsSocket.servername</code> property is a string containing the server name\nrequested via SNI.</p>",
              "type": "module",
              "displayName": "Event: `'secureConnection'`"
            },
            {
              "textRaw": "Event: `'tlsClientError'`",
              "name": "event:_`'tlsclienterror'`",
              "meta": {
                "added": [
                  "v6.0.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>'tlsClientError'</code> event is emitted when an error occurs before a secure\nconnection is established. The listener callback is passed two arguments when\ncalled:</p>\n<ul>\n<li><code>exception</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> The <code>Error</code> object describing the error</li>\n<li><code>tlsSocket</code> <a href=\"tls.html#tls_class_tls_tlssocket\" class=\"type\">&lt;tls.TLSSocket&gt;</a> The <code>tls.TLSSocket</code> instance from which the\nerror originated.</li>\n</ul>",
              "type": "module",
              "displayName": "Event: `'tlsClientError'`"
            },
            {
              "textRaw": "`server.addContext(hostname, context)`",
              "name": "`server.addcontext(hostname,_context)`",
              "meta": {
                "added": [
                  "v0.5.3"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A SNI hostname or wildcard (e.g. <code>'*'</code>)</li>\n<li><code>context</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> An object containing any of the possible properties\nfrom the <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> <code>options</code> arguments (e.g. <code>key</code>,\n<code>cert</code>, <code>ca</code>, etc).</li>\n</ul>\n<p>The <code>server.addContext()</code> method adds a secure context that will be used if\nthe client request's SNI name matches the supplied <code>hostname</code> (or wildcard).</p>",
              "type": "module",
              "displayName": "`server.addContext(hostname, context)`"
            },
            {
              "textRaw": "`server.address()`",
              "name": "`server.address()`",
              "meta": {
                "added": [
                  "v0.6.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>Returns the bound address, the address family name, and port of the\nserver as reported by the operating system. See <a href=\"net.html#net_server_address\"><code>net.Server.address()</code></a> for\nmore information.</p>",
              "type": "module",
              "displayName": "`server.address()`"
            },
            {
              "textRaw": "`server.close([callback])`",
              "name": "`server.close([callback])`",
              "meta": {
                "added": [
                  "v0.3.2"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A listener callback that will be registered to listen\nfor the server instance's <code>'close'</code> event.</li>\n<li>Returns: <a href=\"tls.html#tls_class_tls_server\" class=\"type\">&lt;tls.Server&gt;</a></li>\n</ul>\n<p>The <code>server.close()</code> method stops the server from accepting new connections.</p>\n<p>This function operates asynchronously. The <code>'close'</code> event will be emitted\nwhen the server has no more open connections.</p>",
              "type": "module",
              "displayName": "`server.close([callback])`"
            },
            {
              "textRaw": "`server.connections`",
              "name": "`server.connections`",
              "meta": {
                "added": [
                  "v0.3.2"
                ],
                "deprecated": [
                  "v0.9.7"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`server.getConnections()`][] instead.",
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>Returns the current number of concurrent connections on the server.</p>",
              "type": "module",
              "displayName": "`server.connections`"
            },
            {
              "textRaw": "`server.getTicketKeys()`",
              "name": "`server.getticketkeys()`",
              "meta": {
                "added": [
                  "v3.0.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Returns: <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A 48-byte buffer containing the session ticket keys.</li>\n</ul>\n<p>Returns the session ticket keys.</p>\n<p>See <a href=\"#tls_session_resumption\">Session Resumption</a> for more information.</p>",
              "type": "module",
              "displayName": "`server.getTicketKeys()`"
            },
            {
              "textRaw": "`server.listen()`",
              "name": "`server.listen()`",
              "desc": "<p>Starts the server listening for encrypted connections.\nThis method is identical to <a href=\"net.html#net_server_listen\"><code>server.listen()</code></a> from <a href=\"net.html#net_class_net_server\"><code>net.Server</code></a>.</p>",
              "type": "module",
              "displayName": "`server.listen()`"
            },
            {
              "textRaw": "`server.setSecureContext(options)`",
              "name": "`server.setsecurecontext(options)`",
              "meta": {
                "added": [
                  "v11.0.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> An object containing any of the possible properties from\nthe <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> <code>options</code> arguments (e.g. <code>key</code>, <code>cert</code>,\n<code>ca</code>, etc).</li>\n</ul>\n<p>The <code>server.setSecureContext()</code> method replaces the secure context of an\nexisting server. Existing connections to the server are not interrupted.</p>",
              "type": "module",
              "displayName": "`server.setSecureContext(options)`"
            },
            {
              "textRaw": "`server.setTicketKeys(keys)`",
              "name": "`server.setticketkeys(keys)`",
              "meta": {
                "added": [
                  "v3.0.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>keys</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A 48-byte buffer containing the session ticket keys.</li>\n</ul>\n<p>Sets the session ticket keys.</p>\n<p>Changes to the ticket keys are effective only for future server connections.\nExisting or currently pending server connections will use the previous keys.</p>\n<p>See <a href=\"#tls_session_resumption\">Session Resumption</a> for more information.</p>",
              "type": "module",
              "displayName": "`server.setTicketKeys(keys)`"
            }
          ],
          "type": "module",
          "displayName": "Class: `tls.Server`"
        },
        {
          "textRaw": "Class: `tls.TLSSocket`",
          "name": "class:_`tls.tlssocket`",
          "meta": {
            "added": [
              "v0.11.4"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li>Extends: <a href=\"net.html#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a></li>\n</ul>\n<p>Performs transparent encryption of written data and all required TLS\nnegotiation.</p>\n<p>Instances of <code>tls.TLSSocket</code> implement the duplex <a href=\"stream.html#stream_stream\">Stream</a> interface.</p>\n<p>Methods that return TLS connection metadata (e.g.\n<a href=\"#tls_tlssocket_getpeercertificate_detailed\"><code>tls.TLSSocket.getPeerCertificate()</code></a> will only return data while the\nconnection is open.</p>",
          "modules": [
            {
              "textRaw": "`new tls.TLSSocket(socket[, options])`",
              "name": "`new_tls.tlssocket(socket[,_options])`",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": [
                  {
                    "version": "v12.2.0",
                    "pr-url": "https://github.com/nodejs/node/pull/27497",
                    "description": "The `enableTrace` option is now supported."
                  },
                  {
                    "version": "v5.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/2564",
                    "description": "ALPN options are supported now."
                  }
                ]
              },
              "desc": "<ul>\n<li><code>socket</code> <a href=\"net.html#net_class_net_socket\" class=\"type\">&lt;net.Socket&gt;</a> | <a href=\"stream.html#stream_class_stream_duplex\" class=\"type\">&lt;stream.Duplex&gt;</a>\nOn the server side, any <code>Duplex</code> stream. On the client side, any\ninstance of <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> (for generic <code>Duplex</code> stream support\non the client side, <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a> must be used).</li>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>enableTrace</code>: See <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>isServer</code>: The SSL/TLS protocol is asymmetrical, TLSSockets must know if\nthey are to behave as a server or a client. If <code>true</code> the TLS socket will be\ninstantiated as a server. <strong>Default:</strong> <code>false</code>.</li>\n<li><code>server</code> <a href=\"net.html#net_class_net_server\" class=\"type\">&lt;net.Server&gt;</a> A <a href=\"net.html#net_class_net_server\"><code>net.Server</code></a> instance.</li>\n<li><code>requestCert</code>: Whether to authenticate the remote peer by requesting a\ncertificate. Clients always request a server certificate. Servers\n(<code>isServer</code> is true) may set <code>requestCert</code> to true to request a client\ncertificate.</li>\n<li><code>rejectUnauthorized</code>: See <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>ALPNProtocols</code>: See <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>SNICallback</code>: See <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>session</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A <code>Buffer</code> instance containing a TLS session.</li>\n<li><code>requestOCSP</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, specifies that the OCSP status request\nextension will be added to the client hello and an <code>'OCSPResponse'</code> event\nwill be emitted on the socket before establishing a secure communication</li>\n<li><code>secureContext</code>: TLS context object created with\n<a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>. If a <code>secureContext</code> is <em>not</em> provided, one\nwill be created by passing the entire <code>options</code> object to\n<code>tls.createSecureContext()</code>.</li>\n<li>...: <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> options that are used if the\n<code>secureContext</code> option is missing. Otherwise, they are ignored.</li>\n</ul>\n</li>\n</ul>\n<p>Construct a new <code>tls.TLSSocket</code> object from an existing TCP socket.</p>",
              "type": "module",
              "displayName": "`new tls.TLSSocket(socket[, options])`"
            },
            {
              "textRaw": "Event: `'keylog'`",
              "name": "event:_`'keylog'`",
              "meta": {
                "added": [
                  "v12.3.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>line</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> Line of ASCII text, in NSS <code>SSLKEYLOGFILE</code> format.</li>\n</ul>\n<p>The <code>keylog</code> event is emitted on a client <code>tls.TLSSocket</code> when key material\nis generated or received by the socket. This keying material can be stored\nfor debugging, as it allows captured TLS traffic to be decrypted. It may\nbe emitted multiple times, before or after the handshake completes.</p>\n<p>A typical use case is to append received lines to a common text file, which\nis later used by software (such as Wireshark) to decrypt the traffic:</p>\n<pre><code class=\"language-js\">const logFile = fs.createWriteStream('/tmp/ssl-keys.log', { flags: 'a' });\n// ...\ntlsSocket.on('keylog', (line) => logFile.write(line));\n</code></pre>",
              "type": "module",
              "displayName": "Event: `'keylog'`"
            },
            {
              "textRaw": "Event: `'OCSPResponse'`",
              "name": "event:_`'ocspresponse'`",
              "meta": {
                "added": [
                  "v0.11.13"
                ],
                "changes": []
              },
              "desc": "<p>The <code>'OCSPResponse'</code> event is emitted if the <code>requestOCSP</code> option was set\nwhen the <code>tls.TLSSocket</code> was created and an OCSP response has been received.\nThe listener callback is passed a single argument when called:</p>\n<ul>\n<li><code>response</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The server's OCSP response</li>\n</ul>\n<p>Typically, the <code>response</code> is a digitally signed object from the server's CA that\ncontains information about server's certificate revocation status.</p>",
              "type": "module",
              "displayName": "Event: `'OCSPResponse'`"
            },
            {
              "textRaw": "Event: `'secureConnect'`",
              "name": "event:_`'secureconnect'`",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>The <code>'secureConnect'</code> event is emitted after the handshaking process for a new\nconnection has successfully completed. The listener callback will be called\nregardless of whether or not the server's certificate has been authorized. It\nis the client's responsibility to check the <code>tlsSocket.authorized</code> property to\ndetermine if the server certificate was signed by one of the specified CAs. If\n<code>tlsSocket.authorized === false</code>, then the error can be found by examining the\n<code>tlsSocket.authorizationError</code> property. If ALPN was used, the\n<code>tlsSocket.alpnProtocol</code> property can be checked to determine the negotiated\nprotocol.</p>",
              "type": "module",
              "displayName": "Event: `'secureConnect'`"
            },
            {
              "textRaw": "Event: `'session'`",
              "name": "event:_`'session'`",
              "meta": {
                "added": [
                  "v11.10.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>session</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>The <code>'session'</code> event is emitted on a client <code>tls.TLSSocket</code> when a new session\nor TLS ticket is available. This may or may not be before the handshake is\ncomplete, depending on the TLS protocol version that was negotiated. The event\nis not emitted on the server, or if a new session was not created, for example,\nwhen the connection was resumed. For some TLS protocol versions the event may be\nemitted multiple times, in which case all the sessions can be used for\nresumption.</p>\n<p>On the client, the <code>session</code> can be provided to the <code>session</code> option of\n<a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a> to resume the connection.</p>\n<p>See <a href=\"#tls_session_resumption\">Session Resumption</a> for more information.</p>\n<p>For TLSv1.2 and below, <a href=\"#tls_tlssocket_getsession\"><code>tls.TLSSocket.getSession()</code></a> can be called once\nthe handshake is complete.  For TLSv1.3, only ticket-based resumption is allowed\nby the protocol, multiple tickets are sent, and the tickets aren't sent until\nafter the handshake completes. So it is necessary to wait for the\n<code>'session'</code> event to get a resumable session.  Applications\nshould use the <code>'session'</code> event instead of <code>getSession()</code> to ensure\nthey will work for all TLS versions.  Applications that only expect to\nget or use one session should listen for this event only once:</p>\n<pre><code class=\"language-js\">tlsSocket.once('session', (session) => {\n  // The session can be used immediately or later.\n  tls.connect({\n    session: session,\n    // Other connect options...\n  });\n});\n</code></pre>",
              "type": "module",
              "displayName": "Event: `'session'`"
            },
            {
              "textRaw": "`tlsSocket.address()`",
              "name": "`tlssocket.address()`",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>Returns the bound <code>address</code>, the address <code>family</code> name, and <code>port</code> of the\nunderlying socket as reported by the operating system:\n<code>{ port: 12346, family: 'IPv4', address: '127.0.0.1' }</code>.</p>",
              "type": "module",
              "displayName": "`tlsSocket.address()`"
            },
            {
              "textRaw": "`tlsSocket.authorizationError`",
              "name": "`tlssocket.authorizationerror`",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>Returns the reason why the peer's certificate was not been verified. This\nproperty is set only when <code>tlsSocket.authorized === false</code>.</p>",
              "type": "module",
              "displayName": "`tlsSocket.authorizationError`"
            },
            {
              "textRaw": "`tlsSocket.authorized`",
              "name": "`tlssocket.authorized`",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>Returns <code>true</code> if the peer certificate was signed by one of the CAs specified\nwhen creating the <code>tls.TLSSocket</code> instance, otherwise <code>false</code>.</p>",
              "type": "module",
              "displayName": "`tlsSocket.authorized`"
            },
            {
              "textRaw": "`tlsSocket.disableRenegotiation()`",
              "name": "`tlssocket.disablerenegotiation()`",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<p>Disables TLS renegotiation for this <code>TLSSocket</code> instance. Once called, attempts\nto renegotiate will trigger an <code>'error'</code> event on the <code>TLSSocket</code>.</p>",
              "type": "module",
              "displayName": "`tlsSocket.disableRenegotiation()`"
            },
            {
              "textRaw": "`tlsSocket.enableTrace()`",
              "name": "`tlssocket.enabletrace()`",
              "meta": {
                "added": [
                  "v12.2.0"
                ],
                "changes": []
              },
              "desc": "<p>When enabled, TLS packet trace information is written to <code>stderr</code>. This can be\nused to debug TLS connection problems.</p>\n<p>Note: The format of the output is identical to the output of <code>openssl s_client -trace</code> or <code>openssl s_server -trace</code>. While it is produced by OpenSSL's\n<code>SSL_trace()</code> function, the format is undocumented, can change without notice,\nand should not be relied on.</p>",
              "type": "module",
              "displayName": "`tlsSocket.enableTrace()`"
            },
            {
              "textRaw": "`tlsSocket.encrypted`",
              "name": "`tlssocket.encrypted`",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>Always returns <code>true</code>. This may be used to distinguish TLS sockets from regular\n<code>net.Socket</code> instances.</p>",
              "type": "module",
              "displayName": "`tlsSocket.encrypted`"
            },
            {
              "textRaw": "`tlsSocket.getCertificate()`",
              "name": "`tlssocket.getcertificate()`",
              "meta": {
                "added": [
                  "v11.2.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>Returns an object representing the local certificate. The returned object has\nsome properties corresponding to the fields of the certificate.</p>\n<p>See <a href=\"#tls_tlssocket_getpeercertificate_detailed\"><code>tls.TLSSocket.getPeerCertificate()</code></a> for an example of the certificate\nstructure.</p>\n<p>If there is no local certificate, an empty object will be returned. If the\nsocket has been destroyed, <code>null</code> will be returned.</p>",
              "type": "module",
              "displayName": "`tlsSocket.getCertificate()`"
            },
            {
              "textRaw": "`tlsSocket.getCipher()`",
              "name": "`tlssocket.getcipher()`",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": [
                  {
                    "version": "v12.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/26625",
                    "description": "Return the minimum cipher version, instead of a fixed string (`'TLSv1/SSLv3'`)."
                  },
                  {
                    "version": "v12.16.0",
                    "pr-url": "https://github.com/nodejs/node/pull/30637",
                    "description": "Return the IETF cipher name as `standardName`."
                  }
                ]
              },
              "desc": "<ul>\n<li>\n<p>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>name</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> OpenSSL name for the cipher suite.</li>\n<li><code>standardName</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> IETF name for the cipher suite.</li>\n<li><code>version</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The minimum TLS protocol version supported by this cipher\nsuite.</li>\n</ul>\n</li>\n</ul>\n<p>Returns an object containing information on the negotiated cipher suite.</p>\n<p>For example:</p>\n<pre><code class=\"language-json\">{\n    \"name\": \"AES128-SHA256\",\n    \"standardName\": \"TLS_RSA_WITH_AES_128_CBC_SHA256\",\n    \"version\": \"TLSv1.2\"\n}\n</code></pre>\n<p>See\n<a href=\"https://www.openssl.org/docs/man1.1.1/man3/SSL_CIPHER_get_name.html\">SSL_CIPHER_get_name</a>\nfor more information.</p>",
              "type": "module",
              "displayName": "`tlsSocket.getCipher()`"
            },
            {
              "textRaw": "`tlsSocket.getEphemeralKeyInfo()`",
              "name": "`tlssocket.getephemeralkeyinfo()`",
              "meta": {
                "added": [
                  "v5.0.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n</ul>\n<p>Returns an object representing the type, name, and size of parameter of\nan ephemeral key exchange in <a href=\"#tls_perfect_forward_secrecy\">Perfect Forward Secrecy</a> on a client\nconnection. It returns an empty object when the key exchange is not\nephemeral. As this is only supported on a client socket; <code>null</code> is returned\nif called on a server socket. The supported types are <code>'DH'</code> and <code>'ECDH'</code>. The\n<code>name</code> property is available only when type is <code>'ECDH'</code>.</p>\n<p>For example: <code>{ type: 'ECDH', name: 'prime256v1', size: 256 }</code>.</p>",
              "type": "module",
              "displayName": "`tlsSocket.getEphemeralKeyInfo()`"
            },
            {
              "textRaw": "`tlsSocket.getFinished()`",
              "name": "`tlssocket.getfinished()`",
              "meta": {
                "added": [
                  "v9.9.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Returns: <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type\" class=\"type\">&lt;undefined&gt;</a> The latest <code>Finished</code> message that has been\nsent to the socket as part of a SSL/TLS handshake, or <code>undefined</code> if\nno <code>Finished</code> message has been sent yet.</li>\n</ul>\n<p>As the <code>Finished</code> messages are message digests of the complete handshake\n(with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can\nbe used for external authentication procedures when the authentication\nprovided by SSL/TLS is not desired or is not enough.</p>\n<p>Corresponds to the <code>SSL_get_finished</code> routine in OpenSSL and may be used\nto implement the <code>tls-unique</code> channel binding from <a href=\"https://tools.ietf.org/html/rfc5929\">RFC 5929</a>.</p>",
              "type": "module",
              "displayName": "`tlsSocket.getFinished()`"
            },
            {
              "textRaw": "`tlsSocket.getPeerCertificate([detailed])`",
              "name": "`tlssocket.getpeercertificate([detailed])`",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>detailed</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Include the full certificate chain if <code>true</code>, otherwise\ninclude just the peer's certificate.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> A certificate object.</li>\n</ul>\n<p>Returns an object representing the peer's certificate. If the peer does not\nprovide a certificate, an empty object will be returned. If the socket has been\ndestroyed, <code>null</code> will be returned.</p>\n<p>If the full certificate chain was requested, each certificate will include an\n<code>issuerCertificate</code> property containing an object representing its issuer's\ncertificate.</p>",
              "modules": [
                {
                  "textRaw": "Certificate Object",
                  "name": "certificate_object",
                  "meta": {
                    "changes": [
                      {
                        "version": "v11.4.0",
                        "pr-url": "https://github.com/nodejs/node/pull/24358",
                        "description": "Support Elliptic Curve public key info."
                      }
                    ]
                  },
                  "desc": "<p>A certificate object has properties corresponding to the fields of the\ncertificate.</p>\n<ul>\n<li><code>raw</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The DER encoded X.509 certificate data.</li>\n<li><code>subject</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> The certificate subject, described in terms of\n Country (<code>C:</code>), StateOrProvince (<code>ST</code>), Locality (<code>L</code>), Organization (<code>O</code>),\nOrganizationalUnit (<code>OU</code>), and CommonName (<code>CN</code>). The CommonName is typically\na DNS name with TLS certificates. Example:\n<code>{C: 'UK', ST: 'BC', L: 'Metro', O: 'Node Fans', OU: 'Docs', CN: 'example.com'}</code>.</li>\n<li><code>issuer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> The certificate issuer, described in the same terms as the\n <code>subject</code>.</li>\n<li><code>valid_from</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The date-time the certificate is valid from.</li>\n<li><code>valid_to</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The date-time the certificate is valid to.</li>\n<li><code>serialNumber</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The certificate serial number, as a hex string.\n Example: <code>'B9B0D332A1AA5635'</code>.</li>\n<li><code>fingerprint</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The SHA-1 digest of the DER encoded certificate. It is\nreturned as a <code>:</code> separated hexadecimal string. Example: <code>'2A:7A:C2:DD:...'</code>.</li>\n<li><code>fingerprint256</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The SHA-256 digest of the DER encoded certificate.\n It is returned as a <code>:</code> separated hexadecimal string. Example:\n<code>'2A:7A:C2:DD:...'</code>.</li>\n<li><code>ext_key_usage</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> (Optional) The extended key usage, a set of OIDs.</li>\n<li><code>subjectaltname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> (Optional) A string containing concatenated names\nfor the subject, an alternative to the <code>subject</code> names.</li>\n<li><code>infoAccess</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> (Optional) An array describing the AuthorityInfoAccess,\n used with OCSP.</li>\n<li><code>issuerCertificate</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> (Optional) The issuer certificate object. For\n self-signed certificates, this may be a circular reference.</li>\n</ul>\n<p>The certificate may contain information about the public key, depending on\nthe key type.</p>\n<p>For RSA keys, the following properties may be defined:</p>\n<ul>\n<li><code>bits</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The RSA bit size. Example: <code>1024</code>.</li>\n<li><code>exponent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The RSA exponent, as a string in hexadecimal number\nnotation. Example: <code>'0x010001'</code>.</li>\n<li><code>modulus</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The RSA modulus, as a hexadecimal string. Example:\n <code>'B56CE45CB7...'</code>.</li>\n<li><code>pubkey</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The public key.</li>\n</ul>\n<p>For EC keys, the following properties may be defined:</p>\n<ul>\n<li><code>pubkey</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> The public key.</li>\n<li><code>bits</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The key size in bits. Example: <code>256</code>.</li>\n<li><code>asn1Curve</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> (Optional) The ASN.1 name of the OID of the elliptic\ncurve. Well-known curves are identified by an OID. While it is unusual, it is\npossible that the curve is identified by its mathematical properties, in which\ncase it will not have an OID. Example: <code>'prime256v1'</code>.</li>\n<li><code>nistCurve</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> (Optional) The NIST name for the elliptic curve, if it\nhas one (not all well-known curves have been assigned names by NIST). Example:\n<code>'P-256'</code>.</li>\n</ul>\n<p>Example certificate:</p>\n<pre><code class=\"language-text\">{ subject:\n   { OU: [ 'Domain Control Validated', 'PositiveSSL Wildcard' ],\n     CN: '*.nodejs.org' },\n  issuer:\n   { C: 'GB',\n     ST: 'Greater Manchester',\n     L: 'Salford',\n     O: 'COMODO CA Limited',\n     CN: 'COMODO RSA Domain Validation Secure Server CA' },\n  subjectaltname: 'DNS:*.nodejs.org, DNS:nodejs.org',\n  infoAccess:\n   { 'CA Issuers - URI':\n      [ 'http://crt.comodoca.com/COMODORSADomainValidationSecureServerCA.crt' ],\n     'OCSP - URI': [ 'http://ocsp.comodoca.com' ] },\n  modulus: 'B56CE45CB740B09A13F64AC543B712FF9EE8E4C284B542A1708A27E82A8D151CA178153E12E6DDA15BF70FFD96CB8A88618641BDFCCA03527E665B70D779C8A349A6F88FD4EF6557180BD4C98192872BCFE3AF56E863C09DDD8BC1EC58DF9D94F914F0369102B2870BECFA1348A0838C9C49BD1C20124B442477572347047506B1FCD658A80D0C44BCC16BC5C5496CFE6E4A8428EF654CD3D8972BF6E5BFAD59C93006830B5EB1056BBB38B53D1464FA6E02BFDF2FF66CD949486F0775EC43034EC2602AEFBF1703AD221DAA2A88353C3B6A688EFE8387811F645CEED7B3FE46E1F8B9F59FAD028F349B9BC14211D5830994D055EEA3D547911E07A0ADDEB8A82B9188E58720D95CD478EEC9AF1F17BE8141BE80906F1A339445A7EB5B285F68039B0F294598A7D1C0005FC22B5271B0752F58CCDEF8C8FD856FB7AE21C80B8A2CE983AE94046E53EDE4CB89F42502D31B5360771C01C80155918637490550E3F555E2EE75CC8C636DDE3633CFEDD62E91BF0F7688273694EEEBA20C2FC9F14A2A435517BC1D7373922463409AB603295CEB0BB53787A334C9CA3CA8B30005C5A62FC0715083462E00719A8FA3ED0A9828C3871360A73F8B04A4FC1E71302844E9BB9940B77E745C9D91F226D71AFCAD4B113AAF68D92B24DDB4A2136B55A1CD1ADF39605B63CB639038ED0F4C987689866743A68769CC55847E4A06D6E2E3F1',\n  exponent: '0x10001',\n  pubkey: &#x3C;Buffer ... >,\n  valid_from: 'Aug 14 00:00:00 2017 GMT',\n  valid_to: 'Nov 20 23:59:59 2019 GMT',\n  fingerprint: '01:02:59:D9:C3:D2:0D:08:F7:82:4E:44:A4:B4:53:C5:E2:3A:87:4D',\n  fingerprint256: '69:AE:1A:6A:D4:3D:C6:C1:1B:EA:C6:23:DE:BA:2A:14:62:62:93:5C:7A:EA:06:41:9B:0B:BC:87:CE:48:4E:02',\n  ext_key_usage: [ '1.3.6.1.5.5.7.3.1', '1.3.6.1.5.5.7.3.2' ],\n  serialNumber: '66593D57F20CBC573E433381B5FEC280',\n  raw: &#x3C;Buffer ... > }\n</code></pre>",
                  "type": "module",
                  "displayName": "Certificate Object"
                }
              ],
              "type": "module",
              "displayName": "`tlsSocket.getPeerCertificate([detailed])`"
            },
            {
              "textRaw": "`tlsSocket.getPeerFinished()`",
              "name": "`tlssocket.getpeerfinished()`",
              "meta": {
                "added": [
                  "v9.9.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Returns: <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type\" class=\"type\">&lt;undefined&gt;</a> The latest <code>Finished</code> message that is expected\nor has actually been received from the socket as part of a SSL/TLS handshake,\nor <code>undefined</code> if there is no <code>Finished</code> message so far.</li>\n</ul>\n<p>As the <code>Finished</code> messages are message digests of the complete handshake\n(with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can\nbe used for external authentication procedures when the authentication\nprovided by SSL/TLS is not desired or is not enough.</p>\n<p>Corresponds to the <code>SSL_get_peer_finished</code> routine in OpenSSL and may be used\nto implement the <code>tls-unique</code> channel binding from <a href=\"https://tools.ietf.org/html/rfc5929\">RFC 5929</a>.</p>",
              "type": "module",
              "displayName": "`tlsSocket.getPeerFinished()`"
            },
            {
              "textRaw": "`tlsSocket.getProtocol()`",
              "name": "`tlssocket.getprotocol()`",
              "meta": {
                "added": [
                  "v5.7.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\" class=\"type\">&lt;null&gt;</a></li>\n</ul>\n<p>Returns a string containing the negotiated SSL/TLS protocol version of the\ncurrent connection. The value <code>'unknown'</code> will be returned for connected\nsockets that have not completed the handshaking process. The value <code>null</code> will\nbe returned for server sockets or disconnected client sockets.</p>\n<p>Protocol versions are:</p>\n<ul>\n<li><code>'SSLv3'</code></li>\n<li><code>'TLSv1'</code></li>\n<li><code>'TLSv1.1'</code></li>\n<li><code>'TLSv1.2'</code></li>\n<li><code>'TLSv1.3'</code></li>\n</ul>\n<p>See the OpenSSL <a href=\"https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version.html\"><code>SSL_get_version</code></a> documentation for more information.</p>",
              "type": "module",
              "displayName": "`tlsSocket.getProtocol()`"
            },
            {
              "textRaw": "`tlsSocket.getSession()`",
              "name": "`tlssocket.getsession()`",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>Returns the TLS session data or <code>undefined</code> if no session was\nnegotiated. On the client, the data can be provided to the <code>session</code> option of\n<a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a> to resume the connection. On the server, it may be useful\nfor debugging.</p>\n<p>See <a href=\"#tls_session_resumption\">Session Resumption</a> for more information.</p>\n<p>Note: <code>getSession()</code> works only for TLSv1.2 and below. For TLSv1.3, applications\nmust use the <a href=\"#tls_event_session\"><code>'session'</code></a> event (it also works for TLSv1.2 and below).</p>",
              "type": "module",
              "displayName": "`tlsSocket.getSession()`"
            },
            {
              "textRaw": "`tlsSocket.getSharedSigalgs()`",
              "name": "`tlssocket.getsharedsigalgs()`",
              "meta": {
                "added": [
                  "v12.11.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" class=\"type\">&lt;Array&gt;</a> List of signature algorithms shared between the server and\nthe client in the order of decreasing preference.</li>\n</ul>\n<p>See\n<a href=\"https://www.openssl.org/docs/man1.1.1/man3/SSL_get_shared_sigalgs.html\">SSL_get_shared_sigalgs</a>\nfor more information.</p>",
              "type": "module",
              "displayName": "`tlsSocket.getSharedSigalgs()`"
            },
            {
              "textRaw": "`tlsSocket.getTLSTicket()`",
              "name": "`tlssocket.gettlsticket()`",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a></li>\n</ul>\n<p>For a client, returns the TLS session ticket if one is available, or\n<code>undefined</code>. For a server, always returns <code>undefined</code>.</p>\n<p>It may be useful for debugging.</p>\n<p>See <a href=\"#tls_session_resumption\">Session Resumption</a> for more information.</p>",
              "type": "module",
              "displayName": "`tlsSocket.getTLSTicket()`"
            },
            {
              "textRaw": "`tlsSocket.isSessionReused()`",
              "name": "`tlssocket.issessionreused()`",
              "meta": {
                "added": [
                  "v0.5.6"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> if the session was reused, <code>false</code> otherwise.</li>\n</ul>\n<p>See <a href=\"#tls_session_resumption\">Session Resumption</a> for more information.</p>",
              "type": "module",
              "displayName": "`tlsSocket.isSessionReused()`"
            },
            {
              "textRaw": "`tlsSocket.localAddress`",
              "name": "`tlssocket.localaddress`",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>Returns the string representation of the local IP address.</p>",
              "type": "module",
              "displayName": "`tlsSocket.localAddress`"
            },
            {
              "textRaw": "`tlsSocket.localPort`",
              "name": "`tlssocket.localport`",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>Returns the numeric representation of the local port.</p>",
              "type": "module",
              "displayName": "`tlsSocket.localPort`"
            },
            {
              "textRaw": "`tlsSocket.remoteAddress`",
              "name": "`tlssocket.remoteaddress`",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>Returns the string representation of the remote IP address. For example,\n<code>'74.125.127.100'</code> or <code>'2001:4860:a005::68'</code>.</p>",
              "type": "module",
              "displayName": "`tlsSocket.remoteAddress`"
            },
            {
              "textRaw": "`tlsSocket.remoteFamily`",
              "name": "`tlssocket.remotefamily`",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>Returns the string representation of the remote IP family. <code>'IPv4'</code> or <code>'IPv6'</code>.</p>",
              "type": "module",
              "displayName": "`tlsSocket.remoteFamily`"
            },
            {
              "textRaw": "`tlsSocket.remotePort`",
              "name": "`tlssocket.remoteport`",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a></li>\n</ul>\n<p>Returns the numeric representation of the remote port. For example, <code>443</code>.</p>",
              "type": "module",
              "displayName": "`tlsSocket.remotePort`"
            },
            {
              "textRaw": "`tlsSocket.renegotiate(options, callback)`",
              "name": "`tlssocket.renegotiate(options,_callback)`",
              "meta": {
                "added": [
                  "v0.11.8"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>rejectUnauthorized</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If not <code>false</code>, the server certificate is\nverified against the list of supplied CAs. An <code>'error'</code> event is emitted if\nverification fails; <code>err.code</code> contains the OpenSSL error code. <strong>Default:</strong>\n<code>true</code>.</li>\n<li><code>requestCert</code></li>\n</ul>\n</li>\n<li>\n<p><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> If <code>renegotiate()</code> returned <code>true</code>, callback is\nattached once to the <code>'secure'</code> event. If <code>renegotiate()</code> returned <code>false</code>,\n<code>callback</code> will be called in the next tick with an error, unless the\n<code>tlsSocket</code> has been destroyed, in which case <code>callback</code> will not be called\nat all.</p>\n</li>\n<li>\n<p>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> if renegotiation was initiated, <code>false</code> otherwise.</p>\n</li>\n</ul>\n<p>The <code>tlsSocket.renegotiate()</code> method initiates a TLS renegotiation process.\nUpon completion, the <code>callback</code> function will be passed a single argument\nthat is either an <code>Error</code> (if the request failed) or <code>null</code>.</p>\n<p>This method can be used to request a peer's certificate after the secure\nconnection has been established.</p>\n<p>When running as the server, the socket will be destroyed with an error after\n<code>handshakeTimeout</code> timeout.</p>\n<p>For TLSv1.3, renegotiation cannot be initiated, it is not supported by the\nprotocol.</p>",
              "type": "module",
              "displayName": "`tlsSocket.renegotiate(options, callback)`"
            },
            {
              "textRaw": "`tlsSocket.setMaxSendFragment(size)`",
              "name": "`tlssocket.setmaxsendfragment(size)`",
              "meta": {
                "added": [
                  "v0.11.11"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>size</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The maximum TLS fragment size. The maximum value is <code>16384</code>.\n<strong>Default:</strong> <code>16384</code>.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a></li>\n</ul>\n<p>The <code>tlsSocket.setMaxSendFragment()</code> method sets the maximum TLS fragment size.\nReturns <code>true</code> if setting the limit succeeded; <code>false</code> otherwise.</p>\n<p>Smaller fragment sizes decrease the buffering latency on the client: larger\nfragments are buffered by the TLS layer until the entire fragment is received\nand its integrity is verified; large fragments can span multiple roundtrips\nand their processing can be delayed due to packet loss or reordering. However,\nsmaller fragments add extra TLS framing bytes and CPU overhead, which may\ndecrease overall server throughput.</p>",
              "type": "module",
              "displayName": "`tlsSocket.setMaxSendFragment(size)`"
            }
          ],
          "type": "module",
          "displayName": "Class: `tls.TLSSocket`"
        },
        {
          "textRaw": "`tls.checkServerIdentity(hostname, cert)`",
          "name": "`tls.checkserveridentity(hostname,_cert)`",
          "meta": {
            "added": [
              "v0.8.4"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li><code>hostname</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The host name or IP address to verify the certificate\nagainst.</li>\n<li><code>cert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> A <a href=\"#tls_certificate_object\">certificate object</a> representing the peer's certificate.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type\" class=\"type\">&lt;undefined&gt;</a></li>\n</ul>\n<p>Verifies the certificate <code>cert</code> is issued to <code>hostname</code>.</p>\n<p>Returns <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> object, populating it with <code>reason</code>, <code>host</code>, and <code>cert</code> on\nfailure. On success, returns <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type\" class=\"type\">&lt;undefined&gt;</a>.</p>\n<p>This function can be overwritten by providing alternative function as part of\nthe <code>options.checkServerIdentity</code> option passed to <code>tls.connect()</code>. The\noverwriting function can call <code>tls.checkServerIdentity()</code> of course, to augment\nthe checks done with additional verification.</p>\n<p>This function is only called if the certificate passed all other checks, such as\nbeing issued by trusted CA (<code>options.ca</code>).</p>",
          "type": "module",
          "displayName": "`tls.checkServerIdentity(hostname, cert)`"
        },
        {
          "textRaw": "`tls.connect(options[, callback])`",
          "name": "`tls.connect(options[,_callback])`",
          "meta": {
            "added": [
              "v0.11.3"
            ],
            "changes": [
              {
                "version": "v12.16.0",
                "pr-url": "https://github.com/nodejs/node/pull/23188",
                "description": "The `pskCallback` option is now supported."
              },
              {
                "version": "v12.9.0",
                "pr-url": "https://github.com/nodejs/node/pull/27836",
                "description": "Support the `allowHalfOpen` option."
              },
              {
                "version": "v12.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/27816",
                "description": "The `hints` option is now supported."
              },
              {
                "version": "v12.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/27497",
                "description": "The `enableTrace` option is now supported."
              },
              {
                "version": "v11.8.0",
                "pr-url": "https://github.com/nodejs/node/pull/25517",
                "description": "The `timeout` option is supported now."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12839",
                "description": "The `lookup` option is supported now."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/11984",
                "description": "The `ALPNProtocols` option can be a `TypedArray` or `DataView` now."
              },
              {
                "version": "v5.3.0, v4.7.0",
                "pr-url": "https://github.com/nodejs/node/pull/4246",
                "description": "The `secureContext` option is supported now."
              },
              {
                "version": "v5.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/2564",
                "description": "ALPN options are supported now."
              }
            ]
          },
          "desc": "<ul>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>enableTrace</code>: See <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>host</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Host the client should connect to. <strong>Default:</strong>\n<code>'localhost'</code>.</li>\n<li><code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Port the client should connect to.</li>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Creates Unix socket connection to path. If this option is\nspecified, <code>host</code> and <code>port</code> are ignored.</li>\n<li><code>socket</code> <a href=\"stream.html#stream_class_stream_duplex\" class=\"type\">&lt;stream.Duplex&gt;</a> Establish secure connection on a given socket\nrather than creating a new socket. Typically, this is an instance of\n<a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>, but any <code>Duplex</code> stream is allowed.\nIf this option is specified, <code>path</code>, <code>host</code> and <code>port</code> are ignored,\nexcept for certificate validation. Usually, a socket is already connected\nwhen passed to <code>tls.connect()</code>, but it can be connected later.\nConnection/disconnection/destruction of <code>socket</code> is the user's\nresponsibility; calling <code>tls.connect()</code> will not cause <code>net.connect()</code> to be\ncalled.</li>\n<li><code>allowHalfOpen</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If the <code>socket</code> option is missing, indicates\nwhether or not to allow the internally created socket to be half-open,\notherwise the option is ignored. See the <code>allowHalfOpen</code> option of\n<a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> for details. <strong>Default:</strong> <code>false</code>.</li>\n<li><code>rejectUnauthorized</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If not <code>false</code>, the server certificate is\nverified against the list of supplied CAs. An <code>'error'</code> event is emitted if\nverification fails; <code>err.code</code> contains the OpenSSL error code. <strong>Default:</strong>\n<code>true</code>.</li>\n<li>\n<p><code>pskCallback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></p>\n<ul>\n<li>hint: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> optional message sent from the server to help client\ndecide which identity to use during negotiation.\nAlways <code>null</code> if TLS 1.3 is used.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> in the form\n  <code>{ psk: &#x3C;Buffer|TypedArray|DataView>, identity: &#x3C;string> }</code>\nor <code>null</code> to stop the negotiation process. <code>psk</code> must be\ncompatible with the selected cipher's digest.\n<code>identity</code> must use UTF-8 encoding.\nWhen negotiating TLS-PSK (pre-shared keys), this function is called\nwith optional identity <code>hint</code> provided by the server or <code>null</code>\nin case of TLS 1.3 where <code>hint</code> was removed.\nIt will be necessary to provide a custom <code>tls.checkServerIdentity()</code>\nfor the connection as the default one will try to check hostname/IP\nof the server against the certificate but that's not applicable for PSK\nbecause there won't be a certificate present.\nMore information can be found in the <a href=\"https://tools.ietf.org/html/rfc4279\">RFC 4279</a>.</li>\n</ul>\n</li>\n<li><code>ALPNProtocols</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer[]&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" class=\"type\">&lt;TypedArray[]&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" class=\"type\">&lt;DataView[]&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" class=\"type\">&lt;TypedArray&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" class=\"type\">&lt;DataView&gt;</a>\nAn array of strings, <code>Buffer</code>s or <code>TypedArray</code>s or <code>DataView</code>s, or a\nsingle <code>Buffer</code> or <code>TypedArray</code> or <code>DataView</code> containing the supported ALPN\nprotocols. <code>Buffer</code>s should have the format <code>[len][name][len][name]...</code>\ne.g. <code>'\\x08http/1.1\\x08http/1.0'</code>, where the <code>len</code> byte is the length of the\nnext protocol name. Passing an array is usually much simpler, e.g.\n<code>['http/1.1', 'http/1.0']</code>. Protocols earlier in the list have higher\npreference than those later.</li>\n<li><code>servername</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Server name for the SNI (Server Name Indication) TLS\nextension. It is the name of the host being connected to, and must be a host\nname, and not an IP address. It can be used by a multi-homed server to\nchoose the correct certificate to present to the client, see the\n<code>SNICallback</code> option to <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>.</li>\n<li><code>checkServerIdentity(servername, cert)</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A callback function\nto be used (instead of the builtin <code>tls.checkServerIdentity()</code> function)\nwhen checking the server's hostname (or the provided <code>servername</code> when\nexplicitly set) against the certificate. This should return an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" class=\"type\">&lt;Error&gt;</a> if\nverification fails. The method should return <code>undefined</code> if the <code>servername</code>\nand <code>cert</code> are verified.</li>\n<li><code>session</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A <code>Buffer</code> instance, containing TLS session.</li>\n<li><code>minDHSize</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Minimum size of the DH parameter in bits to accept a\nTLS connection. When a server offers a DH parameter with a size less\nthan <code>minDHSize</code>, the TLS connection is destroyed and an error is thrown.\n<strong>Default:</strong> <code>1024</code>.</li>\n<li><code>secureContext</code>: TLS context object created with\n<a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>. If a <code>secureContext</code> is <em>not</em> provided, one\nwill be created by passing the entire <code>options</code> object to\n<code>tls.createSecureContext()</code>.</li>\n<li>...: <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> options that are used if the\n<code>secureContext</code> option is missing, otherwise they are ignored.</li>\n<li>...: Any <a href=\"net.html#net_socket_connect_options_connectlistener\"><code>socket.connect()</code></a> option not already listed.</li>\n</ul>\n</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li>Returns: <a href=\"tls.html#tls_class_tls_tlssocket\" class=\"type\">&lt;tls.TLSSocket&gt;</a></li>\n</ul>\n<p>The <code>callback</code> function, if specified, will be added as a listener for the\n<a href=\"#tls_event_secureconnect\"><code>'secureConnect'</code></a> event.</p>\n<p><code>tls.connect()</code> returns a <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> object.</p>\n<p>The following illustrates a client for the echo server example from\n<a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>:</p>\n<pre><code class=\"language-js\">// Assumes an echo server that is listening on port 8000.\nconst tls = require('tls');\nconst fs = require('fs');\n\nconst options = {\n  // Necessary only if the server requires client certificate authentication.\n  key: fs.readFileSync('client-key.pem'),\n  cert: fs.readFileSync('client-cert.pem'),\n\n  // Necessary only if the server uses a self-signed certificate.\n  ca: [ fs.readFileSync('server-cert.pem') ],\n\n  // Necessary only if the server's cert isn't for \"localhost\".\n  checkServerIdentity: () => { return null; },\n};\n\nconst socket = tls.connect(8000, options, () => {\n  console.log('client connected',\n              socket.authorized ? 'authorized' : 'unauthorized');\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\nsocket.setEncoding('utf8');\nsocket.on('data', (data) => {\n  console.log(data);\n});\nsocket.on('end', () => {\n  console.log('server ends connection');\n});\n</code></pre>",
          "type": "module",
          "displayName": "`tls.connect(options[, callback])`"
        },
        {
          "textRaw": "`tls.connect(path[, options][, callback])`",
          "name": "`tls.connect(path[,_options][,_callback])`",
          "meta": {
            "added": [
              "v0.11.3"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li><code>path</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Default value for <code>options.path</code>.</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> See <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>.</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> See <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>.</li>\n<li>Returns: <a href=\"tls.html#tls_class_tls_tlssocket\" class=\"type\">&lt;tls.TLSSocket&gt;</a></li>\n</ul>\n<p>Same as <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a> except that <code>path</code> can be provided\nas an argument instead of an option.</p>\n<p>A path option, if specified, will take precedence over the path argument.</p>",
          "type": "module",
          "displayName": "`tls.connect(path[, options][, callback])`"
        },
        {
          "textRaw": "`tls.connect(port[, host][, options][, callback])`",
          "name": "`tls.connect(port[,_host][,_options][,_callback])`",
          "meta": {
            "added": [
              "v0.11.3"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li><code>port</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Default value for <code>options.port</code>.</li>\n<li><code>host</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Default value for <code>options.host</code>.</li>\n<li><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> See <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>.</li>\n<li><code>callback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> See <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>.</li>\n<li>Returns: <a href=\"tls.html#tls_class_tls_tlssocket\" class=\"type\">&lt;tls.TLSSocket&gt;</a></li>\n</ul>\n<p>Same as <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a> except that <code>port</code> and <code>host</code> can be provided\nas arguments instead of options.</p>\n<p>A port or host option, if specified, will take precedence over any port or host\nargument.</p>",
          "type": "module",
          "displayName": "`tls.connect(port[, host][, options][, callback])`"
        },
        {
          "textRaw": "`tls.createSecureContext([options])`",
          "name": "`tls.createsecurecontext([options])`",
          "meta": {
            "added": [
              "v0.11.13"
            ],
            "changes": [
              {
                "version": "v12.12.0",
                "pr-url": "https://github.com/nodejs/node/pull/28973",
                "description": "Added `privateKeyIdentifier` and `privateKeyEngine` options to get private key from an OpenSSL engine."
              },
              {
                "version": "v12.11.0",
                "pr-url": "https://github.com/nodejs/node/pull/29598",
                "description": "Added `sigalgs` option to override supported signature algorithms."
              },
              {
                "version": "v12.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/26209",
                "description": "TLSv1.3 support added."
              },
              {
                "version": "v11.5.0",
                "pr-url": "https://github.com/nodejs/node/pull/24733",
                "description": "The `ca:` option now supports `BEGIN TRUSTED CERTIFICATE`."
              },
              {
                "version": "v11.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/24405",
                "description": "The `minVersion` and `maxVersion` can be used to restrict the allowed TLS protocol versions."
              },
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/19794",
                "description": "The `ecdhCurve` cannot be set to `false` anymore due to a change in OpenSSL."
              },
              {
                "version": "v9.3.0",
                "pr-url": "https://github.com/nodejs/node/pull/14903",
                "description": "The `options` parameter can now include `clientCertEngine`."
              },
              {
                "version": "v9.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/15206",
                "description": "The `ecdhCurve` option can now be multiple `':'` separated curve names or `'auto'`."
              },
              {
                "version": "v7.3.0",
                "pr-url": "https://github.com/nodejs/node/pull/10294",
                "description": "If the `key` option is an array, individual entries do not need a `passphrase` property anymore. `Array` entries can also just be `string`s or `Buffer`s now."
              },
              {
                "version": "v5.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/4099",
                "description": "The `ca` option can now be a single string containing multiple CA certificates."
              }
            ]
          },
          "desc": "<ul>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>ca</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer[]&gt;</a> Optionally override the trusted CA\ncertificates. Default is to trust the well-known CAs curated by Mozilla.\nMozilla's CAs are completely replaced when CAs are explicitly specified\nusing this option. The value can be a string or <code>Buffer</code>, or an <code>Array</code> of\nstrings and/or <code>Buffer</code>s. Any string or <code>Buffer</code> can contain multiple PEM\nCAs concatenated together. The peer's certificate must be chainable to a CA\ntrusted by the server for the connection to be authenticated. When using\ncertificates that are not chainable to a well-known CA, the certificate's CA\nmust be explicitly specified as a trusted or the connection will fail to\nauthenticate.\nIf the peer uses a certificate that doesn't match or chain to one of the\ndefault CAs, use the <code>ca</code> option to provide a CA certificate that the peer's\ncertificate can match or chain to.\nFor self-signed certificates, the certificate is its own CA, and must be\nprovided.\nFor PEM encoded certificates, supported types are \"TRUSTED CERTIFICATE\",\n\"X509 CERTIFICATE\", and \"CERTIFICATE\".\nSee also <a href=\"#tls_tls_rootcertificates\"><code>tls.rootCertificates</code></a>.</li>\n<li><code>cert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer[]&gt;</a> Cert chains in PEM format. One cert\nchain should be provided per private key. Each cert chain should consist of\nthe PEM formatted certificate for a provided private <code>key</code>, followed by the\nPEM formatted intermediate certificates (if any), in order, and not\nincluding the root CA (the root CA must be pre-known to the peer, see <code>ca</code>).\nWhen providing multiple cert chains, they do not have to be in the same\norder as their private keys in <code>key</code>. If the intermediate certificates are\nnot provided, the peer will not be able to validate the certificate, and the\nhandshake will fail.</li>\n<li><code>sigalgs</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Colon-separated list of supported signature algorithms.\nThe list can contain digest algorithms (<code>SHA256</code>, <code>MD5</code> etc.), public key\nalgorithms (<code>RSA-PSS</code>, <code>ECDSA</code> etc.), combination of both (e.g\n'RSA+SHA384') or TLS v1.3 scheme names (e.g. <code>rsa_pss_pss_sha512</code>).\nSee <a href=\"https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set1_sigalgs_list.html\">OpenSSL man pages</a>\nfor more info.</li>\n<li><code>ciphers</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Cipher suite specification, replacing the default. For\nmore information, see <a href=\"#tls_modifying_the_default_tls_cipher_suite\">modifying the default cipher suite</a>. Permitted\nciphers can be obtained via <a href=\"#tls_tls_getciphers\"><code>tls.getCiphers()</code></a>. Cipher names must be\nuppercased in order for OpenSSL to accept them.</li>\n<li><code>clientCertEngine</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Name of an OpenSSL engine which can provide the\nclient certificate.</li>\n<li><code>crl</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer[]&gt;</a> PEM formatted CRLs (Certificate\nRevocation Lists).</li>\n<li><code>dhparam</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> Diffie Hellman parameters, required for\n<a href=\"#tls_perfect_forward_secrecy\">Perfect Forward Secrecy</a>. Use <code>openssl dhparam</code> to create the parameters.\nThe key length must be greater than or equal to 1024 bits or else an error\nwill be thrown. Although 1024 bits is permissible, use 2048 bits or larger\nfor stronger security. If omitted or invalid, the parameters are silently\ndiscarded and DHE ciphers will not be available.</li>\n<li><code>ecdhCurve</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> A string describing a named curve or a colon separated\nlist of curve NIDs or names, for example <code>P-521:P-384:P-256</code>, to use for\nECDH key agreement. Set to <code>auto</code> to select the\ncurve automatically. Use <a href=\"crypto.html#crypto_crypto_getcurves\"><code>crypto.getCurves()</code></a> to obtain a list of\navailable curve names. On recent releases, <code>openssl ecparam -list_curves</code>\nwill also display the name and description of each available elliptic curve.\n<strong>Default:</strong> <a href=\"#tls_tls_default_ecdh_curve\"><code>tls.DEFAULT_ECDH_CURVE</code></a>.</li>\n<li><code>honorCipherOrder</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> Attempt to use the server's cipher suite\npreferences instead of the client's. When <code>true</code>, causes\n<code>SSL_OP_CIPHER_SERVER_PREFERENCE</code> to be set in <code>secureOptions</code>, see\n<a href=\"crypto.html#crypto_openssl_options\">OpenSSL Options</a> for more information.</li>\n<li><code>key</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer[]&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object[]&gt;</a> Private keys in PEM format.\nPEM allows the option of private keys being encrypted. Encrypted keys will\nbe decrypted with <code>options.passphrase</code>. Multiple keys using different\nalgorithms can be provided either as an array of unencrypted key strings or\nbuffers, or an array of objects in the form\n<code>{pem: &#x3C;string|buffer>[, passphrase: &#x3C;string>]}</code>. The object form can only\noccur in an array. <code>object.passphrase</code> is optional. Encrypted keys will be\ndecrypted with <code>object.passphrase</code> if provided, or <code>options.passphrase</code> if\nit is not.</li>\n<li><code>privateKeyEngine</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Name of an OpenSSL engine to get private key\nfrom. Should be used together with <code>privateKeyIdentifier</code>.</li>\n<li><code>privateKeyIdentifier</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Identifier of a private key managed by\nan OpenSSL engine. Should be used together with <code>privateKeyEngine</code>.\nShould not be set together with <code>key</code>, because both options define a\nprivate key in different ways.</li>\n<li><code>maxVersion</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Optionally set the maximum TLS version to allow. One\nof <code>'TLSv1.3'</code>, <code>'TLSv1.2'</code>, <code>'TLSv1.1'</code>, or <code>'TLSv1'</code>. Cannot be specified\nalong with the <code>secureProtocol</code> option, use one or the other.\n<strong>Default:</strong> <a href=\"#tls_tls_default_max_version\"><code>tls.DEFAULT_MAX_VERSION</code></a>.</li>\n<li><code>minVersion</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Optionally set the minimum TLS version to allow. One\nof <code>'TLSv1.3'</code>, <code>'TLSv1.2'</code>, <code>'TLSv1.1'</code>, or <code>'TLSv1'</code>. Cannot be specified\nalong with the <code>secureProtocol</code> option, use one or the other. It is not\nrecommended to use less than TLSv1.2, but it may be required for\ninteroperability.\n<strong>Default:</strong> <a href=\"#tls_tls_default_min_version\"><code>tls.DEFAULT_MIN_VERSION</code></a>.</li>\n<li><code>passphrase</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Shared passphrase used for a single private key and/or\na PFX.</li>\n<li><code>pfx</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer[]&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object[]&gt;</a> PFX or PKCS12 encoded\nprivate key and certificate chain. <code>pfx</code> is an alternative to providing\n<code>key</code> and <code>cert</code> individually. PFX is usually encrypted, if it is,\n<code>passphrase</code> will be used to decrypt it. Multiple PFX can be provided either\nas an array of unencrypted PFX buffers, or an array of objects in the form\n<code>{buf: &#x3C;string|buffer>[, passphrase: &#x3C;string>]}</code>. The object form can only\noccur in an array. <code>object.passphrase</code> is optional. Encrypted PFX will be\ndecrypted with <code>object.passphrase</code> if provided, or <code>options.passphrase</code> if\nit is not.</li>\n<li><code>secureOptions</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Optionally affect the OpenSSL protocol behavior,\nwhich is not usually necessary. This should be used carefully if at all!\nValue is a numeric bitmask of the <code>SSL_OP_*</code> options from\n<a href=\"crypto.html#crypto_openssl_options\">OpenSSL Options</a>.</li>\n<li><code>secureProtocol</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Legacy mechanism to select the TLS protocol\nversion to use, it does not support independent control of the minimum and\nmaximum version, and does not support limiting the protocol to TLSv1.3.  Use\n<code>minVersion</code> and <code>maxVersion</code> instead.  The possible values are listed as\n<a href=\"https://www.openssl.org/docs/man1.1.1/man7/ssl.html#Dealing-with-Protocol-Methods\">SSL_METHODS</a>, use the function names as strings.  For example, use\n<code>'TLSv1_1_method'</code> to force TLS version 1.1, or <code>'TLS_method'</code> to allow any\nTLS protocol version up to TLSv1.3.  It is not recommended to use TLS\nversions less than 1.2, but it may be required for interoperability.\n<strong>Default:</strong> none, see <code>minVersion</code>.</li>\n<li><code>sessionIdContext</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Opaque identifier used by servers to ensure\nsession state is not shared between applications. Unused by clients.</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a> sets the default value of the <code>honorCipherOrder</code> option\nto <code>true</code>, other APIs that create secure contexts leave it unset.</p>\n<p><a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a> uses a 128 bit truncated SHA1 hash value generated\nfrom <code>process.argv</code> as the default value of the <code>sessionIdContext</code> option, other\nAPIs that create secure contexts have no default value.</p>\n<p>The <code>tls.createSecureContext()</code> method creates a <code>SecureContext</code> object. It is\nusable as an argument to several <code>tls</code> APIs, such as <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>\nand <a href=\"#tls_server_addcontext_hostname_context\"><code>server.addContext()</code></a>, but has no public methods.</p>\n<p>A key is <em>required</em> for ciphers that make use of certificates. Either <code>key</code> or\n<code>pfx</code> can be used to provide it.</p>\n<p>If the <code>ca</code> option is not given, then Node.js will default to using\n<a href=\"https://hg.mozilla.org/mozilla-central/raw-file/tip/security/nss/lib/ckfw/builtins/certdata.txt\">Mozilla's publicly trusted list of CAs</a>.</p>",
          "type": "module",
          "displayName": "`tls.createSecureContext([options])`"
        },
        {
          "textRaw": "`tls.createServer([options][, secureConnectionListener])`",
          "name": "`tls.createserver([options][,_secureconnectionlistener])`",
          "meta": {
            "added": [
              "v0.3.2"
            ],
            "changes": [
              {
                "version": "v12.3.0",
                "pr-url": "https://github.com/nodejs/node/pull/27665",
                "description": "The `options` parameter now supports `net.createServer()` options."
              },
              {
                "version": "v9.3.0",
                "pr-url": "https://github.com/nodejs/node/pull/14903",
                "description": "The `options` parameter can now include `clientCertEngine`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/11984",
                "description": "The `ALPNProtocols` option can be a `TypedArray` or `DataView` now."
              },
              {
                "version": "v5.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/2564",
                "description": "ALPN options are supported now."
              }
            ]
          },
          "desc": "<ul>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></p>\n<ul>\n<li><code>ALPNProtocols</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer[]&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" class=\"type\">&lt;TypedArray[]&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" class=\"type\">&lt;DataView[]&gt;</a> | <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" class=\"type\">&lt;TypedArray&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" class=\"type\">&lt;DataView&gt;</a>\nAn array of strings, <code>Buffer</code>s or <code>TypedArray</code>s or <code>DataView</code>s, or a single\n<code>Buffer</code> or <code>TypedArray</code> or <code>DataView</code> containing the supported ALPN\nprotocols. <code>Buffer</code>s should have the format <code>[len][name][len][name]...</code>\ne.g. <code>0x05hello0x05world</code>, where the first byte is the length of the next\nprotocol name. Passing an array is usually much simpler, e.g.\n<code>['hello', 'world']</code>. (Protocols should be ordered by their priority.)</li>\n<li><code>clientCertEngine</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> Name of an OpenSSL engine which can provide the\nclient certificate.</li>\n<li><code>enableTrace</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, <a href=\"#tls_tlssocket_enabletrace\"><code>tls.TLSSocket.enableTrace()</code></a> will be\ncalled on new connections. Tracing can be enabled after the secure\nconnection is established, but this option must be used to trace the secure\nconnection setup. <strong>Default:</strong> <code>false</code>.</li>\n<li><code>handshakeTimeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> Abort the connection if the SSL/TLS handshake\ndoes not finish in the specified number of milliseconds.\nA <code>'tlsClientError'</code> is emitted on the <code>tls.Server</code> object whenever\na handshake times out. <strong>Default:</strong> <code>120000</code> (120 seconds).</li>\n<li><code>rejectUnauthorized</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If not <code>false</code> the server will reject any\nconnection which is not authorized with the list of supplied CAs. This\noption only has an effect if <code>requestCert</code> is <code>true</code>. <strong>Default:</strong> <code>true</code>.</li>\n<li><code>requestCert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code> the server will request a certificate from\nclients that connect and attempt to verify that certificate. <strong>Default:</strong>\n<code>false</code>.</li>\n<li><code>sessionTimeout</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\" class=\"type\">&lt;number&gt;</a> The number of seconds after which a TLS session\ncreated by the server will no longer be resumable. See\n<a href=\"#tls_session_resumption\">Session Resumption</a> for more information. <strong>Default:</strong> <code>300</code>.</li>\n<li><code>SNICallback(servername, cb)</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a> A function that will be called if\nthe client supports SNI TLS extension. Two arguments will be passed when\ncalled: <code>servername</code> and <code>cb</code>. <code>SNICallback</code> should invoke <code>cb(null, ctx)</code>,\nwhere <code>ctx</code> is a <code>SecureContext</code> instance. (<code>tls.createSecureContext(...)</code>\ncan be used to get a proper <code>SecureContext</code>.) If <code>SNICallback</code> wasn't\nprovided the default callback with high-level API will be used (see below).</li>\n<li><code>ticketKeys</code>: <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> 48-bytes of cryptographically strong pseudo-random\ndata. See <a href=\"#tls_session_resumption\">Session Resumption</a> for more information.</li>\n<li>\n<p><code>pskCallback</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></p>\n<ul>\n<li>socket: <a href=\"tls.html#tls_class_tls_tlssocket\" class=\"type\">&lt;tls.TLSSocket&gt;</a> the server <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> instance for\nthis connection.</li>\n<li>identity: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> identity parameter sent from the client.</li>\n<li>Returns: <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\" class=\"type\">&lt;TypedArray&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\" class=\"type\">&lt;DataView&gt;</a> pre-shared key that must either be\n  a buffer or <code>null</code> to stop the negotiation process. Returned PSK must be\ncompatible with the selected cipher's digest.\nWhen negotiating TLS-PSK (pre-shared keys), this function is called\nwith the identity provided by the client.\nIf the return value is <code>null</code> the negotiation process will stop and an\n\"unknown_psk_identity\" alert message will be sent to the other party.\nIf the server wishes to hide the fact that the PSK identity was not known,\nthe callback must provide some random data as <code>psk</code> to make the connection\nfail with \"decrypt_error\" before negotiation is finished.\nPSK ciphers are disabled by default, and using TLS-PSK thus\nrequires explicitly specifying a cipher suite with the <code>ciphers</code> option.\nMore information can be found in the <a href=\"https://tools.ietf.org/html/rfc4279\">RFC 4279</a>.</li>\n</ul>\n</li>\n<li><code>pskIdentityHint</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> optional hint to send to a client to help\nwith selecting the identity during TLS-PSK negotiation. Will be ignored\nin TLS 1.3. Upon failing to set pskIdentityHint <code>'tlsClientError'</code> will be\nemitted with <code>'ERR_TLS_PSK_SET_IDENTIY_HINT_FAILED'</code> code.</li>\n<li>...: Any <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> option can be provided. For\nservers, the identity options (<code>pfx</code>, <code>key</code>/<code>cert</code> or <code>pskCallback</code>)\nare usually required.</li>\n<li>...: Any <a href=\"net.html#net_net_createserver_options_connectionlistener\"><code>net.createServer()</code></a> option can be provided.</li>\n</ul>\n</li>\n<li><code>secureConnectionListener</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li>Returns: <a href=\"tls.html#tls_class_tls_server\" class=\"type\">&lt;tls.Server&gt;</a></li>\n</ul>\n<p>Creates a new <a href=\"#tls_class_tls_server\"><code>tls.Server</code></a>. The <code>secureConnectionListener</code>, if provided, is\nautomatically set as a listener for the <a href=\"#tls_event_secureconnection\"><code>'secureConnection'</code></a> event.</p>\n<p>The <code>ticketKeys</code> options is automatically shared between <code>cluster</code> module\nworkers.</p>\n<p>The following illustrates a simple echo server:</p>\n<pre><code class=\"language-js\">const tls = require('tls');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('server-key.pem'),\n  cert: fs.readFileSync('server-cert.pem'),\n\n  // This is necessary only if using client certificate authentication.\n  requestCert: true,\n\n  // This is necessary only if the client uses a self-signed certificate.\n  ca: [ fs.readFileSync('client-cert.pem') ]\n};\n\nconst server = tls.createServer(options, (socket) => {\n  console.log('server connected',\n              socket.authorized ? 'authorized' : 'unauthorized');\n  socket.write('welcome!\\n');\n  socket.setEncoding('utf8');\n  socket.pipe(socket);\n});\nserver.listen(8000, () => {\n  console.log('server bound');\n});\n</code></pre>\n<p>The server can be tested by connecting to it using the example client from\n<a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>.</p>",
          "type": "module",
          "displayName": "`tls.createServer([options][, secureConnectionListener])`"
        },
        {
          "textRaw": "`tls.getCiphers()`",
          "name": "`tls.getciphers()`",
          "meta": {
            "added": [
              "v0.10.2"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a></li>\n</ul>\n<p>Returns an array with the names of the supported TLS ciphers. The names are\nlower-case for historical reasons, but must be uppercased to be used in\nthe <code>ciphers</code> option of <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>.</p>\n<p>Cipher names that start with <code>'tls_'</code> are for TLSv1.3, all the others are for\nTLSv1.2 and below.</p>\n<pre><code class=\"language-js\">console.log(tls.getCiphers()); // ['aes128-gcm-sha256', 'aes128-sha', ...]\n</code></pre>",
          "type": "module",
          "displayName": "`tls.getCiphers()`"
        },
        {
          "textRaw": "`tls.rootCertificates`",
          "name": "`tls.rootcertificates`",
          "meta": {
            "added": [
              "v12.3.0"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a></li>\n</ul>\n<p>An immutable array of strings representing the root certificates (in PEM format)\nused for verifying peer certificates. This is the default value of the <code>ca</code>\noption to <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>.</p>",
          "type": "module",
          "displayName": "`tls.rootCertificates`"
        },
        {
          "textRaw": "`tls.DEFAULT_ECDH_CURVE`",
          "name": "`tls.default_ecdh_curve`",
          "meta": {
            "added": [
              "v0.11.13"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/16853",
                "description": "Default value changed to `'auto'`."
              }
            ]
          },
          "desc": "<p>The default curve name to use for ECDH key agreement in a tls server. The\ndefault value is <code>'auto'</code>. See <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> for further\ninformation.</p>",
          "type": "module",
          "displayName": "`tls.DEFAULT_ECDH_CURVE`"
        },
        {
          "textRaw": "`tls.DEFAULT_MAX_VERSION`",
          "name": "`tls.default_max_version`",
          "meta": {
            "added": [
              "v11.4.0"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The default value of the <code>maxVersion</code> option of\n<a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>. It can be assigned any of the supported TLS\nprotocol versions, <code>'TLSv1.3'</code>, <code>'TLSv1.2'</code>, <code>'TLSv1.1'</code>, or <code>'TLSv1'</code>.\n<strong>Default:</strong> <code>'TLSv1.3'</code>, unless changed using CLI options. Using\n<code>--tls-max-v1.2</code> sets the default to <code>'TLSv1.2'</code>.  Using <code>--tls-max-v1.3</code> sets\nthe default to <code>'TLSv1.3'</code>. If multiple of the options are provided, the\nhighest maximum is used.</li>\n</ul>",
          "type": "module",
          "displayName": "`tls.DEFAULT_MAX_VERSION`"
        },
        {
          "textRaw": "`tls.DEFAULT_MIN_VERSION`",
          "name": "`tls.default_min_version`",
          "meta": {
            "added": [
              "v11.4.0"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The default value of the <code>minVersion</code> option of\n<a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>. It can be assigned any of the supported TLS\nprotocol versions, <code>'TLSv1.3'</code>, <code>'TLSv1.2'</code>, <code>'TLSv1.1'</code>, or <code>'TLSv1'</code>.\n<strong>Default:</strong> <code>'TLSv1.2'</code>, unless changed using CLI options. Using\n<code>--tls-min-v1.0</code> sets the default to <code>'TLSv1'</code>. Using <code>--tls-min-v1.1</code> sets\nthe default to <code>'TLSv1.1'</code>. Using <code>--tls-min-v1.3</code> sets the default to\n<code>'TLSv1.3'</code>. If multiple of the options are provided, the lowest minimum is\nused.</li>\n</ul>",
          "type": "module",
          "displayName": "`tls.DEFAULT_MIN_VERSION`"
        },
        {
          "textRaw": "Deprecated APIs",
          "name": "deprecated_apis",
          "modules": [
            {
              "textRaw": "Class: `CryptoStream`",
              "name": "class:_`cryptostream`",
              "meta": {
                "added": [
                  "v0.3.4"
                ],
                "deprecated": [
                  "v0.11.3"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`tls.TLSSocket`][] instead.",
              "desc": "<p>The <code>tls.CryptoStream</code> class represents a stream of encrypted data. This class\nis deprecated and should no longer be used.</p>",
              "modules": [
                {
                  "textRaw": "`cryptoStream.bytesWritten`",
                  "name": "`cryptostream.byteswritten`",
                  "meta": {
                    "added": [
                      "v0.3.4"
                    ],
                    "deprecated": [
                      "v0.11.3"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>cryptoStream.bytesWritten</code> property returns the total number of bytes\nwritten to the underlying socket <em>including</em> the bytes required for the\nimplementation of the TLS protocol.</p>",
                  "type": "module",
                  "displayName": "`cryptoStream.bytesWritten`"
                }
              ],
              "type": "module",
              "displayName": "Class: `CryptoStream`"
            },
            {
              "textRaw": "Class: `SecurePair`",
              "name": "class:_`securepair`",
              "meta": {
                "added": [
                  "v0.3.2"
                ],
                "deprecated": [
                  "v0.11.3"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`tls.TLSSocket`][] instead.",
              "desc": "<p>Returned by <a href=\"#tls_tls_createsecurepair_context_isserver_requestcert_rejectunauthorized_options\"><code>tls.createSecurePair()</code></a>.</p>",
              "modules": [
                {
                  "textRaw": "Event: `'secure'`",
                  "name": "event:_`'secure'`",
                  "meta": {
                    "added": [
                      "v0.3.2"
                    ],
                    "deprecated": [
                      "v0.11.3"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>'secure'</code> event is emitted by the <code>SecurePair</code> object once a secure\nconnection has been established.</p>\n<p>As with checking for the server\n<a href=\"#tls_event_secureconnection\"><code>'secureConnection'</code></a>\nevent, <code>pair.cleartext.authorized</code> should be inspected to confirm whether the\ncertificate used is properly authorized.</p>",
                  "type": "module",
                  "displayName": "Event: `'secure'`"
                }
              ],
              "type": "module",
              "displayName": "Class: `SecurePair`"
            },
            {
              "textRaw": "`tls.createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized][, options])`",
              "name": "`tls.createsecurepair([context][,_isserver][,_requestcert][,_rejectunauthorized][,_options])`",
              "meta": {
                "added": [
                  "v0.3.2"
                ],
                "deprecated": [
                  "v0.11.3"
                ],
                "changes": [
                  {
                    "version": "v5.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/2564",
                    "description": "ALPN options are supported now."
                  }
                ]
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`tls.TLSSocket`][] instead.",
              "desc": "<ul>\n<li><code>context</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a> A secure context object as returned by\n<code>tls.createSecureContext()</code></li>\n<li><code>isServer</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> to specify that this TLS connection should be\nopened as a server.</li>\n<li><code>requestCert</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> <code>true</code> to specify whether a server should request a\ncertificate from a connecting client. Only applies when <code>isServer</code> is <code>true</code>.</li>\n<li><code>rejectUnauthorized</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If not <code>false</code> a server automatically reject\nclients with invalid certificates. Only applies when <code>isServer</code> is <code>true</code>.</li>\n<li>\n<p><code>options</code></p>\n<ul>\n<li><code>enableTrace</code>: See <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>secureContext</code>: A TLS context object from <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a></li>\n<li><code>isServer</code>: If <code>true</code> the TLS socket will be instantiated in server-mode.\n<strong>Default:</strong> <code>false</code>.</li>\n<li><code>server</code> <a href=\"net.html#net_class_net_server\" class=\"type\">&lt;net.Server&gt;</a> A <a href=\"net.html#net_class_net_server\"><code>net.Server</code></a> instance</li>\n<li><code>requestCert</code>: See <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>rejectUnauthorized</code>: See <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>ALPNProtocols</code>: See <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>SNICallback</code>: See <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a></li>\n<li><code>session</code> <a href=\"buffer.html#buffer_class_buffer\" class=\"type\">&lt;Buffer&gt;</a> A <code>Buffer</code> instance containing a TLS session.</li>\n<li><code>requestOCSP</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\" class=\"type\">&lt;boolean&gt;</a> If <code>true</code>, specifies that the OCSP status request\nextension will be added to the client hello and an <code>'OCSPResponse'</code> event\nwill be emitted on the socket before establishing a secure communication.</li>\n</ul>\n</li>\n</ul>\n<p>Creates a new secure pair object with two streams, one of which reads and writes\nthe encrypted data and the other of which reads and writes the cleartext data.\nGenerally, the encrypted stream is piped to/from an incoming encrypted data\nstream and the cleartext one is used as a replacement for the initial encrypted\nstream.</p>\n<p><code>tls.createSecurePair()</code> returns a <code>tls.SecurePair</code> object with <code>cleartext</code> and\n<code>encrypted</code> stream properties.</p>\n<p>Using <code>cleartext</code> has the same API as <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a>.</p>\n<p>The <code>tls.createSecurePair()</code> method is now deprecated in favor of\n<code>tls.TLSSocket()</code>. For example, the code:</p>\n<pre><code class=\"language-js\">pair = tls.createSecurePair(/* ... */);\npair.encrypted.pipe(socket);\nsocket.pipe(pair.encrypted);\n</code></pre>\n<p>can be replaced by:</p>\n<pre><code class=\"language-js\">secureSocket = tls.TLSSocket(socket, options);\n</code></pre>\n<p>where <code>secureSocket</code> has the same API as <code>pair.cleartext</code>.</p>",
              "type": "module",
              "displayName": "`tls.createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized][, options])`"
            }
          ],
          "type": "module",
          "displayName": "Deprecated APIs"
        }
      ],
      "type": "module",
      "displayName": "TLS (SSL)"
    }
  ]
}